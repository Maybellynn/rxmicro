package rxmicro;

import io.rxmicro.common.RxMicroException;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static io.rxmicro.runtime.detail.Reflections.getField;
import static io.rxmicro.runtime.detail.Reflections.getMethod;
import static java.util.Arrays.stream;
import static java.util.stream.Collectors.toList;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$Reflections {

    public static void setFieldValue(final Object model,
                                     final String fieldName,
                                     final Object value) {
        final Field field = getField(model, fieldName, f -> {
            if (!f.canAccess(model)) {
                f.setAccessible(true);
            }
        });
        try {
            field.set(model, value);
        } catch (IllegalAccessException e) {
            throw new RxMicroException(e);
        }
    }

    public static Object invoke(final Object bean,
                                final String methodName,
                                final Object... args) {
        final Method method = getMethod(bean, methodName, stream(args).map(Object::getClass).collect(toList()), m -> {
            if (!m.canAccess(bean instanceof Class ? null : bean)) {
                m.setAccessible(true);
            }
        });
        try {
            return method.invoke(bean, args);
        } catch (IllegalAccessException e) {
            throw new RxMicroException(e);
        } catch (InvocationTargetException e) {
            throw new RxMicroException(e.getTargetException());
        }
    }

    private $$Reflections() {
    }
}
