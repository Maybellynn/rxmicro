package io.rxmicro.examples.cdi.all.user.components;

import io.rxmicro.cdi.detail.BeanSupplier;
import io.rxmicro.cdi.detail.ByTypeAndNameInstanceQualifier;
import io.rxmicro.examples.cdi.all.user.components.children.BusinessService;
import io.rxmicro.examples.cdi.all.user.components.children.BusinessServiceFactory;
import io.rxmicro.examples.cdi.all.user.components.children.BusinessServiceImpl;
import io.rxmicro.examples.cdi.all.user.components.children.FactoryMethodBusinessService;
import io.rxmicro.examples.cdi.all.user.components.children.PrivateFactoryMethodBusinessService;
import io.rxmicro.runtime.detail.ByTypeInstanceQualifier;

import java.util.Set;

import static io.rxmicro.cdi.detail.InternalBeanFactory.getBeansByType;
import static io.rxmicro.cdi.detail.InternalBeanFactory.getOptionalBean;
import static io.rxmicro.cdi.detail.InternalBeanFactory.getRequiredBean;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$BusinessServiceConstructorInjectionFacadeBeanSupplier extends BeanSupplier<BusinessServiceConstructorInjectionFacade> {

    @Override
    public BusinessServiceConstructorInjectionFacade get() {
        final Builder builder = new Builder();
        builder.businessService1 = getRequiredBean(
                builder,
                "businessService1",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "impl")
        );
        builder.businessService2 = getRequiredBean(
                builder,
                "businessService2",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "factoryMethod")
        );
        builder.businessService3 = getRequiredBean(
                builder,
                "businessService3",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "privateFactoryMethod")
        );
        builder.businessService4 = getRequiredBean(
                builder,
                "businessService4",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "proxy")
        );
        builder.businessService5 = getRequiredBean(
                builder,
                "businessService5",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "factoryClass")
        );
        getOptionalBean(
                builder,
                "businessService6",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "not-found")
        ).ifPresent(value -> builder.businessService6 = value);
        builder.businessService7 = getRequiredBean(
                builder,
                "businessService7",
                new ByTypeAndNameInstanceQualifier<>(BusinessServiceImpl.class, "businessService7"),
                new ByTypeInstanceQualifier<>(BusinessServiceImpl.class)
        );
        builder.businessService8 = getRequiredBean(
                builder,
                "businessService8",
                new ByTypeAndNameInstanceQualifier<>(FactoryMethodBusinessService.class, "businessService8"),
                new ByTypeInstanceQualifier<>(FactoryMethodBusinessService.class)
        );
        builder.businessService9 = getRequiredBean(
                builder,
                "businessService9",
                new ByTypeAndNameInstanceQualifier<>(PrivateFactoryMethodBusinessService.class, "businessService9"),
                new ByTypeInstanceQualifier<>(PrivateFactoryMethodBusinessService.class)
        );
        builder.businessService10 = getRequiredBean(
                builder,
                "businessService10",
                new ByTypeAndNameInstanceQualifier<>(BusinessServiceFactory.class, "businessService10"),
                new ByTypeInstanceQualifier<>(BusinessServiceFactory.class)
        );
        builder.businessServices = getBeansByType(
                builder,
                "businessServices",
                BusinessService.class
        );
        final BusinessServiceConstructorInjectionFacade bean = builder.build();
        bean.postConstruct();
        return bean;
    }

    private static final class Builder {

        private BusinessService businessService1;

        private BusinessService businessService2;

        private BusinessService businessService3;

        private BusinessService businessService4;

        private BusinessService businessService5;

        private BusinessService businessService6;

        private BusinessServiceImpl businessService7;

        private FactoryMethodBusinessService businessService8;

        private PrivateFactoryMethodBusinessService businessService9;

        private BusinessServiceFactory businessService10;

        private Set<BusinessService> businessServices;

        private BusinessServiceConstructorInjectionFacade build() {
            return new BusinessServiceConstructorInjectionFacade(businessService1, businessService2, businessService3, businessService4, businessService5, businessService6, businessService7, businessService8, businessService9, businessService10, businessServices);
        }

    }
}
