package io.rxmicro.examples.cdi.all.user.components;

import io.rxmicro.cdi.detail.BeanSupplier;
import io.rxmicro.cdi.detail.ByTypeAndNameInstanceQualifier;
import io.rxmicro.examples.cdi.all.user.components.children.BusinessService;
import io.rxmicro.examples.cdi.all.user.components.children.BusinessServiceFactory;
import io.rxmicro.examples.cdi.all.user.components.children.BusinessServiceImpl;
import io.rxmicro.examples.cdi.all.user.components.children.FactoryMethodBusinessService;
import io.rxmicro.examples.cdi.all.user.components.children.PrivateFactoryMethodBusinessService;
import io.rxmicro.runtime.detail.ByTypeInstanceQualifier;

import static io.rxmicro.cdi.detail.InternalBeanFactory.getBeansByType;
import static io.rxmicro.cdi.detail.InternalBeanFactory.getOptionalBean;
import static io.rxmicro.cdi.detail.InternalBeanFactory.getRequiredBean;
import static rxmicro.$$Reflections.invoke;
import static rxmicro.$$Reflections.setFieldValue;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$BusinessServicePrivateFieldInjectionFacadeBeanSupplier extends BeanSupplier<BusinessServicePrivateFieldInjectionFacade> {

    @Override
    public BusinessServicePrivateFieldInjectionFacade get() {
        final BusinessServicePrivateFieldInjectionFacade bean = new BusinessServicePrivateFieldInjectionFacade();
        setFieldValue(bean, "businessService1", getRequiredBean(
                bean,
                "businessService1",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "impl")
        ));
        setFieldValue(bean, "businessService2", getRequiredBean(
                bean,
                "businessService2",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "factoryMethod")
        ));
        setFieldValue(bean, "businessService3", getRequiredBean(
                bean,
                "businessService3",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "privateFactoryMethod")
        ));
        setFieldValue(bean, "businessService4", getRequiredBean(
                bean,
                "businessService4",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "proxy")
        ));
        setFieldValue(bean, "businessService5", getRequiredBean(
                bean,
                "businessService5",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "factoryClass")
        ));
        getOptionalBean(
                bean,
                "businessService6",
                new ByTypeAndNameInstanceQualifier<>(BusinessService.class, "not-found")
        ).ifPresent(value -> setFieldValue(bean, "businessService6", value));
        setFieldValue(bean, "businessService7", getRequiredBean(
                bean,
                "businessService7",
                new ByTypeAndNameInstanceQualifier<>(BusinessServiceImpl.class, "businessService7"),
                new ByTypeInstanceQualifier<>(BusinessServiceImpl.class)
        ));
        setFieldValue(bean, "businessService8", getRequiredBean(
                bean,
                "businessService8",
                new ByTypeAndNameInstanceQualifier<>(FactoryMethodBusinessService.class, "businessService8"),
                new ByTypeInstanceQualifier<>(FactoryMethodBusinessService.class)
        ));
        setFieldValue(bean, "businessService9", getRequiredBean(
                bean,
                "businessService9",
                new ByTypeAndNameInstanceQualifier<>(PrivateFactoryMethodBusinessService.class, "businessService9"),
                new ByTypeInstanceQualifier<>(PrivateFactoryMethodBusinessService.class)
        ));
        setFieldValue(bean, "businessService10", getRequiredBean(
                bean,
                "businessService10",
                new ByTypeAndNameInstanceQualifier<>(BusinessServiceFactory.class, "businessService10"),
                new ByTypeInstanceQualifier<>(BusinessServiceFactory.class)
        ));
        setFieldValue(bean, "businessServices", getBeansByType(
                bean,
                "businessServices",
                BusinessService.class
        ));
        invoke(bean, "postConstruct");
        return bean;
    }
}
