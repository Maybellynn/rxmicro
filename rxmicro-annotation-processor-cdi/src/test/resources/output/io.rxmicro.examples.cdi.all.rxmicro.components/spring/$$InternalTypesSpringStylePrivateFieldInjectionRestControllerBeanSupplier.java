package io.rxmicro.examples.cdi.all.rxmicro.components.spring;

import io.rxmicro.cdi.detail.BeanSupplier;
import io.rxmicro.data.mongo.MongoConfig;
import io.rxmicro.data.sql.r2dbc.postgresql.PostgreSQLConfig;
import io.rxmicro.examples.cdi.all.rxmicro.components.component.MongoRepository;
import io.rxmicro.examples.cdi.all.rxmicro.components.component.PostgreSQLRepository;
import io.rxmicro.examples.cdi.all.rxmicro.components.component.RestClient;
import io.rxmicro.http.client.HttpClientConfig;
import io.rxmicro.rest.server.HttpServerConfig;
import io.rxmicro.rest.server.RestServerConfig;
import io.rxmicro.rest.server.netty.NettyRestServerConfig;

import static io.rxmicro.config.Configs.getConfig;
import static io.rxmicro.data.RepositoryFactory.getRepository;
import static io.rxmicro.data.mongo.MongoClientFactory.getMongoClient;
import static io.rxmicro.data.sql.r2dbc.postgresql.PostgreSQLClientFactory.getPostgreSQLConnectionFactory;
import static io.rxmicro.data.sql.r2dbc.postgresql.PostgreSQLClientFactory.getPostgreSQLConnectionPool;
import static io.rxmicro.rest.client.RestClientFactory.getRestClient;
import static rxmicro.$$Reflections.invoke;
import static rxmicro.$$Reflections.setFieldValue;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$InternalTypesSpringStylePrivateFieldInjectionRestControllerBeanSupplier extends BeanSupplier<InternalTypesSpringStylePrivateFieldInjectionRestController> {

    @Override
    public InternalTypesSpringStylePrivateFieldInjectionRestController get() {
        final InternalTypesSpringStylePrivateFieldInjectionRestController bean = new InternalTypesSpringStylePrivateFieldInjectionRestController();
        setFieldValue(bean, "mongoRepository", getRepository(MongoRepository.class));
        setFieldValue(bean, "mongoConfig", getConfig("mongo", MongoConfig.class));
        setFieldValue(bean, "customMongoConfig", getConfig("custom-mongo", MongoConfig.class));
        setFieldValue(bean, "mongoClient", getMongoClient("mongo"));
        setFieldValue(bean, "customMongoClient", getMongoClient("custom-mongo"));
        setFieldValue(bean, "postgreSQLRepository", getRepository(PostgreSQLRepository.class));
        setFieldValue(bean, "postgreSQLConfig", getConfig("postgre-sql", PostgreSQLConfig.class));
        setFieldValue(bean, "customPostgreSQLConfig", getConfig("custom-postgre-sql", PostgreSQLConfig.class));
        setFieldValue(bean, "connectionFactory", getPostgreSQLConnectionFactory("postgre-sql"));
        setFieldValue(bean, "connectionPool", getPostgreSQLConnectionPool("postgre-sql"));
        setFieldValue(bean, "customConnectionFactory", getPostgreSQLConnectionFactory("custom-postgre-sql"));
        setFieldValue(bean, "customConnectionPool", getPostgreSQLConnectionPool("custom-postgre-sql"));
        setFieldValue(bean, "restClient", getRestClient(RestClient.class));
        setFieldValue(bean, "httpClientConfig", getConfig("http-client", HttpClientConfig.class));
        setFieldValue(bean, "customHttpClientConfig", getConfig("custom-http-client", HttpClientConfig.class));
        setFieldValue(bean, "httpServerConfig", getConfig("http-server", HttpServerConfig.class));
        setFieldValue(bean, "restServerConfig", getConfig("rest-server", RestServerConfig.class));
        setFieldValue(bean, "nettyRestServerConfig", getConfig("netty-rest-server", NettyRestServerConfig.class));
        invoke(bean, "postConstruct");
        return bean;
    }
}
