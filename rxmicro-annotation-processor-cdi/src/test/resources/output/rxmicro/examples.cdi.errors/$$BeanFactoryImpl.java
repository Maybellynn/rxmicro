package rxmicro.examples.cdi.errors;

import io.rxmicro.cdi.detail.InternalBeanFactory;
import io.rxmicro.examples.cdi.errors.circular_dependencies.$$Dependency1BeanSupplier;
import io.rxmicro.examples.cdi.errors.circular_dependencies.$$Dependency2BeanSupplier;
import io.rxmicro.examples.cdi.errors.circular_dependencies.Dependency1;
import io.rxmicro.examples.cdi.errors.circular_dependencies.Dependency2;
import io.rxmicro.examples.cdi.errors.not_found_bean.$$ContainerWithNotFoundBeanBeanSupplier;
import io.rxmicro.examples.cdi.errors.not_found_bean.ContainerWithNotFoundBean;
import io.rxmicro.examples.cdi.errors.resource_not_found.$$ContainerWithNotFoundResourceBeanSupplier;
import io.rxmicro.examples.cdi.errors.resource_not_found.ContainerWithNotFoundResource;
import io.rxmicro.runtime.detail.ByTypeInstanceQualifier;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$BeanFactoryImpl extends InternalBeanFactory {

    static {
        $$EnvironmentCustomizer.customize();
    }

    public $$BeanFactoryImpl() {
        register(
                Dependency1.class, new $$Dependency1BeanSupplier(),
                new ByTypeInstanceQualifier<>(Dependency1.class)
        );
        register(
                Dependency2.class, new $$Dependency2BeanSupplier(),
                new ByTypeInstanceQualifier<>(Dependency2.class)
        );
        register(
                ContainerWithNotFoundBean.class, new $$ContainerWithNotFoundBeanBeanSupplier(),
                new ByTypeInstanceQualifier<>(ContainerWithNotFoundBean.class)
        );
        register(
                ContainerWithNotFoundResource.class, new $$ContainerWithNotFoundResourceBeanSupplier(),
                new ByTypeInstanceQualifier<>(ContainerWithNotFoundResource.class)
        );
    }
}
