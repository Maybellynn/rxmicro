package io.rxmicro.examples.data.r2dbc.postgresql.variables;

import io.r2dbc.pool.ConnectionPool;
import io.rxmicro.data.sql.model.EntityFieldMap;
import io.rxmicro.data.sql.r2dbc.postgresql.detail.AbstractPostgreSQLRepository;
import io.rxmicro.examples.data.r2dbc.postgresql.variables.model.$$EntityEntityFromR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.variables.model.$$EntityEntityToR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.variables.model.Entity;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$PostgreSQLInsertDataRepository extends AbstractPostgreSQLRepository implements InsertDataRepository {

    private final $$EntityEntityFromR2DBCSQLDBConverter entityEntityFromR2DBCSQLDBConverter =
            new $$EntityEntityFromR2DBCSQLDBConverter();

    private final $$EntityEntityToR2DBCSQLDBConverter entityEntityToR2DBCSQLDBConverter =
            new $$EntityEntityToR2DBCSQLDBConverter();

    private final ConnectionPool pool;

    public $$PostgreSQLInsertDataRepository(final ConnectionPool pool) {
        super(InsertDataRepository.class);
        this.pool = pool;
    }

    @Override
    public CompletableFuture<Void> insertIntoEntityTable1(final Entity entity) {
        // Original SQL statement:  'INSERT INTO ${table}(${inserted-columns}) VALUES(${values})'
        final String generatedSQL = "INSERT INTO entity_table(value) VALUES($1)";
        final Object[] insertParams = entityEntityToR2DBCSQLDBConverter.getInsertParams(entity);
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams)
                        .flatMap(r -> Mono.from(r.getRowsUpdated()))

                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))

                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }

    @Override
    public CompletableFuture<Entity> insertIntoEntityTable2(final Entity entity) {
        // Original SQL statement:  'INSERT INTO ${table}(${inserted-columns}) VALUES(${values}) RETURNING *'
        final String generatedSQL = "INSERT INTO entity_table(value) VALUES($1) RETURNING id, value";
        final Object[] insertParams = entityEntityToR2DBCSQLDBConverter.getInsertParams(entity);
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> entityEntityToR2DBCSQLDBConverter.setIdValue(entity, row, meta))))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Entity.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Entity> insertIntoEntityTable3(final String value) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(${values}) RETURNING *'
        final String generatedSQL = "INSERT INTO entity_table VALUES($1) RETURNING id, value";
        final Entity entity = new Entity();
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> entityEntityFromR2DBCSQLDBConverter.setIdValue(entity, row, meta))))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Entity.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<EntityFieldMap> insertIntoEntityTable4(final String value) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(${values}) RETURNING *'
        final String generatedSQL = "INSERT INTO entity_table VALUES($1) RETURNING id, value";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.map(toEntityFieldMap())))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, EntityFieldMap.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<EntityFieldMap> insertIntoGlobalTable1(final String value) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(?) RETURNING value'
        final String generatedSQL = "INSERT INTO global_table VALUES($1) RETURNING value";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.map(toEntityFieldMap())))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, EntityFieldMap.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Void> insertIntoGlobalTable2(final String value) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(?)'
        final String generatedSQL = "INSERT INTO global_table VALUES($1)";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.getRowsUpdated()))

                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))

                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }

    @Override
    public CompletableFuture<EntityFieldMap> insertIntoLocalTable1(final String value) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(?) RETURNING value'
        final String generatedSQL = "INSERT INTO local_table VALUES($1) RETURNING value";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.map(toEntityFieldMap())))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, EntityFieldMap.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Void> insertIntoLocalTable2(final String value) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(?)'
        final String generatedSQL = "INSERT INTO local_table VALUES($1)";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.getRowsUpdated()))

                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))

                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }
}
