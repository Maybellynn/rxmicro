package io.rxmicro.examples.data.r2dbc.postgresql.variables;

import io.r2dbc.pool.ConnectionPool;
import io.rxmicro.data.sql.model.EntityFieldMap;
import io.rxmicro.data.sql.r2dbc.postgresql.detail.AbstractPostgreSQLRepository;
import io.rxmicro.examples.data.r2dbc.postgresql.variables.model.$$EntityEntityFromR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.variables.model.$$EntityEntityToR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.variables.model.Entity;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$PostgreSQLDeleteDataRepository extends AbstractPostgreSQLRepository implements DeleteDataRepository {

    private final $$EntityEntityFromR2DBCSQLDBConverter entityEntityFromR2DBCSQLDBConverter =
            new $$EntityEntityFromR2DBCSQLDBConverter();

    private final $$EntityEntityToR2DBCSQLDBConverter entityEntityToR2DBCSQLDBConverter =
            new $$EntityEntityToR2DBCSQLDBConverter();

    private final ConnectionPool pool;

    public $$PostgreSQLDeleteDataRepository(final ConnectionPool pool) {
        super(DeleteDataRepository.class);
        this.pool = pool;
    }

    @Override
    public CompletableFuture<Void> deleteEntityTable1(final Entity entity) {
        // Original SQL statement:  'DELETE FROM ${table}'
        final String generatedSQL = "DELETE FROM entity_table";
        final Object primaryKey = entityEntityToR2DBCSQLDBConverter.getPrimaryKey(entity);
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, primaryKey)
                        .flatMap(r -> Mono.from(r.getRowsUpdated()))
                        
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                        
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }

    @Override
    public CompletableFuture<Entity> deleteEntityTable2(final Entity entity) {
        // Original SQL statement:  'DELETE FROM ${table} RETURNING *'
        final String generatedSQL = "DELETE FROM entity_table RETURNING id, value";
        final Object primaryKey = entityEntityToR2DBCSQLDBConverter.getPrimaryKey(entity);
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, primaryKey)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> entityEntityFromR2DBCSQLDBConverter.setIdValue(entity, row, meta))))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Entity.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Entity> deleteEntityTable3(final String value) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE value = ? RETURNING *'
        final String generatedSQL = "DELETE FROM entity_table WHERE value = $1 RETURNING id, value";
        final Entity entity = new Entity();
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> entityEntityFromR2DBCSQLDBConverter.setIdValue(entity, row, meta))))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Entity.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<EntityFieldMap> deleteEntityTable4(final String value) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE value = ? RETURNING *'
        final String generatedSQL = "DELETE FROM entity_table WHERE value = $1 RETURNING id, value";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.map(toEntityFieldMap())))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, EntityFieldMap.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<EntityFieldMap> deleteGlobalTable1(final String value) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE value = ? RETURNING value'
        final String generatedSQL = "DELETE FROM global_table WHERE value = $1 RETURNING value";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.map(toEntityFieldMap())))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, EntityFieldMap.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Void> deleteGlobalTable2(final String value) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE value = ?'
        final String generatedSQL = "DELETE FROM global_table WHERE value = $1";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.getRowsUpdated()))
                        
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                        
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }

    @Override
    public CompletableFuture<EntityFieldMap> deleteLocalTable1(final String value) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE value = ? RETURNING value'
        final String generatedSQL = "DELETE FROM local_table WHERE value = $1 RETURNING value";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.map(toEntityFieldMap())))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty()))
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, EntityFieldMap.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Void> deleteLocalTable2(final String value) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE value = ?'
        final String generatedSQL = "DELETE FROM local_table WHERE value = $1";
        return pool.create()
                .flatMap(c -> executeStatement(c, generatedSQL, value)
                        .flatMap(r -> Mono.from(r.getRowsUpdated()))
                        
                        .delayUntil(s -> close(c))
                        .onErrorResume(e -> close(c)
                                .then(Mono.error(e)))
                        
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }
}
