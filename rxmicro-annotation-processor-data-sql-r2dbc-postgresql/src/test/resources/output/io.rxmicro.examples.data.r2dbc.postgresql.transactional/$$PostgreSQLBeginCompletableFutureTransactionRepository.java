package io.rxmicro.examples.data.r2dbc.postgresql.transactional;

import io.r2dbc.pool.ConnectionPool;
import io.rxmicro.data.sql.model.IsolationLevel;
import io.rxmicro.data.sql.model.completablefuture.Transaction;
import io.rxmicro.data.sql.r2dbc.postgresql.detail.AbstractPostgreSQLRepository;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$PostgreSQLBeginCompletableFutureTransactionRepository extends AbstractPostgreSQLRepository implements BeginCompletableFutureTransactionRepository {

    private final ConnectionPool pool;

    public $$PostgreSQLBeginCompletableFutureTransactionRepository(final ConnectionPool pool) {
        super(BeginCompletableFutureTransactionRepository.class);
        this.pool = pool;
    }

    @Override
    public CompletionStage<Transaction> beginTransaction1() {
        return pool.create()
                .flatMap(c -> beginCompletableFutureTransaction(c))
                .toFuture();
    }

    @Override
    public CompletionStage<Transaction> beginTransaction1(final IsolationLevel isolationLevel) {
        return pool.create()
                .flatMap(c -> beginCompletableFutureTransaction(c))
                .toFuture()
                .thenCompose(t -> t.setIsolationLevel(isolationLevel)
                        .thenApply(v -> t));
    }

    @Override
    public CompletableFuture<Transaction> beginTransaction2() {
        return pool.create()
                .flatMap(c -> beginCompletableFutureTransaction(c))
                .toFuture();
    }

    @Override
    public CompletableFuture<Transaction> beginTransaction2(final IsolationLevel isolationLevel) {
        return pool.create()
                .flatMap(c -> beginCompletableFutureTransaction(c))
                .toFuture()
                .thenCompose(t -> t.setIsolationLevel(isolationLevel)
                        .thenApply(v -> t));
    }
}
