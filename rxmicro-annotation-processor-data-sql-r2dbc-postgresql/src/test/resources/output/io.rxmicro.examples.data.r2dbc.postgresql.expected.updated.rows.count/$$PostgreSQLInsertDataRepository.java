package io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count;

import io.r2dbc.pool.ConnectionPool;
import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Single;
import io.rxmicro.data.sql.r2dbc.detail.RepositoryConnectionFactory;
import io.rxmicro.data.sql.r2dbc.detail.RepositoryConnectionPool;
import io.rxmicro.data.sql.r2dbc.postgresql.detail.AbstractPostgreSQLRepository;
import io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count.model.$$AccountEntityFromR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count.model.$$AccountEntityToR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count.model.Account;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$PostgreSQLInsertDataRepository extends AbstractPostgreSQLRepository implements InsertDataRepository {

    private final $$AccountEntityFromR2DBCSQLDBConverter accountEntityFromR2DBCSQLDBConverter =
            new $$AccountEntityFromR2DBCSQLDBConverter();

    private final $$AccountEntityToR2DBCSQLDBConverter accountEntityToR2DBCSQLDBConverter =
            new $$AccountEntityToR2DBCSQLDBConverter();

    private final RepositoryConnectionFactory connectionFactory;

    public $$PostgreSQLInsertDataRepository(final ConnectionPool pool) {
        super(InsertDataRepository.class);
        this.connectionFactory = new RepositoryConnectionPool(InsertDataRepository.class, pool);
    }

    @Override
    public CompletableFuture<Void> insert01(final Account account) {
        // Original SQL statement:  'INSERT INTO ${table}(${inserted-columns}) VALUES(${values})'
        final String generatedSQL = "INSERT INTO account(id, email, first_name, last_name, balance, role) VALUES(nextval('account_seq'), $1, $2, $3, $4, $5)";
        final Object[] insertParams = accountEntityToR2DBCSQLDBConverter.getInsertParams(account);
        final Class<?>[] insertParamTypes = accountEntityToR2DBCSQLDBConverter.getInsertParamTypes();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }

    @Override
    public CompletableFuture<Integer> insert02() {
        // Original SQL statement:  'INSERT INTO ${table} SELECT * FROM dump'
        final String generatedSQL = "INSERT INTO account SELECT * FROM dump";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(10, actual, generatedSQL))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Integer.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Boolean> insert03(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?)'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2)";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Boolean.class))))
                .map(r -> r > 0)
                .toFuture();
    }

    @Override
    public CompletableFuture<Account> insert04(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?) RETURNING *'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2) RETURNING id, email, first_name, last_name, balance, role";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(throwExceptionIfEmptyResult(generatedSQL, insertParams, insertParamTypes))
                        )
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Account.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Account> insert05(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?) RETURNING *'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2) RETURNING id, email, first_name, last_name, balance, role";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                .map(ignored -> (Account)throwExceptionIfNotEmptyResult(generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty())
                        )
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Account.class))))
                .toFuture();
    }

    @Override
    public CompletionStage<Void> insert06(final Account account) {
        // Original SQL statement:  'INSERT INTO ${table}(${inserted-columns}) VALUES(${values})'
        final String generatedSQL = "INSERT INTO account(id, email, first_name, last_name, balance, role) VALUES(nextval('account_seq'), $1, $2, $3, $4, $5)";
        final Object[] insertParams = accountEntityToR2DBCSQLDBConverter.getInsertParams(account);
        final Class<?>[] insertParamTypes = accountEntityToR2DBCSQLDBConverter.getInsertParamTypes();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }

    @Override
    public CompletionStage<Integer> insert07() {
        // Original SQL statement:  'INSERT INTO ${table} SELECT * FROM dump'
        final String generatedSQL = "INSERT INTO account SELECT * FROM dump";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(10, actual, generatedSQL))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Integer.class))))
                .toFuture();
    }

    @Override
    public CompletionStage<Boolean> insert08(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?)'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2)";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Boolean.class))))
                .map(r -> r > 0)
                .toFuture();
    }

    @Override
    public CompletionStage<Account> insert09(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?) RETURNING *'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2) RETURNING id, email, first_name, last_name, balance, role";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(throwExceptionIfEmptyResult(generatedSQL, insertParams, insertParamTypes))
                        )
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Account.class))))
                .toFuture();
    }

    @Override
    public CompletionStage<Account> insert10(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?) RETURNING *'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2) RETURNING id, email, first_name, last_name, balance, role";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                .map(ignored -> (Account)throwExceptionIfNotEmptyResult(generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty())
                        )
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Account.class))))
                .toFuture();
    }

    @Override
    public Mono<Void> insert11(final Account account) {
        // Original SQL statement:  'INSERT INTO ${table}(${inserted-columns}) VALUES(${values})'
        final String generatedSQL = "INSERT INTO account(id, email, first_name, last_name, balance, role) VALUES(nextval('account_seq'), $1, $2, $3, $4, $5)";
        final Object[] insertParams = accountEntityToR2DBCSQLDBConverter.getInsertParams(account);
        final Class<?>[] insertParamTypes = accountEntityToR2DBCSQLDBConverter.getInsertParamTypes();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .then();
    }

    @Override
    public Mono<Integer> insert12() {
        // Original SQL statement:  'INSERT INTO ${table} SELECT * FROM dump'
        final String generatedSQL = "INSERT INTO account SELECT * FROM dump";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(10, actual, generatedSQL))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                );
    }

    @Override
    public Mono<Boolean> insert13(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?)'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2)";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .map(r -> r > 0);
    }

    @Override
    public Mono<Account> insert14(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?) RETURNING *'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2) RETURNING id, email, first_name, last_name, balance, role";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(throwExceptionIfEmptyResult(generatedSQL, insertParams, insertParamTypes))
                        )
                );
    }

    @Override
    public Mono<Account> insert15(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?) RETURNING *'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2) RETURNING id, email, first_name, last_name, balance, role";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                .map(ignored -> (Account)throwExceptionIfNotEmptyResult(generatedSQL, insertParams, insertParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty())
                        )
                );
    }

    @Override
    public Completable insert16(final Account account) {
        // Original SQL statement:  'INSERT INTO ${table}(${inserted-columns}) VALUES(${values})'
        final String generatedSQL = "INSERT INTO account(id, email, first_name, last_name, balance, role) VALUES(nextval('account_seq'), $1, $2, $3, $4, $5)";
        final Object[] insertParams = accountEntityToR2DBCSQLDBConverter.getInsertParams(account);
        final Class<?>[] insertParamTypes = accountEntityToR2DBCSQLDBConverter.getInsertParamTypes();
        return Completable.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                                .flatMap(r -> Mono.from(r.getRowsUpdated())
                                        .map(actual -> validateRowsUpdated(1, actual, generatedSQL, insertParams, insertParamTypes))
                                )
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                        )
        );
    }

    @Override
    public Single<Integer> insert17() {
        // Original SQL statement:  'INSERT INTO ${table} SELECT * FROM dump'
        final String generatedSQL = "INSERT INTO account SELECT * FROM dump";
        return Single.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL)
                                .flatMap(r -> Mono.from(r.getRowsUpdated())
                                        .map(actual -> validateRowsUpdated(10, actual, generatedSQL))
                                )
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                        )
        );
    }

    @Override
    public Single<Boolean> insert18(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?)'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2)";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        return Single.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                                .flatMap(r -> Mono.from(r.getRowsUpdated())
                                        .map(actual -> validateRowsUpdated(1, actual, generatedSQL, insertParams, insertParamTypes))
                                )
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                        )
        ).map(r -> r > 0);
    }

    @Override
    public Single<Account> insert19(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?) RETURNING *'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2) RETURNING id, email, first_name, last_name, balance, role";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        final Account resultEntity = new Account();
        return Single.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                                .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                                .switchIfEmpty(close(c)
                                        .then(throwExceptionIfEmptyResult(generatedSQL, insertParams, insertParamTypes))
                                )
                        )
        );
    }

    @Override
    public Single<Account> insert20(final String firstName, final String lastName) {
        // Original SQL statement:  'INSERT INTO ${table} VALUES(nextval('account_seq'), ?, ?) RETURNING *'
        final String generatedSQL = "INSERT INTO account VALUES(nextval('account_seq'), $1, $2) RETURNING id, email, first_name, last_name, balance, role";
        final Object[] insertParams = {firstName, lastName};
        final Class<?>[] insertParamTypes = {String.class, String.class};
        final Account resultEntity = new Account();
        return Single.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL, insertParams, insertParamTypes)
                                .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                        .map(ignored -> (Account)throwExceptionIfNotEmptyResult(generatedSQL, insertParams, insertParamTypes))
                                )
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                                .switchIfEmpty(close(c)
                                        .then(Mono.empty())
                                )
                        )
        );
    }
}
