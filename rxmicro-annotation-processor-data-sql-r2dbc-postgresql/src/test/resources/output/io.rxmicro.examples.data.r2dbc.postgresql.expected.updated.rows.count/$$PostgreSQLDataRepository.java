package io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count;

import io.r2dbc.pool.ConnectionPool;
import io.rxmicro.data.sql.r2dbc.detail.RepositoryConnectionFactory;
import io.rxmicro.data.sql.r2dbc.detail.RepositoryConnectionPool;
import io.rxmicro.data.sql.r2dbc.postgresql.detail.AbstractPostgreSQLRepository;
import io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count.model.$$AccountEntityFromR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count.model.Account;
import reactor.core.publisher.Mono;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$PostgreSQLDataRepository extends AbstractPostgreSQLRepository implements DataRepository {

    private final $$AccountEntityFromR2DBCSQLDBConverter accountEntityFromR2DBCSQLDBConverter =
            new $$AccountEntityFromR2DBCSQLDBConverter();

    private final RepositoryConnectionFactory connectionFactory;

    public $$PostgreSQLDataRepository(final ConnectionPool pool) {
        super(DataRepository.class);
        this.connectionFactory = new RepositoryConnectionPool(DataRepository.class, pool);
    }

    @Override
    public Mono<Integer> update01(final String firstName, final String lastName, final String email) {
        // Original SQL statement:  'UPDATE ${table} SET first_name = ?, last_name = ? WHERE email = ?'
        final String generatedSQL = "UPDATE account SET first_name = $1, last_name = $2 WHERE email = $3";
        final Object[] updateParams = {firstName, lastName, email};
        final Class<?>[] updateParamTypes = {String.class, String.class, String.class};
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, updateParams, updateParamTypes)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, updateParams, updateParamTypes))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                );
    }

    @Override
    public Mono<Integer> update02() {
        // Original SQL statement:  'UPDATE ${table} SET first_name = 'firstName', last_name = 'lastName' WHERE email = 'email''
        final String generatedSQL = "UPDATE account SET first_name = 'firstName', last_name = 'lastName' WHERE email = 'email'";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                );
    }

    @Override
    public Mono<Account> update03(final String firstName, final String lastName, final String email) {
        // Original SQL statement:  'UPDATE ${table} SET first_name = ?, last_name = ? WHERE email = ? RETURNING *'
        final String generatedSQL = "UPDATE account SET first_name = $1, last_name = $2 WHERE email = $3 RETURNING id, email, first_name, last_name, balance, role";
        final Object[] updateParams = {firstName, lastName, email};
        final Class<?>[] updateParamTypes = {String.class, String.class, String.class};
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, updateParams, updateParamTypes)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(throwExceptionIfEmptyResult(generatedSQL, updateParams, updateParamTypes))
                        )
                );
    }

    @Override
    public Mono<Account> update04() {
        // Original SQL statement:  'UPDATE ${table} SET first_name = 'Richard', last_name = 'Hendricks' WHERE email = 'richard.hendricks@piedpiper.com' RETURNING *'
        final String generatedSQL = "UPDATE account SET first_name = 'Richard', last_name = 'Hendricks' WHERE email = 'richard.hendricks@piedpiper.com' RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                .map(ignore -> (Account)throwExceptionIfNotEmptyResult(generatedSQL))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty())
                        )
                );
    }
}
