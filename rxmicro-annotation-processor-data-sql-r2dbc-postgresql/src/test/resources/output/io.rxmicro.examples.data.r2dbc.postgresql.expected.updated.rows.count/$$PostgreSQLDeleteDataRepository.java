package io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count;

import io.r2dbc.pool.ConnectionPool;
import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Single;
import io.rxmicro.data.sql.model.reactor.Transaction;
import io.rxmicro.data.sql.r2dbc.detail.RepositoryConnectionFactory;
import io.rxmicro.data.sql.r2dbc.detail.RepositoryConnectionPool;
import io.rxmicro.data.sql.r2dbc.postgresql.detail.AbstractPostgreSQLRepository;
import io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count.model.$$AccountEntityFromR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.expected.updated.rows.count.model.Account;
import io.rxmicro.logger.RequestIdSupplier;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$PostgreSQLDeleteDataRepository extends AbstractPostgreSQLRepository implements DeleteDataRepository {

    private final $$AccountEntityFromR2DBCSQLDBConverter accountEntityFromR2DBCSQLDBConverter =
            new $$AccountEntityFromR2DBCSQLDBConverter();

    private final RepositoryConnectionFactory connectionFactory;

    public $$PostgreSQLDeleteDataRepository(final ConnectionPool pool) {
        super(DeleteDataRepository.class);
        this.connectionFactory = new RepositoryConnectionPool(DeleteDataRepository.class, pool);
    }

    @Override
    public CompletableFuture<Void> delete01(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter}'
        final String generatedSQL = "DELETE FROM account WHERE id = $1";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }

    @Override
    public CompletableFuture<Integer> delete02() {
        // Original SQL statement:  'DELETE FROM ${table}'
        final String generatedSQL = "DELETE FROM account";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(10, actual, generatedSQL))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Integer.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Boolean> delete03(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter}'
        final String generatedSQL = "DELETE FROM account WHERE id = $1";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Boolean.class))))
                .map(r -> r > 0)
                .toFuture();
    }

    @Override
    public CompletableFuture<Account> delete04(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter} RETURNING *'
        final String generatedSQL = "DELETE FROM account WHERE id = $1 RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(throwExceptionIfEmptyResult(generatedSQL, id))
                        )
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Account.class))))
                .toFuture();
    }

    @Override
    public CompletableFuture<Account> delete05(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter} RETURNING *'
        final String generatedSQL = "DELETE FROM account WHERE id = $1 RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                .map(ignored -> (Account)throwExceptionIfNotEmptyResult(generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty())
                        )
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletableFuture.class, Account.class))))
                .toFuture();
    }

    @Override
    public CompletionStage<Void> delete06(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter}'
        final String generatedSQL = "DELETE FROM account WHERE id = $1";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Void.class))))
                .toFuture()
                .thenApply(r -> null);
    }

    @Override
    public CompletionStage<Integer> delete07(final String firstName1, final String firstName2, final String firstName3) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE first_name = ? OR first_name = ? OR first_name = ?'
        final String generatedSQL = "DELETE FROM account WHERE first_name = $1 OR first_name = $2 OR first_name = $3";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, firstName1, firstName2, firstName3)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(10, actual, generatedSQL, firstName1, firstName2, firstName3))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Integer.class))))
                .toFuture();
    }

    @Override
    public CompletionStage<Boolean> delete08(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter}'
        final String generatedSQL = "DELETE FROM account WHERE id = $1";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Boolean.class))))
                .map(r -> r > 0)
                .toFuture();
    }

    @Override
    public CompletionStage<Account> delete09(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter} RETURNING *'
        final String generatedSQL = "DELETE FROM account WHERE id = $1 RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(throwExceptionIfEmptyResult(generatedSQL, id))
                        )
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Account.class))))
                .toFuture();
    }

    @Override
    public CompletionStage<Account> delete10(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter} RETURNING *'
        final String generatedSQL = "DELETE FROM account WHERE id = $1 RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                .map(ignored -> (Account)throwExceptionIfNotEmptyResult(generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty())
                        )
                )
                .switchIfEmpty(Mono.defer(() -> Mono.error(useOptionalExceptionSupplier(CompletionStage.class, Account.class))))
                .toFuture();
    }

    @Override
    public Mono<Void> delete11(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter}'
        final String generatedSQL = "DELETE FROM account WHERE id = $1";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .then();
    }

    @Override
    public Mono<Integer> delete12(final Transaction transaction, final String name) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE first_name ILIKE ? OR last_name ILIKE ?'
        final String generatedSQL = "DELETE FROM account WHERE first_name ILIKE $1 OR last_name ILIKE $2";
        return extractConnectionFrom(transaction)
                .flatMap(c -> executeStatement(c, generatedSQL, name, name)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(10, actual, generatedSQL, name, name))
                        )
                );
    }

    @Override
    public Mono<Boolean> delete13(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter}'
        final String generatedSQL = "DELETE FROM account WHERE id = $1";
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.getRowsUpdated())
                                .map(actual -> validateRowsUpdated(1, actual, generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                )
                .map(r -> r > 0);
    }

    @Override
    public Mono<Account> delete14(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter} RETURNING *'
        final String generatedSQL = "DELETE FROM account WHERE id = $1 RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(throwExceptionIfEmptyResult(generatedSQL, id))
                        )
                );
    }

    @Override
    public Mono<Account> delete15(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter} RETURNING *'
        final String generatedSQL = "DELETE FROM account WHERE id = $1 RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return this.connectionFactory.create()
                .flatMap(c -> executeStatement(c, generatedSQL, id)
                        .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                .map(ignored -> (Account)throwExceptionIfNotEmptyResult(generatedSQL, id))
                        )
                        .delayUntil(s -> close(c))
                        .onErrorResume(createCloseThenReturnErrorFallback(c))
                        .switchIfEmpty(close(c)
                                .then(Mono.empty())
                        )
                );
    }

    @Override
    public Completable delete16(final RequestIdSupplier requestIdSupplier, final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter}'
        final String generatedSQL = "DELETE FROM account WHERE id = $1";
        return Completable.fromPublisher(
                this.connectionFactory.create(requestIdSupplier)
                        .flatMap(c -> executeStatement(c, generatedSQL, id)
                                .flatMap(r -> Mono.from(r.getRowsUpdated())
                                        .map(actual -> validateRowsUpdated(1, actual, generatedSQL, id))
                                )
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                        )
        );
    }

    @Override
    public Single<Integer> delete17() {
        // Original SQL statement:  'DELETE FROM ${table} WHERE email NOT IN (SELECT email FROM blocked_accounts)'
        final String generatedSQL = "DELETE FROM account WHERE email NOT IN (SELECT email FROM blocked_accounts)";
        return Single.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL)
                                .flatMap(r -> Mono.from(r.getRowsUpdated())
                                        .map(actual -> validateRowsUpdated(1, actual, generatedSQL))
                                )
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                        )
        );
    }

    @Override
    public Single<Boolean> delete18(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter}'
        final String generatedSQL = "DELETE FROM account WHERE id = $1";
        return Single.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL, id)
                                .flatMap(r -> Mono.from(r.getRowsUpdated())
                                        .map(actual -> validateRowsUpdated(1, actual, generatedSQL, id))
                                )
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                        )
        ).map(r -> r > 0);
    }

    @Override
    public Single<Account> delete19(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter} RETURNING *'
        final String generatedSQL = "DELETE FROM account WHERE id = $1 RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return Single.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL, id)
                                .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta))))
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                                .switchIfEmpty(close(c)
                                        .then(throwExceptionIfEmptyResult(generatedSQL, id))
                                )
                        )
        );
    }

    @Override
    public Single<Account> delete20(final Long id) {
        // Original SQL statement:  'DELETE FROM ${table} WHERE ${by-id-filter} RETURNING *'
        final String generatedSQL = "DELETE FROM account WHERE id = $1 RETURNING id, email, first_name, last_name, balance, role";
        final Account resultEntity = new Account();
        return Single.fromPublisher(
                this.connectionFactory.create()
                        .flatMap(c -> executeStatement(c, generatedSQL, id)
                                .flatMap(r -> Mono.from(r.map((row, meta) -> accountEntityFromR2DBCSQLDBConverter.setIdEmailFirst_nameLast_nameBalanceRole(resultEntity, row, meta)))
                                        .map(ignored -> (Account)throwExceptionIfNotEmptyResult(generatedSQL, id))
                                )
                                .delayUntil(s -> close(c))
                                .onErrorResume(createCloseThenReturnErrorFallback(c))
                                .switchIfEmpty(close(c)
                                        .then(Mono.empty())
                                )
                        )
        );
    }
}
