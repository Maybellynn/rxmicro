package io.rxmicro.examples.data.r2dbc.postgresql.model.fields.setter_getter.model;

import io.r2dbc.spi.Row;
import io.rxmicro.data.sql.r2dbc.detail.EntityToR2DBCSQLDBConverter;
import io.rxmicro.examples.data.r2dbc.postgresql.model.fields.Status;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.InetAddress;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZonedDateTime;
import java.util.UUID;

import static io.rxmicro.common.util.Requires.require;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$EntityEntityToR2DBCSQLDBConverter extends EntityToR2DBCSQLDBConverter<Entity, Row> {

    private static final Class<?>[] INSERT_PARAM_TYPES = {
            Status.class,
            Boolean.class,
            Byte.class,
            Short.class,
            Integer.class,
            Long.class,
            BigInteger.class,
            Float.class,
            Double.class,
            BigDecimal.class,
            Character.class,
            String.class,
            Instant.class,
            LocalTime.class,
            LocalDate.class,
            LocalDateTime.class,
            OffsetDateTime.class,
            ZonedDateTime.class,
            InetAddress.class,
            UUID.class
    };

    private static final Class<?>[] UPDATE_PARAM_TYPES = {
            Status.class,
            Boolean.class,
            Byte.class,
            Short.class,
            Integer.class,
            Long.class,
            BigInteger.class,
            Float.class,
            Double.class,
            BigDecimal.class,
            Character.class,
            String.class,
            Instant.class,
            LocalTime.class,
            LocalDate.class,
            LocalDateTime.class,
            OffsetDateTime.class,
            ZonedDateTime.class,
            InetAddress.class,
            UUID.class
    };

    public Class<?>[] getInsertParamTypes() {
        return INSERT_PARAM_TYPES;
    }

    public Object[] getInsertParams(final Entity entity) {
        return new Object[]{
                entity.getStatus(),
                entity.getaBoolean(),
                entity.getaByte(),
                entity.getaShort(),
                entity.getaInteger(),
                entity.getaLong(),
                entity.getBigInteger(),
                entity.getaFloat(),
                entity.getaDouble(),
                entity.getBigDecimal(),
                entity.getCharacter(),
                entity.getString(),
                entity.getInstant(),
                entity.getLocalTime(),
                entity.getLocalDate(),
                entity.getLocalDateTime(),
                entity.getOffsetDateTime(),
                entity.getZonedDateTime(),
                entity.getInetAddress(),
                entity.getUuid()
        };
    }

    public Class<?>[] getUpdateParamTypes() {
        return UPDATE_PARAM_TYPES;
    }

    public Object[] getUpdateParams(final Entity entity) {
        return new Object[]{
                entity.getStatus(),
                entity.getaBoolean(),
                entity.getaByte(),
                entity.getaShort(),
                entity.getaInteger(),
                entity.getaLong(),
                entity.getBigInteger(),
                entity.getaFloat(),
                entity.getaDouble(),
                entity.getBigDecimal(),
                entity.getCharacter(),
                entity.getString(),
                entity.getInstant(),
                entity.getLocalTime(),
                entity.getLocalDate(),
                entity.getLocalDateTime(),
                entity.getOffsetDateTime(),
                entity.getZonedDateTime(),
                entity.getInetAddress(),
                entity.getUuid(),
                // primary key(s):
                require(entity.getId(), "Primary key must be not null!")
        };
    }

    public Object getPrimaryKey(final Entity entity) {
        return require(entity.getId(), "Primary key must be not null!");
    }
}
