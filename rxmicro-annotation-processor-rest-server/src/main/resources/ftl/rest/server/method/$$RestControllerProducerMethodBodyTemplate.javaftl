<#-- --------------------------------------------- Static headers -------------------------------------------------- -->
<#if STATIC_HEADERS?has_content>
<#if STATIC_HEADERS?size == 1>
final HttpHeaders headers = HttpHeaders.of(<#list STATIC_HEADERS as e>"${e.key}", "${e.value}"</#list>);
<#elseif STATIC_HEADERS?size <= 10>
final HttpHeaders headers = HttpHeaders.of(
    <#list STATIC_HEADERS as e>
        "${e.key}", "${e.value}"<#if e?has_next>,</#if>
    </#list>
);
<#else>
final HttpHeaders headers = HttpHeaders.of(
    <#list STATIC_HEADERS as e>
        java.util.Map.entry("${e.key}", "${e.value}")<#if e?has_next>,</#if>
    </#list>
);
</#if>
<#else>
final HttpHeaders headers = HttpHeaders.of();
</#if>
<#-- --------------------------------------------------------------------------------------------------------------- -->
<#if RETURN.future>
<#-- ------------------------------------ JSE CompletableFuture<TYPE> ---------------------------------------------- -->
<#if RETURN.optional>
return restController.${METHOD_NAME.simpleName}()
        .thenApply(optionalResponse -> optionalResponse
                .map(response -> buildResponse(response, ${STATUS_CODE}, headers))
                .orElse(${METHOD_NAME.uniqueJavaName}NotFoundResponse));
<#else>
return restController.${METHOD_NAME.simpleName}()
        .thenApply(response -> buildResponse(response, ${STATUS_CODE}, headers));
</#if>
<#-- -------------------------------------- Spring Reactor Mono<TYPE> ---------------------------------------------- -->
<#elseif RETURN.mono>
return restController.${METHOD_NAME.simpleName}()
        .map(response -> buildResponse(response, ${STATUS_CODE}, headers))
        .defaultIfEmpty(${METHOD_NAME.uniqueJavaName}NotFoundResponse)
        .toFuture();
<#-- ---------------------------------------- RxJava Single<TYPE> -------------------------------------------------- -->
<#elseif RETURN.single>
return restController.${METHOD_NAME.simpleName}()
        .map(response -> buildResponse(response, ${STATUS_CODE}, headers))
        .toCompletionStage();
<#-- ----------------------------------------- RxJava Maybe<TYPE> -------------------------------------------------- -->
<#elseif RETURN.maybe>
return restController.${METHOD_NAME.simpleName}()
        .map(response -> buildResponse(response, ${STATUS_CODE}, headers))
        .defaultIfEmpty(${METHOD_NAME.uniqueJavaName}NotFoundResponse)
        .toCompletionStage();
<#-- --------------------------------------------------------------------------------------------------------------- -->
<#else>
//"The RxMicro framework does not know how to generate this method";
<#-- --------------------------------------------------------------------------------------------------------------- -->
</#if>
