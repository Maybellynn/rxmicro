package io.rxmicro.examples.rest.controller.headers.model;

import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$AllSupportedTypesConstraintValidator implements ConstraintValidator<AllSupportedTypes> {

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    @Override
    public void validateNonNull(final AllSupportedTypes model,
                                final ModelType httpModelType,
                                final String name) {
        requiredConstraintValidator.validate(model.status, HttpModelType.HEADER, "Status");

        requiredListConstraintValidator.validate(model.statusList, HttpModelType.HEADER, "Status-List");
        requiredConstraintValidator.validateIterable(model.statusList, HttpModelType.HEADER, "Status-List");

        requiredConstraintValidator.validate(model.aBoolean, HttpModelType.HEADER, "A-Boolean");

        requiredListConstraintValidator.validate(model.booleanList, HttpModelType.HEADER, "Boolean-List");
        requiredConstraintValidator.validateIterable(model.booleanList, HttpModelType.HEADER, "Boolean-List");

        requiredConstraintValidator.validate(model.aByte, HttpModelType.HEADER, "A-Byte");

        requiredListConstraintValidator.validate(model.byteList, HttpModelType.HEADER, "Byte-List");
        requiredConstraintValidator.validateIterable(model.byteList, HttpModelType.HEADER, "Byte-List");

        requiredConstraintValidator.validate(model.aShort, HttpModelType.HEADER, "A-Short");

        requiredListConstraintValidator.validate(model.shortList, HttpModelType.HEADER, "Short-List");
        requiredConstraintValidator.validateIterable(model.shortList, HttpModelType.HEADER, "Short-List");

        requiredConstraintValidator.validate(model.aInteger, HttpModelType.HEADER, "A-Integer");

        requiredListConstraintValidator.validate(model.integerList, HttpModelType.HEADER, "Integer-List");
        requiredConstraintValidator.validateIterable(model.integerList, HttpModelType.HEADER, "Integer-List");

        requiredConstraintValidator.validate(model.aLong, HttpModelType.HEADER, "A-Long");

        requiredListConstraintValidator.validate(model.longList, HttpModelType.HEADER, "Long-List");
        requiredConstraintValidator.validateIterable(model.longList, HttpModelType.HEADER, "Long-List");

        requiredConstraintValidator.validate(model.bigInteger, HttpModelType.HEADER, "Big-Integer");

        requiredListConstraintValidator.validate(model.bigIntegerList, HttpModelType.HEADER, "Big-Integer-List");
        requiredConstraintValidator.validateIterable(model.bigIntegerList, HttpModelType.HEADER, "Big-Integer-List");

        requiredConstraintValidator.validate(model.aFloat, HttpModelType.HEADER, "A-Float");

        requiredListConstraintValidator.validate(model.floatList, HttpModelType.HEADER, "Float-List");
        requiredConstraintValidator.validateIterable(model.floatList, HttpModelType.HEADER, "Float-List");

        requiredConstraintValidator.validate(model.aDouble, HttpModelType.HEADER, "A-Double");

        requiredListConstraintValidator.validate(model.doubleList, HttpModelType.HEADER, "Double-List");
        requiredConstraintValidator.validateIterable(model.doubleList, HttpModelType.HEADER, "Double-List");

        requiredConstraintValidator.validate(model.bigDecimal, HttpModelType.HEADER, "Big-Decimal");

        requiredListConstraintValidator.validate(model.bigDecimalList, HttpModelType.HEADER, "Big-Decimal-List");
        requiredConstraintValidator.validateIterable(model.bigDecimalList, HttpModelType.HEADER, "Big-Decimal-List");

        requiredConstraintValidator.validate(model.character, HttpModelType.HEADER, "Character");

        requiredListConstraintValidator.validate(model.characterList, HttpModelType.HEADER, "Character-List");
        requiredConstraintValidator.validateIterable(model.characterList, HttpModelType.HEADER, "Character-List");

        requiredAndNotEmptyStringConstraintValidator.validate(model.string, HttpModelType.HEADER, "String");

        requiredListConstraintValidator.validate(model.stringList, HttpModelType.HEADER, "String-List");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.stringList, HttpModelType.HEADER, "String-List");

        requiredConstraintValidator.validate(model.instant, HttpModelType.HEADER, "Instant");

        requiredListConstraintValidator.validate(model.instantList, HttpModelType.HEADER, "Instant-List");
        requiredConstraintValidator.validateIterable(model.instantList, HttpModelType.HEADER, "Instant-List");
    }
}
