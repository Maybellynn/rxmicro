package io.rxmicro.examples.rest.controller.headers.model;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$AllSupportedTypesModelReader extends ModelReader<AllSupportedTypes> {

    @Override
    public AllSupportedTypes read(final PathVariableMapping pathVariableMapping,
                                  final HttpRequest request,
                                  final boolean readParametersFromBody) {
        final AllSupportedTypes model = new AllSupportedTypes();
        readPrimitivesToModel(pathVariableMapping, request, model);
        return model;
    }

    protected void readPrimitivesToModel(final PathVariableMapping pathVariableMapping,
                                         final HttpRequest request,
                                         final AllSupportedTypes model) {
        final HttpHeaders httpHeaders = request.getHeaders();
        model.status = toEnum(Status.class, httpHeaders.getValue("Status"), HttpModelType.HEADER, "Status");
        model.statusList = toEnumList(Status.class, httpHeaders.getValues("Status-List"), HttpModelType.HEADER, "Status-List");
        model.aBoolean = toBoolean(httpHeaders.getValue("A-Boolean"), HttpModelType.HEADER, "A-Boolean");
        model.booleanList = toBooleanList(httpHeaders.getValues("Boolean-List"), HttpModelType.HEADER, "Boolean-List");
        model.aByte = toByte(httpHeaders.getValue("A-Byte"), HttpModelType.HEADER, "A-Byte");
        model.byteList = toByteList(httpHeaders.getValues("Byte-List"), HttpModelType.HEADER, "Byte-List");
        model.aShort = toShort(httpHeaders.getValue("A-Short"), HttpModelType.HEADER, "A-Short");
        model.shortList = toShortList(httpHeaders.getValues("Short-List"), HttpModelType.HEADER, "Short-List");
        model.aInteger = toInteger(httpHeaders.getValue("A-Integer"), HttpModelType.HEADER, "A-Integer");
        model.integerList = toIntegerList(httpHeaders.getValues("Integer-List"), HttpModelType.HEADER, "Integer-List");
        model.aLong = toLong(httpHeaders.getValue("A-Long"), HttpModelType.HEADER, "A-Long");
        model.longList = toLongList(httpHeaders.getValues("Long-List"), HttpModelType.HEADER, "Long-List");
        model.bigInteger = toBigInteger(httpHeaders.getValue("Big-Integer"), HttpModelType.HEADER, "Big-Integer");
        model.bigIntegerList = toBigIntegerList(httpHeaders.getValues("Big-Integer-List"), HttpModelType.HEADER, "Big-Integer-List");
        model.aFloat = toFloat(httpHeaders.getValue("A-Float"), HttpModelType.HEADER, "A-Float");
        model.floatList = toFloatList(httpHeaders.getValues("Float-List"), HttpModelType.HEADER, "Float-List");
        model.aDouble = toDouble(httpHeaders.getValue("A-Double"), HttpModelType.HEADER, "A-Double");
        model.doubleList = toDoubleList(httpHeaders.getValues("Double-List"), HttpModelType.HEADER, "Double-List");
        model.bigDecimal = toBigDecimal(httpHeaders.getValue("Big-Decimal"), HttpModelType.HEADER, "Big-Decimal");
        model.bigDecimalList = toBigDecimalList(httpHeaders.getValues("Big-Decimal-List"), HttpModelType.HEADER, "Big-Decimal-List");
        model.character = toCharacter(httpHeaders.getValue("Character"), HttpModelType.HEADER, "Character");
        model.characterList = toCharacterList(httpHeaders.getValues("Character-List"), HttpModelType.HEADER, "Character-List");
        model.string = toString(httpHeaders.getValue("String"), HttpModelType.HEADER, "String");
        model.stringList = toStringList(httpHeaders.getValues("String-List"), HttpModelType.HEADER, "String-List");
        model.instant = toInstant(httpHeaders.getValue("Instant"), HttpModelType.HEADER, "Instant");
        model.instantList = toInstantList(httpHeaders.getValues("Instant-List"), HttpModelType.HEADER, "Instant-List");
    }
}
