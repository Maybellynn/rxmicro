package io.rxmicro.examples.rest.controller.headers.model;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$AllSupportedTypesModelReader extends ModelReader<AllSupportedTypes> {

    @Override
    public AllSupportedTypes read(final PathVariableMapping pathVariableMapping,
                                  final HttpRequest request,
                                  final boolean readParametersFromBody) {
        final AllSupportedTypes model = new AllSupportedTypes();
        final HttpHeaders httpHeaders = request.getHeaders();
        model.status = toEnum(Status.class, httpHeaders.getValue("Status"), HttpModelType.header, "Status");
        model.statusList = toEnumArray(Status.class, httpHeaders.getValues("Status-List"), HttpModelType.header, "Status-List");
        model.aBoolean = toBoolean(httpHeaders.getValue("A-Boolean"), HttpModelType.header, "A-Boolean");
        model.booleanList = toBooleanArray(httpHeaders.getValues("Boolean-List"), HttpModelType.header, "Boolean-List");
        model.aByte = toByte(httpHeaders.getValue("A-Byte"), HttpModelType.header, "A-Byte");
        model.byteList = toByteArray(httpHeaders.getValues("Byte-List"), HttpModelType.header, "Byte-List");
        model.aShort = toShort(httpHeaders.getValue("A-Short"), HttpModelType.header, "A-Short");
        model.shortList = toShortArray(httpHeaders.getValues("Short-List"), HttpModelType.header, "Short-List");
        model.aInteger = toInteger(httpHeaders.getValue("A-Integer"), HttpModelType.header, "A-Integer");
        model.integerList = toIntegerArray(httpHeaders.getValues("Integer-List"), HttpModelType.header, "Integer-List");
        model.aLong = toLong(httpHeaders.getValue("A-Long"), HttpModelType.header, "A-Long");
        model.longList = toLongArray(httpHeaders.getValues("Long-List"), HttpModelType.header, "Long-List");
        model.bigInteger = toBigInteger(httpHeaders.getValue("Big-Integer"), HttpModelType.header, "Big-Integer");
        model.bigIntegerList = toBigIntegerArray(httpHeaders.getValues("Big-Integer-List"), HttpModelType.header, "Big-Integer-List");
        model.aFloat = toFloat(httpHeaders.getValue("A-Float"), HttpModelType.header, "A-Float");
        model.floatList = toFloatArray(httpHeaders.getValues("Float-List"), HttpModelType.header, "Float-List");
        model.aDouble = toDouble(httpHeaders.getValue("A-Double"), HttpModelType.header, "A-Double");
        model.doubleList = toDoubleArray(httpHeaders.getValues("Double-List"), HttpModelType.header, "Double-List");
        model.bigDecimal = toBigDecimal(httpHeaders.getValue("Big-Decimal"), HttpModelType.header, "Big-Decimal");
        model.bigDecimalList = toBigDecimalArray(httpHeaders.getValues("Big-Decimal-List"), HttpModelType.header, "Big-Decimal-List");
        model.character = toCharacter(httpHeaders.getValue("Character"), HttpModelType.header, "Character");
        model.characterList = toCharacterArray(httpHeaders.getValues("Character-List"), HttpModelType.header, "Character-List");
        model.string = toString(httpHeaders.getValue("String"), HttpModelType.header, "String");
        model.stringList = toStringArray(httpHeaders.getValues("String-List"), HttpModelType.header, "String-List");
        model.instant = toInstant(httpHeaders.getValue("Instant"), HttpModelType.header, "Instant");
        model.instantList = toInstantArray(httpHeaders.getValues("Instant-List"), HttpModelType.header, "Instant-List");
        return model;
    }
}
