package io.rxmicro.examples.validation.server.required;

import io.rxmicro.examples.validation.server.required.model.$$NotStringModelConstraintValidator;
import io.rxmicro.examples.validation.server.required.model.$$NotStringModelServerModelReader;
import io.rxmicro.examples.validation.server.required.model.$$PrimitiveStringListModelConstraintValidator;
import io.rxmicro.examples.validation.server.required.model.$$PrimitiveStringListModelServerModelReader;
import io.rxmicro.examples.validation.server.required.model.$$PrimitiveStringModelConstraintValidator;
import io.rxmicro.examples.validation.server.required.model.$$PrimitiveStringModelServerModelReader;
import io.rxmicro.examples.validation.server.required.model.$$StringModelWithRequiredAndNotEmptyValidatorsOnlyConstraintValidator;
import io.rxmicro.examples.validation.server.required.model.$$StringModelWithRequiredAndNotEmptyValidatorsOnlyServerModelReader;
import io.rxmicro.examples.validation.server.required.model.$$StringModelWithRequiredNonNullValidatorsOnlyConstraintValidator;
import io.rxmicro.examples.validation.server.required.model.$$StringModelWithRequiredNonNullValidatorsOnlyServerModelReader;
import io.rxmicro.examples.validation.server.required.model.NotStringModel;
import io.rxmicro.examples.validation.server.required.model.PrimitiveStringListModel;
import io.rxmicro.examples.validation.server.required.model.PrimitiveStringModel;
import io.rxmicro.examples.validation.server.required.model.StringModelWithRequiredAndNotEmptyValidatorsOnly;
import io.rxmicro.examples.validation.server.required.model.StringModelWithRequiredNonNullValidatorsOnly;
import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$MicroService extends AbstractRestController {

    private MicroService restController;

    private $$NotStringModelServerModelReader notStringModelServerModelReader;

    private $$PrimitiveStringModelServerModelReader primitiveStringModelServerModelReader;

    private $$PrimitiveStringListModelServerModelReader primitiveStringListModelServerModelReader;

    private $$StringModelWithRequiredNonNullValidatorsOnlyServerModelReader stringModelWithRequiredNonNullValidatorsOnlyServerModelReader;

    private $$StringModelWithRequiredAndNotEmptyValidatorsOnlyServerModelReader stringModelWithRequiredAndNotEmptyValidatorsOnlyServerModelReader;

    private $$NotStringModelConstraintValidator notStringModelConstraintValidator;

    private $$PrimitiveStringModelConstraintValidator primitiveStringModelConstraintValidator;

    private $$PrimitiveStringListModelConstraintValidator primitiveStringListModelConstraintValidator;

    private $$StringModelWithRequiredNonNullValidatorsOnlyConstraintValidator stringModelWithRequiredNonNullValidatorsOnlyConstraintValidator;

    private $$StringModelWithRequiredAndNotEmptyValidatorsOnlyConstraintValidator stringModelWithRequiredAndNotEmptyValidatorsOnlyConstraintValidator;

    @Override
    protected void postConstruct() {
        restController = new MicroService();
        notStringModelServerModelReader = new $$NotStringModelServerModelReader();
        primitiveStringModelServerModelReader = new $$PrimitiveStringModelServerModelReader();
        primitiveStringListModelServerModelReader = new $$PrimitiveStringListModelServerModelReader();
        stringModelWithRequiredNonNullValidatorsOnlyServerModelReader = new $$StringModelWithRequiredNonNullValidatorsOnlyServerModelReader();
        stringModelWithRequiredAndNotEmptyValidatorsOnlyServerModelReader = new $$StringModelWithRequiredAndNotEmptyValidatorsOnlyServerModelReader();
        notStringModelConstraintValidator = new $$NotStringModelConstraintValidator();
        primitiveStringModelConstraintValidator = new $$PrimitiveStringModelConstraintValidator();
        primitiveStringListModelConstraintValidator = new $$PrimitiveStringListModelConstraintValidator();
        stringModelWithRequiredNonNullValidatorsOnlyConstraintValidator = new $$StringModelWithRequiredNonNullValidatorsOnlyConstraintValidator();
        stringModelWithRequiredAndNotEmptyValidatorsOnlyConstraintValidator = new $$StringModelWithRequiredAndNotEmptyValidatorsOnlyConstraintValidator();
    }

    @Override
    public Class<?> getRestControllerClass() {
        return MicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "test1",
                        List.of(
                                io.rxmicro.examples.validation.server.required.model.NotStringModel.class
                        ),
                        this::test1,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/test1",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "test2",
                        List.of(
                                io.rxmicro.examples.validation.server.required.model.PrimitiveStringModel.class
                        ),
                        this::test2,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/test2",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "test3",
                        List.of(
                                io.rxmicro.examples.validation.server.required.model.PrimitiveStringListModel.class
                        ),
                        this::test3,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/test3",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "test4",
                        List.of(
                                io.rxmicro.examples.validation.server.required.model.StringModelWithRequiredNonNullValidatorsOnly.class
                        ),
                        this::test4,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/test4",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "test5",
                        List.of(
                                io.rxmicro.examples.validation.server.required.model.StringModelWithRequiredAndNotEmptyValidatorsOnly.class
                        ),
                        this::test5,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/test5",
                                false
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> test1(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final NotStringModel req = notStringModelServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        notStringModelConstraintValidator.validate(req);
        final HttpHeaders headers = HttpHeaders.of();
        restController.test1(req);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> test2(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final PrimitiveStringModel req = primitiveStringModelServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        primitiveStringModelConstraintValidator.validate(req);
        final HttpHeaders headers = HttpHeaders.of();
        restController.test2(req);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> test3(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final PrimitiveStringListModel req = primitiveStringListModelServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        primitiveStringListModelConstraintValidator.validate(req);
        final HttpHeaders headers = HttpHeaders.of();
        restController.test3(req);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> test4(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final StringModelWithRequiredNonNullValidatorsOnly req = stringModelWithRequiredNonNullValidatorsOnlyServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        stringModelWithRequiredNonNullValidatorsOnlyConstraintValidator.validate(req);
        final HttpHeaders headers = HttpHeaders.of();
        restController.test4(req);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> test5(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final StringModelWithRequiredAndNotEmptyValidatorsOnly req = stringModelWithRequiredAndNotEmptyValidatorsOnlyServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        stringModelWithRequiredAndNotEmptyValidatorsOnlyConstraintValidator.validate(req);
        final HttpHeaders headers = HttpHeaders.of();
        restController.test5(req);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
