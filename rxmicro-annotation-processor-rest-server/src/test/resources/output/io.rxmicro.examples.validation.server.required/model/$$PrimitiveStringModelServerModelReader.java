package io.rxmicro.examples.validation.server.required.model;

import io.rxmicro.http.QueryParams;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ServerModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$PrimitiveStringModelServerModelReader extends ServerModelReader<PrimitiveStringModel> {

    @Override
    public PrimitiveStringModel read(final PathVariableMapping pathVariableMapping,
                                     final HttpRequest request,
                                     final boolean readParametersFromBody) {
        final PrimitiveStringModel model = new PrimitiveStringModel();
        final QueryParams params = extractParams(request.getQueryString());
        readPrimitivesToModel(pathVariableMapping, request, params, model, readParametersFromBody);
        return model;
    }

    public void readPrimitivesToModel(final PathVariableMapping pathVariableMapping,
                                      final HttpRequest request,
                                      final QueryParams params,
                                      final PrimitiveStringModel model,
                                      final boolean readParametersFromBody) {
        model.requiredNotEmptyString = toString(params.getValue("requiredNotEmptyString"), HttpModelType.PARAMETER, "requiredNotEmptyString");
        model.nullableString = toString(params.getValue("nullableString"), HttpModelType.PARAMETER, "nullableString");
        model.allowEmptyString = toString(params.getValue("allowEmptyString"), HttpModelType.PARAMETER, "allowEmptyString");
        model.nullableAndAllowEmptyString = toString(params.getValue("nullableAndAllowEmptyString"), HttpModelType.PARAMETER, "nullableAndAllowEmptyString");
    }
}
