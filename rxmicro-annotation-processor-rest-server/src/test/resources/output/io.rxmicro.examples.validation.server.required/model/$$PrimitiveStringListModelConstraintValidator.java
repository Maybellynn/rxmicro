package io.rxmicro.examples.validation.server.required.model;

import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.NotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$PrimitiveStringListModelConstraintValidator implements ConstraintValidator<PrimitiveStringListModel> {

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    private final NotEmptyStringConstraintValidator notEmptyStringConstraintValidator =
            getStatelessValidator(NotEmptyStringConstraintValidator.class);

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    @Override
    public void validateNonNull(final PrimitiveStringListModel model,
                                final ModelType httpModelType,
                                final String name) {
        requiredListConstraintValidator.validate(model.requiredListWithNotEmptyItems, HttpModelType.PARAMETER, "requiredListWithNotEmptyItems");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.requiredListWithNotEmptyItems, HttpModelType.PARAMETER, "requiredListWithNotEmptyItems");

        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.nullableListWithNotEmptyItems, HttpModelType.PARAMETER, "nullableListWithNotEmptyItems");

        requiredListConstraintValidator.validate(model.requiredListWithNullableItems, HttpModelType.PARAMETER, "requiredListWithNullableItems");
        notEmptyStringConstraintValidator.validateIterable(model.requiredListWithNullableItems, HttpModelType.PARAMETER, "requiredListWithNullableItems");

        requiredListConstraintValidator.validate(model.requiredListWithEmptyItems, HttpModelType.PARAMETER, "requiredListWithEmptyItems");
        requiredConstraintValidator.validateIterable(model.requiredListWithEmptyItems, HttpModelType.PARAMETER, "requiredListWithEmptyItems");

        requiredListConstraintValidator.validate(model.requiredListWithNullableOrEmptyItems, HttpModelType.PARAMETER, "requiredListWithNullableOrEmptyItems");

        notEmptyStringConstraintValidator.validateIterable(model.nullableListWithNullableItems, HttpModelType.PARAMETER, "nullableListWithNullableItems");

        requiredConstraintValidator.validateIterable(model.nullableListWithEmptyItems, HttpModelType.PARAMETER, "nullableListWithEmptyItems");
    }
}
