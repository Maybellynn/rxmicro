package io.rxmicro.examples.validation.server.required.model;

import io.rxmicro.http.error.ValidationException;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$StringModelWithRequiredAndNotEmptyValidatorsOnlyConstraintValidator implements ConstraintValidator<StringModelWithRequiredAndNotEmptyValidatorsOnly> {

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    @Override
    public void validate(final StringModelWithRequiredAndNotEmptyValidatorsOnly model,
                         final HttpModelType httpModelType,
                         final String name) throws ValidationException {
        requiredAndNotEmptyStringConstraintValidator.validate(model.string, HttpModelType.PARAMETER, "string");

        requiredAndNotEmptyStringConstraintValidator.validate(model.minLength, HttpModelType.PARAMETER, "minLength");

        requiredAndNotEmptyStringConstraintValidator.validate(model.length, HttpModelType.PARAMETER, "length");

        requiredAndNotEmptyStringConstraintValidator.validate(model.whatsApp, HttpModelType.PARAMETER, "whatsApp");

        requiredAndNotEmptyStringConstraintValidator.validate(model.viber, HttpModelType.PARAMETER, "viber");

        requiredAndNotEmptyStringConstraintValidator.validate(model.telegram, HttpModelType.PARAMETER, "telegram");

        requiredAndNotEmptyStringConstraintValidator.validate(model.phone, HttpModelType.PARAMETER, "phone");

        requiredAndNotEmptyStringConstraintValidator.validate(model.latinAlphabetOnly, HttpModelType.PARAMETER, "latinAlphabetOnly");

        requiredAndNotEmptyStringConstraintValidator.validate(model.uri, HttpModelType.PARAMETER, "uri");

        requiredAndNotEmptyStringConstraintValidator.validate(model.ip, HttpModelType.PARAMETER, "ip");

        requiredAndNotEmptyStringConstraintValidator.validate(model.hostName, HttpModelType.PARAMETER, "hostName");

        requiredAndNotEmptyStringConstraintValidator.validate(model.domainName, HttpModelType.PARAMETER, "domainName");

        requiredAndNotEmptyStringConstraintValidator.validate(model.enumeration, HttpModelType.PARAMETER, "enumeration");

        requiredAndNotEmptyStringConstraintValidator.validate(model.email, HttpModelType.PARAMETER, "email");

        requiredAndNotEmptyStringConstraintValidator.validate(model.digitsOnly, HttpModelType.PARAMETER, "digitsOnly");

        requiredAndNotEmptyStringConstraintValidator.validate(model.countryCode, HttpModelType.PARAMETER, "countryCode");

        requiredAndNotEmptyStringConstraintValidator.validate(model.base64URLEncoded, HttpModelType.PARAMETER, "base64URLEncoded");
    }
}
