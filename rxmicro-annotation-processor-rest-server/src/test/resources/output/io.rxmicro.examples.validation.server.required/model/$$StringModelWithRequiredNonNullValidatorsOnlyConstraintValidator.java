package io.rxmicro.examples.validation.server.required.model;

import io.rxmicro.http.error.ValidationException;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.constraint.Base64URLEncoded.Alphabet;
import io.rxmicro.validation.constraint.CountryCode.Format;
import io.rxmicro.validation.constraint.IP.Version;
import io.rxmicro.validation.validator.Base64URLEncodedConstraintValidator;
import io.rxmicro.validation.validator.CountryCodeConstraintValidator;
import io.rxmicro.validation.validator.DigitsOnlyConstraintValidator;
import io.rxmicro.validation.validator.DomainNameConstraintValidator;
import io.rxmicro.validation.validator.EmailConstraintValidator;
import io.rxmicro.validation.validator.EnumerationStringConstraintValidator;
import io.rxmicro.validation.validator.HostNameConstraintValidator;
import io.rxmicro.validation.validator.IPConstraintValidator;
import io.rxmicro.validation.validator.LatinAlphabetOnlyConstraintValidator;
import io.rxmicro.validation.validator.LengthConstraintValidator;
import io.rxmicro.validation.validator.MinLengthConstraintValidator;
import io.rxmicro.validation.validator.PhoneConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.TelegramConstraintValidator;
import io.rxmicro.validation.validator.URIConstraintValidator;
import io.rxmicro.validation.validator.ViberConstraintValidator;
import io.rxmicro.validation.validator.WhatsAppConstraintValidator;

import java.util.List;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$StringModelWithRequiredNonNullValidatorsOnlyConstraintValidator implements ConstraintValidator<StringModelWithRequiredNonNullValidatorsOnly> {

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final URIConstraintValidator uRIConstraintValidator =
            getStatelessValidator(URIConstraintValidator.class);

    private final DigitsOnlyConstraintValidator digitsOnlyConstraintValidator =
            getStatelessValidator(DigitsOnlyConstraintValidator.class);

    private final MinLengthConstraintValidator minLengthMinLengthMinLengthConstraintValidator =
            new MinLengthConstraintValidator(1, true);

    private final LengthConstraintValidator lengthLengthLengthConstraintValidator =
            new LengthConstraintValidator(1);

    private final WhatsAppConstraintValidator whatsAppWhatsAppWhatsAppConstraintValidator =
            new WhatsAppConstraintValidator(true, false);

    private final ViberConstraintValidator viberViberViberConstraintValidator =
            new ViberConstraintValidator(true, false);

    private final TelegramConstraintValidator telegramTelegramTelegramConstraintValidator =
            new TelegramConstraintValidator(true, false);

    private final PhoneConstraintValidator phonePhonePhoneConstraintValidator =
            new PhoneConstraintValidator(true, false);

    private final LatinAlphabetOnlyConstraintValidator latinAlphabetOnlyLatinAlphabetOnlyLatinAlphabetOnlyConstraintValidator =
            new LatinAlphabetOnlyConstraintValidator(true, true, true, "~!@#$%^&*()_+=-[]{},.;:<>?/\\\"' \t|\r\n");

    private final IPConstraintValidator ipIPIPConstraintValidator =
            new IPConstraintValidator(List.of(Version.IP_V4, Version.IP_V6));

    private final HostNameConstraintValidator hostNameHostNameHostNameConstraintValidator =
            new HostNameConstraintValidator(false);

    private final DomainNameConstraintValidator domainNameDomainNameDomainNameConstraintValidator =
            new DomainNameConstraintValidator(false);

    private final EnumerationStringConstraintValidator enumerationEnumerationEnumerationStringConstraintValidator =
            new EnumerationStringConstraintValidator(List.of("yes", "no"));

    private final EmailConstraintValidator emailEmailEmailConstraintValidator =
            new EmailConstraintValidator(false);

    private final CountryCodeConstraintValidator countryCodeCountryCodeCountryCodeConstraintValidator =
            new CountryCodeConstraintValidator(Format.ISO_3166_1_ALPHA_2);

    private final Base64URLEncodedConstraintValidator base64URLEncodedBase64URLEncodedBase64URLEncodedConstraintValidator =
            new Base64URLEncodedConstraintValidator(Alphabet.URL);

    @Override
    public void validate(final StringModelWithRequiredNonNullValidatorsOnly model,
                         final HttpModelType httpModelType,
                         final String name) throws ValidationException {
        requiredConstraintValidator.validate(model.allowEmptyString, HttpModelType.PARAMETER, "allowEmptyString");

        requiredConstraintValidator.validate(model.minLength, HttpModelType.PARAMETER, "minLength");
        minLengthMinLengthMinLengthConstraintValidator.validate(model.minLength, HttpModelType.PARAMETER, "minLength");

        requiredConstraintValidator.validate(model.length, HttpModelType.PARAMETER, "length");
        lengthLengthLengthConstraintValidator.validate(model.length, HttpModelType.PARAMETER, "length");

        requiredConstraintValidator.validate(model.whatsApp, HttpModelType.PARAMETER, "whatsApp");
        whatsAppWhatsAppWhatsAppConstraintValidator.validate(model.whatsApp, HttpModelType.PARAMETER, "whatsApp");

        requiredConstraintValidator.validate(model.viber, HttpModelType.PARAMETER, "viber");
        viberViberViberConstraintValidator.validate(model.viber, HttpModelType.PARAMETER, "viber");

        requiredConstraintValidator.validate(model.telegram, HttpModelType.PARAMETER, "telegram");
        telegramTelegramTelegramConstraintValidator.validate(model.telegram, HttpModelType.PARAMETER, "telegram");

        requiredConstraintValidator.validate(model.phone, HttpModelType.PARAMETER, "phone");
        phonePhonePhoneConstraintValidator.validate(model.phone, HttpModelType.PARAMETER, "phone");

        requiredConstraintValidator.validate(model.latinAlphabetOnly, HttpModelType.PARAMETER, "latinAlphabetOnly");
        latinAlphabetOnlyLatinAlphabetOnlyLatinAlphabetOnlyConstraintValidator.validate(model.latinAlphabetOnly, HttpModelType.PARAMETER, "latinAlphabetOnly");

        requiredConstraintValidator.validate(model.uri, HttpModelType.PARAMETER, "uri");
        uRIConstraintValidator.validate(model.uri, HttpModelType.PARAMETER, "uri");

        requiredConstraintValidator.validate(model.ip, HttpModelType.PARAMETER, "ip");
        ipIPIPConstraintValidator.validate(model.ip, HttpModelType.PARAMETER, "ip");

        requiredConstraintValidator.validate(model.hostName, HttpModelType.PARAMETER, "hostName");
        hostNameHostNameHostNameConstraintValidator.validate(model.hostName, HttpModelType.PARAMETER, "hostName");

        requiredConstraintValidator.validate(model.domainName, HttpModelType.PARAMETER, "domainName");
        domainNameDomainNameDomainNameConstraintValidator.validate(model.domainName, HttpModelType.PARAMETER, "domainName");

        requiredConstraintValidator.validate(model.enumeration, HttpModelType.PARAMETER, "enumeration");
        enumerationEnumerationEnumerationStringConstraintValidator.validate(model.enumeration, HttpModelType.PARAMETER, "enumeration");

        requiredConstraintValidator.validate(model.email, HttpModelType.PARAMETER, "email");
        emailEmailEmailConstraintValidator.validate(model.email, HttpModelType.PARAMETER, "email");

        requiredConstraintValidator.validate(model.digitsOnly, HttpModelType.PARAMETER, "digitsOnly");
        digitsOnlyConstraintValidator.validate(model.digitsOnly, HttpModelType.PARAMETER, "digitsOnly");

        requiredConstraintValidator.validate(model.countryCode, HttpModelType.PARAMETER, "countryCode");
        countryCodeCountryCodeCountryCodeConstraintValidator.validate(model.countryCode, HttpModelType.PARAMETER, "countryCode");

        requiredConstraintValidator.validate(model.base64URLEncoded, HttpModelType.PARAMETER, "base64URLEncoded");
        base64URLEncodedBase64URLEncodedBase64URLEncodedConstraintValidator.validate(model.base64URLEncoded, HttpModelType.PARAMETER, "base64URLEncoded");
    }
}
