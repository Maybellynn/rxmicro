package io.rxmicro.examples.validation.server.required.model;

import io.rxmicro.http.error.ValidationException;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.EnumerationStringConstraintValidator;
import io.rxmicro.validation.validator.LengthConstraintValidator;
import io.rxmicro.validation.validator.MinLengthConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;

import java.util.List;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$StringModelWithRequiredNonNullValidatorsOnlyConstraintValidator implements ConstraintValidator<StringModelWithRequiredNonNullValidatorsOnly> {

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final MinLengthConstraintValidator minLengthMinLengthMinLengthConstraintValidator =
            new MinLengthConstraintValidator(1, true);

    private final LengthConstraintValidator lengthLengthLengthConstraintValidator =
            new LengthConstraintValidator(1);

    private final EnumerationStringConstraintValidator enumerationEnumerationEnumerationStringConstraintValidator =
            new EnumerationStringConstraintValidator(List.of("yes", "no"));

    @Override
    public void validate(final StringModelWithRequiredNonNullValidatorsOnly model,
                         final HttpModelType httpModelType,
                         final String name) throws ValidationException {
        requiredConstraintValidator.validate(model.allowEmptyString, HttpModelType.PARAMETER, "allowEmptyString");

        requiredConstraintValidator.validate(model.minLength, HttpModelType.PARAMETER, "minLength");
        minLengthMinLengthMinLengthConstraintValidator.validate(model.minLength, HttpModelType.PARAMETER, "minLength");

        requiredConstraintValidator.validate(model.length, HttpModelType.PARAMETER, "length");
        lengthLengthLengthConstraintValidator.validate(model.length, HttpModelType.PARAMETER, "length");

        requiredConstraintValidator.validate(model.enumeration, HttpModelType.PARAMETER, "enumeration");
        enumerationEnumerationEnumerationStringConstraintValidator.validate(model.enumeration, HttpModelType.PARAMETER, "enumeration");
    }
}
