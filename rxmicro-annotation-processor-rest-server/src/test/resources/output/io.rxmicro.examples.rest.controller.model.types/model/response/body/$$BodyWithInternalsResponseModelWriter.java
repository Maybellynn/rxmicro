package io.rxmicro.examples.rest.controller.model.types.model.response.body;

import io.rxmicro.exchange.json.detail.JsonExchangeDataFormatConverter;
import io.rxmicro.http.HttpStandardHeaderNames;
import io.rxmicro.rest.detail.ExchangeDataFormatConverter;
import io.rxmicro.rest.server.detail.component.ModelWriter;
import io.rxmicro.rest.server.detail.model.HttpResponse;

import java.util.Map;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$BodyWithInternalsResponseModelWriter extends ModelWriter<BodyWithInternalsResponse> {
    private final $$BodyWithInternalsResponseModelToJsonConverter bodyWithInternalsResponseModelToJsonConverter;

    private final ExchangeDataFormatConverter<Object> exchangeDataFormatConverter;

    private final String outputMimeType;

    public $$BodyWithInternalsResponseModelWriter(final boolean humanReadableOutput) {
        exchangeDataFormatConverter = new JsonExchangeDataFormatConverter(humanReadableOutput);
        bodyWithInternalsResponseModelToJsonConverter = new $$BodyWithInternalsResponseModelToJsonConverter();
        outputMimeType = exchangeDataFormatConverter.getMimeType();
    }

    @Override
    public void write(final BodyWithInternalsResponse model,
                      final HttpResponse response) {
        writePrimitivesToResponse(model, response);
        response.setHeader(HttpStandardHeaderNames.CONTENT_TYPE, outputMimeType);
        final Map<String, Object> json = bodyWithInternalsResponseModelToJsonConverter.toJsonObject(model);
        response.setContent(exchangeDataFormatConverter.toBytes(json));
    }

    protected void writePrimitivesToResponse(final BodyWithInternalsResponse model,
                                             final HttpResponse response) {
        response.setStatus(model.internalResponseStatusCode);
        response.setVersion(model.internalHttpVersion);
    }
}
