package io.rxmicro.examples.rest.controller.model.types;

import io.rxmicro.examples.rest.controller.model.types.model.response.body.$$BodyOnlyResponseServerModelWriter;
import io.rxmicro.examples.rest.controller.model.types.model.response.body.$$BodyWithHeadersResponseServerModelWriter;
import io.rxmicro.examples.rest.controller.model.types.model.response.body.$$BodyWithInternalsAndHeadersResponseServerModelWriter;
import io.rxmicro.examples.rest.controller.model.types.model.response.body.$$BodyWithInternalsResponseServerModelWriter;
import io.rxmicro.examples.rest.controller.model.types.model.response.body.BodyOnlyResponse;
import io.rxmicro.examples.rest.controller.model.types.model.response.body.BodyWithHeadersResponse;
import io.rxmicro.examples.rest.controller.model.types.model.response.body.BodyWithInternalsAndHeadersResponse;
import io.rxmicro.examples.rest.controller.model.types.model.response.body.BodyWithInternalsResponse;
import io.rxmicro.examples.rest.controller.model.types.model.response.without_body.$$HeadersOnlyResponseServerModelWriter;
import io.rxmicro.examples.rest.controller.model.types.model.response.without_body.$$InternalsAndHeadersResponseServerModelWriter;
import io.rxmicro.examples.rest.controller.model.types.model.response.without_body.$$InternalsOnlyResponseServerModelWriter;
import io.rxmicro.examples.rest.controller.model.types.model.response.without_body.HeadersOnlyResponse;
import io.rxmicro.examples.rest.controller.model.types.model.response.without_body.InternalsAndHeadersResponse;
import io.rxmicro.examples.rest.controller.model.types.model.response.without_body.InternalsOnlyResponse;
import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.List;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ProducerMicroService extends AbstractRestController {

    private ProducerMicroService restController;

    private $$BodyWithInternalsAndHeadersResponseServerModelWriter bodyWithInternalsAndHeadersResponseServerModelWriter;

    private $$BodyOnlyResponseServerModelWriter bodyOnlyResponseServerModelWriter;

    private $$BodyWithHeadersResponseServerModelWriter bodyWithHeadersResponseServerModelWriter;

    private $$HeadersOnlyResponseServerModelWriter headersOnlyResponseServerModelWriter;

    private $$BodyWithInternalsResponseServerModelWriter bodyWithInternalsResponseServerModelWriter;

    private $$InternalsOnlyResponseServerModelWriter internalsOnlyResponseServerModelWriter;

    private $$InternalsAndHeadersResponseServerModelWriter internalsAndHeadersResponseServerModelWriter;

    @Override
    protected void postConstruct() {
        restController = new ProducerMicroService();
        bodyWithInternalsAndHeadersResponseServerModelWriter = new $$BodyWithInternalsAndHeadersResponseServerModelWriter(restServerConfig.isHumanReadableOutput());
        bodyOnlyResponseServerModelWriter = new $$BodyOnlyResponseServerModelWriter(restServerConfig.isHumanReadableOutput());
        bodyWithHeadersResponseServerModelWriter = new $$BodyWithHeadersResponseServerModelWriter(restServerConfig.isHumanReadableOutput());
        headersOnlyResponseServerModelWriter = new $$HeadersOnlyResponseServerModelWriter(restServerConfig.isHumanReadableOutput());
        bodyWithInternalsResponseServerModelWriter = new $$BodyWithInternalsResponseServerModelWriter(restServerConfig.isHumanReadableOutput());
        internalsOnlyResponseServerModelWriter = new $$InternalsOnlyResponseServerModelWriter(restServerConfig.isHumanReadableOutput());
        internalsAndHeadersResponseServerModelWriter = new $$InternalsAndHeadersResponseServerModelWriter(restServerConfig.isHumanReadableOutput());
    }

    @Override
    public Class<?> getRestControllerClass() {
        return ProducerMicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "produce01",
                        List.of(),
                        this::produce01,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/produce01",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "produce02",
                        List.of(),
                        this::produce02,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/produce02",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "produce03",
                        List.of(),
                        this::produce03,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/produce03",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "produce04",
                        List.of(),
                        this::produce04,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/produce04",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "produce11",
                        List.of(),
                        this::produce11,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/produce11",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "produce12",
                        List.of(),
                        this::produce12,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/produce12",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "produce13",
                        List.of(),
                        this::produce13,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/produce13",
                                false
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> produce01(final PathVariableMapping pathVariableMapping,
                                                    final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.produce01()
                .thenApply(response -> buildResponse(response, 200, headers));
    }

    private CompletionStage<HttpResponse> produce02(final PathVariableMapping pathVariableMapping,
                                                    final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.produce02()
                .thenApply(response -> buildResponse(response, 200, headers));
    }

    private CompletionStage<HttpResponse> produce03(final PathVariableMapping pathVariableMapping,
                                                    final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.produce03()
                .thenApply(response -> buildResponse(response, 200, headers));
    }

    private CompletionStage<HttpResponse> produce04(final PathVariableMapping pathVariableMapping,
                                                    final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.produce04()
                .thenApply(response -> buildResponse(response, 200, headers));
    }

    private CompletionStage<HttpResponse> produce11(final PathVariableMapping pathVariableMapping,
                                                    final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.produce11()
                .thenApply(response -> buildResponse(response, 200, headers));
    }

    private CompletionStage<HttpResponse> produce12(final PathVariableMapping pathVariableMapping,
                                                    final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.produce12()
                .thenApply(response -> buildResponse(response, 200, headers));
    }

    private CompletionStage<HttpResponse> produce13(final PathVariableMapping pathVariableMapping,
                                                    final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.produce13()
                .thenApply(response -> buildResponse(response, 200, headers));
    }

    private HttpResponse buildResponse(final BodyWithInternalsAndHeadersResponse model,
                                       final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        bodyWithInternalsAndHeadersResponseServerModelWriter.write(model, response);
        return response;
    }

    private HttpResponse buildResponse(final BodyOnlyResponse model,
                                       final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        bodyOnlyResponseServerModelWriter.write(model, response);
        return response;
    }

    private HttpResponse buildResponse(final BodyWithHeadersResponse model,
                                       final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        bodyWithHeadersResponseServerModelWriter.write(model, response);
        return response;
    }

    private HttpResponse buildResponse(final HeadersOnlyResponse model,
                                       final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        headersOnlyResponseServerModelWriter.write(model, response);
        return response;
    }

    private HttpResponse buildResponse(final BodyWithInternalsResponse model,
                                       final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        bodyWithInternalsResponseServerModelWriter.write(model, response);
        return response;
    }

    private HttpResponse buildResponse(final InternalsOnlyResponse model,
                                       final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        internalsOnlyResponseServerModelWriter.write(model, response);
        return response;
    }

    private HttpResponse buildResponse(final InternalsAndHeadersResponse model,
                                       final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        internalsAndHeadersResponseServerModelWriter.write(model, response);
        return response;
    }
}
