package io.rxmicro.examples.validation.server.all.standard;

import io.rxmicro.examples.validation.server.all.standard.model.Color;
import io.rxmicro.exchange.json.detail.ModelFromJsonConverter;

import java.util.Map;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualRequestModelFromJsonConverter extends ModelFromJsonConverter<$$VirtualRequest> {

    @Override
    public $$VirtualRequest fromJsonObject(final Map<String, Object> params) {
        final $$VirtualRequest model = new $$VirtualRequest();
        readParamsToModel(params, model);
        return model;
    }

    protected void readParamsToModel(final Map<String, Object> params,
                                     final $$VirtualRequest model) {
        model.optionalParameter = toString(params.get("optionalParameter"), "optionalParameter");
        model.booleanParameter = toBoolean(params.get("booleanParameter"), "booleanParameter");
        model.byteParameter = toByte(params.get("byteParameter"), "byteParameter");
        model.shortParameter = toShort(params.get("shortParameter"), "shortParameter");
        model.intParameter = toInteger(params.get("intParameter"), "intParameter");
        model.longParameter = toLong(params.get("longParameter"), "longParameter");
        model.bigIntParameter = toBigInteger(params.get("bigIntParameter"), "bigIntParameter");
        model.floatParameter = toFloat(params.get("floatParameter"), "floatParameter");
        model.doubleParameter = toDouble(params.get("doubleParameter"), "doubleParameter");
        model.decimalParameter = toBigDecimal(params.get("decimalParameter"), "decimalParameter");
        model.charParameter = toCharacter(params.get("charParameter"), "charParameter");
        model.stringParameter = toString(params.get("stringParameter"), "stringParameter");
        model.instantParameter = toInstant(params.get("instantParameter"), "instantParameter");
        model.colorParameter = toEnum(Color.class, params.get("colorParameter"), "colorParameter");
        model.optionalList = toStringList(params.get("optionalList"), "optionalList");
        model.booleanValues = toBooleanList(params.get("booleanValues"), "booleanValues");
        model.byteValues = toByteList(params.get("byteValues"), "byteValues");
        model.shortValues = toShortList(params.get("shortValues"), "shortValues");
        model.intValues = toIntegerList(params.get("intValues"), "intValues");
        model.longValues = toLongList(params.get("longValues"), "longValues");
        model.charValues = toCharacterList(params.get("charValues"), "charValues");
        model.floatValues = toFloatList(params.get("floatValues"), "floatValues");
        model.doubleValues = toDoubleList(params.get("doubleValues"), "doubleValues");
        model.decimals = toBigDecimalList(params.get("decimals"), "decimals");
        model.bigIntegers = toBigIntegerList(params.get("bigIntegers"), "bigIntegers");
        model.strings = toStringList(params.get("strings"), "strings");
        model.instants = toInstantList(params.get("instants"), "instants");
        model.colors = toEnumList(Color.class, params.get("colors"), "colors");
        model.optionalSet = toStringSet(params.get("optionalSet"), "optionalSet");
        model.booleanSet = toBooleanSet(params.get("booleanSet"), "booleanSet");
        model.byteSet = toByteSet(params.get("byteSet"), "byteSet");
        model.shortSet = toShortSet(params.get("shortSet"), "shortSet");
        model.intSet = toIntegerSet(params.get("intSet"), "intSet");
        model.longSet = toLongSet(params.get("longSet"), "longSet");
        model.charSet = toCharacterSet(params.get("charSet"), "charSet");
        model.floatSet = toFloatSet(params.get("floatSet"), "floatSet");
        model.doubleSet = toDoubleSet(params.get("doubleSet"), "doubleSet");
        model.decimalSet = toBigDecimalSet(params.get("decimalSet"), "decimalSet");
        model.bigIntegerSet = toBigIntegerSet(params.get("bigIntegerSet"), "bigIntegerSet");
        model.stringSet = toStringSet(params.get("stringSet"), "stringSet");
        model.instantSet = toInstantSet(params.get("instantSet"), "instantSet");
        model.colorSet = toEnumSet(Color.class, params.get("colorSet"), "colorSet");
        model.optionalMap = toStringMap(params.get("optionalMap"), "optionalMap");
        model.booleanMap = toBooleanMap(params.get("booleanMap"), "booleanMap");
        model.byteMap = toByteMap(params.get("byteMap"), "byteMap");
        model.shortMap = toShortMap(params.get("shortMap"), "shortMap");
        model.intMap = toIntegerMap(params.get("intMap"), "intMap");
        model.longMap = toLongMap(params.get("longMap"), "longMap");
        model.charMap = toCharacterMap(params.get("charMap"), "charMap");
        model.floatMap = toFloatMap(params.get("floatMap"), "floatMap");
        model.doubleMap = toDoubleMap(params.get("doubleMap"), "doubleMap");
        model.decimalMap = toBigDecimalMap(params.get("decimalMap"), "decimalMap");
        model.bigIntegerMap = toBigIntegerMap(params.get("bigIntegerMap"), "bigIntegerMap");
        model.stringMap = toStringMap(params.get("stringMap"), "stringMap");
        model.instantMap = toInstantMap(params.get("instantMap"), "instantMap");
        model.colorMap = toEnumMap(Color.class, params.get("colorMap"), "colorMap");
        model.countryCodeAlpha2 = toString(params.get("countryCodeAlpha2"), "countryCodeAlpha2");
        model.countryCodeAlpha3 = toString(params.get("countryCodeAlpha3"), "countryCodeAlpha3");
        model.countryCodeNumeric = toString(params.get("countryCodeNumeric"), "countryCodeNumeric");
        model.base64URLEncodedBase = toString(params.get("base64URLEncodedBase"), "base64URLEncodedBase");
        model.base64URLEncodedUrl = toString(params.get("base64URLEncodedUrl"), "base64URLEncodedUrl");
        model.ip = toString(params.get("ip"), "ip");
        model.ip4 = toString(params.get("ip4"), "ip4");
        model.ip6 = toString(params.get("ip6"), "ip6");
        model.lat111km = toBigDecimal(params.get("lat111km"), "lat111km");
        model.lng111km = toBigDecimal(params.get("lng111km"), "lng111km");
        model.lat11km = toBigDecimal(params.get("lat11km"), "lat11km");
        model.lng11km = toBigDecimal(params.get("lng11km"), "lng11km");
        model.lat1km = toBigDecimal(params.get("lat1km"), "lat1km");
        model.lng1km = toBigDecimal(params.get("lng1km"), "lng1km");
        model.lat111m = toBigDecimal(params.get("lat111m"), "lat111m");
        model.lng111m = toBigDecimal(params.get("lng111m"), "lng111m");
        model.lat11m = toBigDecimal(params.get("lat11m"), "lat11m");
        model.lng11m = toBigDecimal(params.get("lng11m"), "lng11m");
        model.lat1m = toBigDecimal(params.get("lat1m"), "lat1m");
        model.lng1m = toBigDecimal(params.get("lng1m"), "lng1m");
        model.lat11cm = toBigDecimal(params.get("lat11cm"), "lat11cm");
        model.lng11cm = toBigDecimal(params.get("lng11cm"), "lng11cm");
        model.lat1cm = toBigDecimal(params.get("lat1cm"), "lat1cm");
        model.lng1cm = toBigDecimal(params.get("lng1cm"), "lng1cm");
    }
}
