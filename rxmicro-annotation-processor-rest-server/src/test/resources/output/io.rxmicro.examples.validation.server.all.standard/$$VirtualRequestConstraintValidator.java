package io.rxmicro.examples.validation.server.all.standard;

import io.rxmicro.http.error.ValidationException;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.AssertFalseConstraintValidator;
import io.rxmicro.validation.validator.AssertTrueConstraintValidator;
import io.rxmicro.validation.validator.Base64URLEncodedConstraintValidator;
import io.rxmicro.validation.validator.CountryCodeConstraintValidator;
import io.rxmicro.validation.validator.EmailConstraintValidator;
import io.rxmicro.validation.validator.EnumerationCharacterConstraintValidator;
import io.rxmicro.validation.validator.EnumerationStringConstraintValidator;
import io.rxmicro.validation.validator.FutureInstantConstraintValidator;
import io.rxmicro.validation.validator.FutureOrPresentInstantConstraintValidator;
import io.rxmicro.validation.validator.HostNameConstraintValidator;
import io.rxmicro.validation.validator.IPConstraintValidator;
import io.rxmicro.validation.validator.LatConstraintValidator;
import io.rxmicro.validation.validator.LatinAlphabetOnlyConstraintValidator;
import io.rxmicro.validation.validator.LengthConstraintValidator;
import io.rxmicro.validation.validator.LngConstraintValidator;
import io.rxmicro.validation.validator.LowercaseConstraintValidator;
import io.rxmicro.validation.validator.MaxBigDecimalNumberConstraintValidator;
import io.rxmicro.validation.validator.MaxBigIntegerNumberConstraintValidator;
import io.rxmicro.validation.validator.MaxByteConstraintValidator;
import io.rxmicro.validation.validator.MaxDoubleConstraintValidator;
import io.rxmicro.validation.validator.MaxFloatConstraintValidator;
import io.rxmicro.validation.validator.MaxIntConstraintValidator;
import io.rxmicro.validation.validator.MaxLengthConstraintValidator;
import io.rxmicro.validation.validator.MaxLongConstraintValidator;
import io.rxmicro.validation.validator.MaxShortConstraintValidator;
import io.rxmicro.validation.validator.MaxSizeConstraintValidator;
import io.rxmicro.validation.validator.MinBigDecimalNumberConstraintValidator;
import io.rxmicro.validation.validator.MinBigIntegerNumberConstraintValidator;
import io.rxmicro.validation.validator.MinByteConstraintValidator;
import io.rxmicro.validation.validator.MinDoubleConstraintValidator;
import io.rxmicro.validation.validator.MinFloatConstraintValidator;
import io.rxmicro.validation.validator.MinIntConstraintValidator;
import io.rxmicro.validation.validator.MinLengthConstraintValidator;
import io.rxmicro.validation.validator.MinLongConstraintValidator;
import io.rxmicro.validation.validator.MinShortConstraintValidator;
import io.rxmicro.validation.validator.MinSizeConstraintValidator;
import io.rxmicro.validation.validator.NumericConstraintValidator;
import io.rxmicro.validation.validator.PastInstantConstraintValidator;
import io.rxmicro.validation.validator.PastOrPresentInstantConstraintValidator;
import io.rxmicro.validation.validator.PatternConstraintValidator;
import io.rxmicro.validation.validator.PhoneConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;
import io.rxmicro.validation.validator.SizeConstraintValidator;
import io.rxmicro.validation.validator.SkypeConstraintValidator;
import io.rxmicro.validation.validator.SubEnumConstraintValidator;
import io.rxmicro.validation.validator.TelegramConstraintValidator;
import io.rxmicro.validation.validator.TruncatedTimeInstantConstraintValidator;
import io.rxmicro.validation.validator.URIConstraintValidator;
import io.rxmicro.validation.validator.URLEncodedConstraintValidator;
import io.rxmicro.validation.validator.UniqueItemsConstraintValidator;
import io.rxmicro.validation.validator.UppercaseConstraintValidator;
import io.rxmicro.validation.validator.ViberConstraintValidator;
import io.rxmicro.validation.validator.WhatsAppConstraintValidator;

import java.util.Set;

import static io.rxmicro.validation.detail.ValidatorPool.getStatelessValidator;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$VirtualRequestConstraintValidator implements ConstraintValidator<$$VirtualRequest> {

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final AssertFalseConstraintValidator assertFalseConstraintValidator =
            getStatelessValidator(AssertFalseConstraintValidator.class);

    private final AssertTrueConstraintValidator assertTrueConstraintValidator =
            getStatelessValidator(AssertTrueConstraintValidator.class);

    private final EmailConstraintValidator emailConstraintValidator =
            getStatelessValidator(EmailConstraintValidator.class);

    private final HostNameConstraintValidator hostNameConstraintValidator =
            getStatelessValidator(HostNameConstraintValidator.class);

    private final LowercaseConstraintValidator lowercaseConstraintValidator =
            getStatelessValidator(LowercaseConstraintValidator.class);

    private final SkypeConstraintValidator skypeConstraintValidator =
            getStatelessValidator(SkypeConstraintValidator.class);

    private final URIConstraintValidator uRIConstraintValidator =
            getStatelessValidator(URIConstraintValidator.class);

    private final URLEncodedConstraintValidator uRLEncodedConstraintValidator =
            getStatelessValidator(URLEncodedConstraintValidator.class);

    private final UppercaseConstraintValidator uppercaseConstraintValidator =
            getStatelessValidator(UppercaseConstraintValidator.class);

    private final FutureInstantConstraintValidator futureInstantConstraintValidator =
            getStatelessValidator(FutureInstantConstraintValidator.class);

    private final FutureOrPresentInstantConstraintValidator futureOrPresentInstantConstraintValidator =
            getStatelessValidator(FutureOrPresentInstantConstraintValidator.class);

    private final PastInstantConstraintValidator pastInstantConstraintValidator =
            getStatelessValidator(PastInstantConstraintValidator.class);

    private final PastOrPresentInstantConstraintValidator pastOrPresentInstantConstraintValidator =
            getStatelessValidator(PastOrPresentInstantConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final UniqueItemsConstraintValidator uniqueItemsConstraintValidator =
            getStatelessValidator(UniqueItemsConstraintValidator.class);

    private final MaxByteConstraintValidator byteParameterMaxIntMaxByteConstraintValidator =
            new MaxByteConstraintValidator((byte) 10, true);

    private final MaxByteConstraintValidator byteParameterMaxNumberMaxByteConstraintValidator =
            new MaxByteConstraintValidator("10", true);

    private final MinByteConstraintValidator byteParameterMinIntMinByteConstraintValidator =
            new MinByteConstraintValidator((byte) 3, true);

    private final MinByteConstraintValidator byteParameterMinNumberMinByteConstraintValidator =
            new MinByteConstraintValidator("3", true);

    private final MaxShortConstraintValidator shortParameterMaxIntMaxShortConstraintValidator =
            new MaxShortConstraintValidator((short) 10, true);

    private final MaxShortConstraintValidator shortParameterMaxNumberMaxShortConstraintValidator =
            new MaxShortConstraintValidator("10", true);

    private final MinShortConstraintValidator shortParameterMinIntMinShortConstraintValidator =
            new MinShortConstraintValidator((short) 3, true);

    private final MinShortConstraintValidator shortParameterMinNumberMinShortConstraintValidator =
            new MinShortConstraintValidator("3", true);

    private final MaxIntConstraintValidator intParameterMaxIntMaxIntConstraintValidator =
            new MaxIntConstraintValidator(10, true);

    private final MaxIntConstraintValidator intParameterMaxNumberMaxIntConstraintValidator =
            new MaxIntConstraintValidator("10", true);

    private final MinIntConstraintValidator intParameterMinIntMinIntConstraintValidator =
            new MinIntConstraintValidator(3, true);

    private final MinIntConstraintValidator intParameterMinNumberMinIntConstraintValidator =
            new MinIntConstraintValidator("3", true);

    private final MaxLongConstraintValidator longParameterMaxIntMaxLongConstraintValidator =
            new MaxLongConstraintValidator(10L, true);

    private final MaxLongConstraintValidator longParameterMaxNumberMaxLongConstraintValidator =
            new MaxLongConstraintValidator("10", true);

    private final MinLongConstraintValidator longParameterMinIntMinLongConstraintValidator =
            new MinLongConstraintValidator(3L, true);

    private final MinLongConstraintValidator longParameterMinNumberMinLongConstraintValidator =
            new MinLongConstraintValidator("3", true);

    private final MaxBigIntegerNumberConstraintValidator bigIntParameterMaxNumberMaxBigIntegerNumberConstraintValidator =
            new MaxBigIntegerNumberConstraintValidator("10", true);

    private final MinBigIntegerNumberConstraintValidator bigIntParameterMinNumberMinBigIntegerNumberConstraintValidator =
            new MinBigIntegerNumberConstraintValidator("3", true);

    private final MaxFloatConstraintValidator floatParameterMaxDoubleMaxFloatConstraintValidator =
            new MaxFloatConstraintValidator((float) 10.9);

    private final MaxFloatConstraintValidator floatParameterMaxNumberMaxFloatConstraintValidator =
            new MaxFloatConstraintValidator("10", true);

    private final MinFloatConstraintValidator floatParameterMinDoubleMinFloatConstraintValidator =
            new MinFloatConstraintValidator((float) 3.1);

    private final MinFloatConstraintValidator floatParameterMinNumberMinFloatConstraintValidator =
            new MinFloatConstraintValidator("3", true);

    private final MaxDoubleConstraintValidator doubleParameterMaxDoubleMaxDoubleConstraintValidator =
            new MaxDoubleConstraintValidator(10.9);

    private final MaxDoubleConstraintValidator doubleParameterMaxNumberMaxDoubleConstraintValidator =
            new MaxDoubleConstraintValidator("10", true);

    private final MinDoubleConstraintValidator doubleParameterMinDoubleMinDoubleConstraintValidator =
            new MinDoubleConstraintValidator(3.1);

    private final MinDoubleConstraintValidator doubleParameterMinNumberMinDoubleConstraintValidator =
            new MinDoubleConstraintValidator("3", true);

    private final LatConstraintValidator decimalParameterLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_METER);

    private final LngConstraintValidator decimalParameterLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_METER);

    private final MaxBigDecimalNumberConstraintValidator decimalParameterMaxNumberMaxBigDecimalNumberConstraintValidator =
            new MaxBigDecimalNumberConstraintValidator("10.9", true);

    private final MinBigDecimalNumberConstraintValidator decimalParameterMinNumberMinBigDecimalNumberConstraintValidator =
            new MinBigDecimalNumberConstraintValidator("3.1", true);

    private final NumericConstraintValidator decimalParameterNumericNumericConstraintValidator =
            new NumericConstraintValidator(5, 2);

    private final EnumerationCharacterConstraintValidator charParameterEnumerationEnumerationCharacterConstraintValidator =
            new EnumerationCharacterConstraintValidator(Set.of("y", "n"));

    private final Base64URLEncodedConstraintValidator stringParameterBase64URLEncodedBase64URLEncodedConstraintValidator =
            new Base64URLEncodedConstraintValidator(io.rxmicro.validation.constraint.Base64URLEncoded.Alphabet.URL);

    private final CountryCodeConstraintValidator stringParameterCountryCodeCountryCodeConstraintValidator =
            new CountryCodeConstraintValidator(io.rxmicro.validation.constraint.CountryCode.Format.ISO_3166_1_alpha2);

    private final EnumerationStringConstraintValidator stringParameterEnumerationEnumerationStringConstraintValidator =
            new EnumerationStringConstraintValidator(Set.of("3", "2", "3"));

    private final IPConstraintValidator stringParameterIPIPConstraintValidator =
            new IPConstraintValidator(Set.of(io.rxmicro.validation.constraint.IP.Version.IP_V4, io.rxmicro.validation.constraint.IP.Version.IP_V6));

    private final LatinAlphabetOnlyConstraintValidator stringParameterLatinAlphabetOnlyLatinAlphabetOnlyConstraintValidator =
            new LatinAlphabetOnlyConstraintValidator(true, true, true, "~!@#$%^&*()_+=-[]{},.;:<>?/\\\"' \t|\r\n");

    private final LengthConstraintValidator stringParameterLengthLengthConstraintValidator =
            new LengthConstraintValidator(2);

    private final MaxLengthConstraintValidator stringParameterMaxLengthMaxLengthConstraintValidator =
            new MaxLengthConstraintValidator(2, true);

    private final MinLengthConstraintValidator stringParameterMinLengthMinLengthConstraintValidator =
            new MinLengthConstraintValidator(2, true);

    private final PatternConstraintValidator stringParameterPatternPatternConstraintValidator =
            new PatternConstraintValidator("hello", Set.of());

    private final PhoneConstraintValidator stringParameterPhonePhoneConstraintValidator =
            new PhoneConstraintValidator(true, false);

    private final TelegramConstraintValidator stringParameterTelegramTelegramConstraintValidator =
            new TelegramConstraintValidator(true, false);

    private final ViberConstraintValidator stringParameterViberViberConstraintValidator =
            new ViberConstraintValidator(true, false);

    private final WhatsAppConstraintValidator stringParameterWhatsAppWhatsAppConstraintValidator =
            new WhatsAppConstraintValidator(true, false);

    private final TruncatedTimeInstantConstraintValidator instantParameterTruncatedTimeTruncatedTimeInstantConstraintValidator =
            new TruncatedTimeInstantConstraintValidator(io.rxmicro.validation.constraint.TruncatedTime.Truncated.MILLIS);

    private final SubEnumConstraintValidator colorParameterSubEnumSubEnumConstraintValidator =
            new SubEnumConstraintValidator(io.rxmicro.examples.validation.server.all.standard.model.Color.class, Set.of("RED", "BLUE"), Set.of());

    private final MaxSizeConstraintValidator booleanValuesMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinSizeConstraintValidator booleanValuesMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator booleanValuesSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final MaxByteConstraintValidator byteValuesMaxIntMaxByteConstraintValidator =
            new MaxByteConstraintValidator((byte) 10, true);

    private final MaxSizeConstraintValidator byteValuesMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinByteConstraintValidator byteValuesMinIntMinByteConstraintValidator =
            new MinByteConstraintValidator((byte) 3, true);

    private final MinSizeConstraintValidator byteValuesMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator byteValuesSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final MaxShortConstraintValidator shortValuesMaxIntMaxShortConstraintValidator =
            new MaxShortConstraintValidator((short) 10, true);

    private final MaxSizeConstraintValidator shortValuesMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinShortConstraintValidator shortValuesMinIntMinShortConstraintValidator =
            new MinShortConstraintValidator((short) 3, true);

    private final MinSizeConstraintValidator shortValuesMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator shortValuesSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final MaxIntConstraintValidator intValuesMaxIntMaxIntConstraintValidator =
            new MaxIntConstraintValidator(10, true);

    private final MaxSizeConstraintValidator intValuesMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinIntConstraintValidator intValuesMinIntMinIntConstraintValidator =
            new MinIntConstraintValidator(3, true);

    private final MinSizeConstraintValidator intValuesMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator intValuesSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final MaxLongConstraintValidator longValuesMaxIntMaxLongConstraintValidator =
            new MaxLongConstraintValidator(10L, true);

    private final MaxSizeConstraintValidator longValuesMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinLongConstraintValidator longValuesMinIntMinLongConstraintValidator =
            new MinLongConstraintValidator(3L, true);

    private final MinSizeConstraintValidator longValuesMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator longValuesSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final EnumerationCharacterConstraintValidator charValuesEnumerationEnumerationCharacterConstraintValidator =
            new EnumerationCharacterConstraintValidator(Set.of("y", "n"));

    private final MaxSizeConstraintValidator charValuesMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinSizeConstraintValidator charValuesMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator charValuesSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final MaxFloatConstraintValidator floatValuesMaxDoubleMaxFloatConstraintValidator =
            new MaxFloatConstraintValidator((float) 10.9);

    private final MaxSizeConstraintValidator floatValuesMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinFloatConstraintValidator floatValuesMinDoubleMinFloatConstraintValidator =
            new MinFloatConstraintValidator((float) 3.1);

    private final MinSizeConstraintValidator floatValuesMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator floatValuesSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final MaxDoubleConstraintValidator doubleValuesMaxDoubleMaxDoubleConstraintValidator =
            new MaxDoubleConstraintValidator(10.9);

    private final MaxSizeConstraintValidator doubleValuesMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinDoubleConstraintValidator doubleValuesMinDoubleMinDoubleConstraintValidator =
            new MinDoubleConstraintValidator(3.1);

    private final MinSizeConstraintValidator doubleValuesMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator doubleValuesSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final LatConstraintValidator decimalsLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_METER);

    private final LngConstraintValidator decimalsLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_METER);

    private final MaxBigDecimalNumberConstraintValidator decimalsMaxNumberMaxBigDecimalNumberConstraintValidator =
            new MaxBigDecimalNumberConstraintValidator("10.9", true);

    private final MaxSizeConstraintValidator decimalsMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinBigDecimalNumberConstraintValidator decimalsMinNumberMinBigDecimalNumberConstraintValidator =
            new MinBigDecimalNumberConstraintValidator("3.1", true);

    private final MinSizeConstraintValidator decimalsMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final NumericConstraintValidator decimalsNumericNumericConstraintValidator =
            new NumericConstraintValidator(5, 2);

    private final SizeConstraintValidator decimalsSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final MaxBigIntegerNumberConstraintValidator bigIntegersMaxNumberMaxBigIntegerNumberConstraintValidator =
            new MaxBigIntegerNumberConstraintValidator("10", true);

    private final MaxSizeConstraintValidator bigIntegersMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinBigIntegerNumberConstraintValidator bigIntegersMinNumberMinBigIntegerNumberConstraintValidator =
            new MinBigIntegerNumberConstraintValidator("3", true);

    private final MinSizeConstraintValidator bigIntegersMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator bigIntegersSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final Base64URLEncodedConstraintValidator stringsBase64URLEncodedBase64URLEncodedConstraintValidator =
            new Base64URLEncodedConstraintValidator(io.rxmicro.validation.constraint.Base64URLEncoded.Alphabet.URL);

    private final CountryCodeConstraintValidator stringsCountryCodeCountryCodeConstraintValidator =
            new CountryCodeConstraintValidator(io.rxmicro.validation.constraint.CountryCode.Format.ISO_3166_1_alpha2);

    private final EnumerationStringConstraintValidator stringsEnumerationEnumerationStringConstraintValidator =
            new EnumerationStringConstraintValidator(Set.of("3", "2", "3"));

    private final IPConstraintValidator stringsIPIPConstraintValidator =
            new IPConstraintValidator(Set.of(io.rxmicro.validation.constraint.IP.Version.IP_V4, io.rxmicro.validation.constraint.IP.Version.IP_V6));

    private final LatinAlphabetOnlyConstraintValidator stringsLatinAlphabetOnlyLatinAlphabetOnlyConstraintValidator =
            new LatinAlphabetOnlyConstraintValidator(true, true, true, "~!@#$%^&*()_+=-[]{},.;:<>?/\\\"' \t|\r\n");

    private final LengthConstraintValidator stringsLengthLengthConstraintValidator =
            new LengthConstraintValidator(2);

    private final MaxLengthConstraintValidator stringsMaxLengthMaxLengthConstraintValidator =
            new MaxLengthConstraintValidator(2, true);

    private final MaxSizeConstraintValidator stringsMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinLengthConstraintValidator stringsMinLengthMinLengthConstraintValidator =
            new MinLengthConstraintValidator(2, true);

    private final MinSizeConstraintValidator stringsMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final PatternConstraintValidator stringsPatternPatternConstraintValidator =
            new PatternConstraintValidator("hello", Set.of());

    private final PhoneConstraintValidator stringsPhonePhoneConstraintValidator =
            new PhoneConstraintValidator(true, false);

    private final SizeConstraintValidator stringsSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final TelegramConstraintValidator stringsTelegramTelegramConstraintValidator =
            new TelegramConstraintValidator(true, false);

    private final ViberConstraintValidator stringsViberViberConstraintValidator =
            new ViberConstraintValidator(true, false);

    private final WhatsAppConstraintValidator stringsWhatsAppWhatsAppConstraintValidator =
            new WhatsAppConstraintValidator(true, false);

    private final MaxSizeConstraintValidator instantsMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinSizeConstraintValidator instantsMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator instantsSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final TruncatedTimeInstantConstraintValidator instantsTruncatedTimeTruncatedTimeInstantConstraintValidator =
            new TruncatedTimeInstantConstraintValidator(io.rxmicro.validation.constraint.TruncatedTime.Truncated.MILLIS);

    private final MaxSizeConstraintValidator colorsMaxSizeMaxSizeConstraintValidator =
            new MaxSizeConstraintValidator(50, true);

    private final MinSizeConstraintValidator colorsMinSizeMinSizeConstraintValidator =
            new MinSizeConstraintValidator(2, true);

    private final SizeConstraintValidator colorsSizeSizeConstraintValidator =
            new SizeConstraintValidator(12);

    private final SubEnumConstraintValidator colorsSubEnumSubEnumConstraintValidator =
            new SubEnumConstraintValidator(io.rxmicro.examples.validation.server.all.standard.model.Color.class, Set.of("RED", "BLUE"), Set.of());

    private final CountryCodeConstraintValidator countryCodeAlpha2CountryCodeCountryCodeConstraintValidator =
            new CountryCodeConstraintValidator(io.rxmicro.validation.constraint.CountryCode.Format.ISO_3166_1_alpha2);

    private final CountryCodeConstraintValidator countryCodeAlpha3CountryCodeCountryCodeConstraintValidator =
            new CountryCodeConstraintValidator(io.rxmicro.validation.constraint.CountryCode.Format.ISO_3166_1_alpha3);

    private final CountryCodeConstraintValidator countryCodeNumericCountryCodeCountryCodeConstraintValidator =
            new CountryCodeConstraintValidator(io.rxmicro.validation.constraint.CountryCode.Format.ISO_3166_1_numeric);

    private final Base64URLEncodedConstraintValidator base64URLEncodedBaseBase64URLEncodedBase64URLEncodedConstraintValidator =
            new Base64URLEncodedConstraintValidator(io.rxmicro.validation.constraint.Base64URLEncoded.Alphabet.BASE);

    private final Base64URLEncodedConstraintValidator base64URLEncodedUrlBase64URLEncodedBase64URLEncodedConstraintValidator =
            new Base64URLEncodedConstraintValidator(io.rxmicro.validation.constraint.Base64URLEncoded.Alphabet.URL);

    private final IPConstraintValidator ipIPIPConstraintValidator =
            new IPConstraintValidator(Set.of(io.rxmicro.validation.constraint.IP.Version.IP_V4, io.rxmicro.validation.constraint.IP.Version.IP_V6));

    private final IPConstraintValidator ip4IPIPConstraintValidator =
            new IPConstraintValidator(Set.of(io.rxmicro.validation.constraint.IP.Version.IP_V4));

    private final IPConstraintValidator ip6IPIPConstraintValidator =
            new IPConstraintValidator(Set.of(io.rxmicro.validation.constraint.IP.Version.IP_V6));

    private final LatConstraintValidator lat111kmLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_111_KILOMETERS);

    private final LngConstraintValidator lng111kmLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_111_KILOMETERS);

    private final LatConstraintValidator lat11kmLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_11_KILOMETERS);

    private final LngConstraintValidator lng11kmLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_11_KILOMETERS);

    private final LatConstraintValidator lat1kmLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_KILOMETER);

    private final LngConstraintValidator lng1kmLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_KILOMETER);

    private final LatConstraintValidator lat111mLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_111_METERS);

    private final LngConstraintValidator lng111mLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_111_METERS);

    private final LatConstraintValidator lat11mLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_11_METERS);

    private final LngConstraintValidator lng11mLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_11_METERS);

    private final LatConstraintValidator lat1mLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_METER);

    private final LngConstraintValidator lng1mLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_METER);

    private final LatConstraintValidator lat11cmLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_11_CENTIMETERS);

    private final LngConstraintValidator lng11cmLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_11_CENTIMETERS);

    private final LatConstraintValidator lat1cmLatLatConstraintValidator =
            new LatConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_CENTIMETER);

    private final LngConstraintValidator lng1cmLngLngConstraintValidator =
            new LngConstraintValidator(io.rxmicro.validation.base.LocationAccuracy.ACCURACY_1_CENTIMETER);

    @Override
    public void validate(final $$VirtualRequest model,
                         final HttpModelType httpModelType,
                         final String name) throws ValidationException {
        requiredConstraintValidator.validate(model.booleanParameter, HttpModelType.parameter, "booleanParameter");
        assertFalseConstraintValidator.validate(model.booleanParameter, HttpModelType.parameter, "booleanParameter");
        assertTrueConstraintValidator.validate(model.booleanParameter, HttpModelType.parameter, "booleanParameter");

        requiredConstraintValidator.validate(model.byteParameter, HttpModelType.parameter, "byteParameter");
        byteParameterMaxIntMaxByteConstraintValidator.validate(model.byteParameter, HttpModelType.parameter, "byteParameter");
        byteParameterMaxNumberMaxByteConstraintValidator.validate(model.byteParameter, HttpModelType.parameter, "byteParameter");
        byteParameterMinIntMinByteConstraintValidator.validate(model.byteParameter, HttpModelType.parameter, "byteParameter");
        byteParameterMinNumberMinByteConstraintValidator.validate(model.byteParameter, HttpModelType.parameter, "byteParameter");

        requiredConstraintValidator.validate(model.shortParameter, HttpModelType.parameter, "shortParameter");
        shortParameterMaxIntMaxShortConstraintValidator.validate(model.shortParameter, HttpModelType.parameter, "shortParameter");
        shortParameterMaxNumberMaxShortConstraintValidator.validate(model.shortParameter, HttpModelType.parameter, "shortParameter");
        shortParameterMinIntMinShortConstraintValidator.validate(model.shortParameter, HttpModelType.parameter, "shortParameter");
        shortParameterMinNumberMinShortConstraintValidator.validate(model.shortParameter, HttpModelType.parameter, "shortParameter");

        requiredConstraintValidator.validate(model.intParameter, HttpModelType.parameter, "intParameter");
        intParameterMaxIntMaxIntConstraintValidator.validate(model.intParameter, HttpModelType.parameter, "intParameter");
        intParameterMaxNumberMaxIntConstraintValidator.validate(model.intParameter, HttpModelType.parameter, "intParameter");
        intParameterMinIntMinIntConstraintValidator.validate(model.intParameter, HttpModelType.parameter, "intParameter");
        intParameterMinNumberMinIntConstraintValidator.validate(model.intParameter, HttpModelType.parameter, "intParameter");

        requiredConstraintValidator.validate(model.longParameter, HttpModelType.parameter, "longParameter");
        longParameterMaxIntMaxLongConstraintValidator.validate(model.longParameter, HttpModelType.parameter, "longParameter");
        longParameterMaxNumberMaxLongConstraintValidator.validate(model.longParameter, HttpModelType.parameter, "longParameter");
        longParameterMinIntMinLongConstraintValidator.validate(model.longParameter, HttpModelType.parameter, "longParameter");
        longParameterMinNumberMinLongConstraintValidator.validate(model.longParameter, HttpModelType.parameter, "longParameter");

        requiredConstraintValidator.validate(model.bigIntParameter, HttpModelType.parameter, "bigIntParameter");
        bigIntParameterMaxNumberMaxBigIntegerNumberConstraintValidator.validate(model.bigIntParameter, HttpModelType.parameter, "bigIntParameter");
        bigIntParameterMinNumberMinBigIntegerNumberConstraintValidator.validate(model.bigIntParameter, HttpModelType.parameter, "bigIntParameter");

        requiredConstraintValidator.validate(model.floatParameter, HttpModelType.parameter, "floatParameter");
        floatParameterMaxDoubleMaxFloatConstraintValidator.validate(model.floatParameter, HttpModelType.parameter, "floatParameter");
        floatParameterMaxNumberMaxFloatConstraintValidator.validate(model.floatParameter, HttpModelType.parameter, "floatParameter");
        floatParameterMinDoubleMinFloatConstraintValidator.validate(model.floatParameter, HttpModelType.parameter, "floatParameter");
        floatParameterMinNumberMinFloatConstraintValidator.validate(model.floatParameter, HttpModelType.parameter, "floatParameter");

        requiredConstraintValidator.validate(model.doubleParameter, HttpModelType.parameter, "doubleParameter");
        doubleParameterMaxDoubleMaxDoubleConstraintValidator.validate(model.doubleParameter, HttpModelType.parameter, "doubleParameter");
        doubleParameterMaxNumberMaxDoubleConstraintValidator.validate(model.doubleParameter, HttpModelType.parameter, "doubleParameter");
        doubleParameterMinDoubleMinDoubleConstraintValidator.validate(model.doubleParameter, HttpModelType.parameter, "doubleParameter");
        doubleParameterMinNumberMinDoubleConstraintValidator.validate(model.doubleParameter, HttpModelType.parameter, "doubleParameter");

        requiredConstraintValidator.validate(model.decimalParameter, HttpModelType.parameter, "decimalParameter");
        decimalParameterLatLatConstraintValidator.validate(model.decimalParameter, HttpModelType.parameter, "decimalParameter");
        decimalParameterLngLngConstraintValidator.validate(model.decimalParameter, HttpModelType.parameter, "decimalParameter");
        decimalParameterMaxNumberMaxBigDecimalNumberConstraintValidator.validate(model.decimalParameter, HttpModelType.parameter, "decimalParameter");
        decimalParameterMinNumberMinBigDecimalNumberConstraintValidator.validate(model.decimalParameter, HttpModelType.parameter, "decimalParameter");
        decimalParameterNumericNumericConstraintValidator.validate(model.decimalParameter, HttpModelType.parameter, "decimalParameter");

        requiredConstraintValidator.validate(model.charParameter, HttpModelType.parameter, "charParameter");
        charParameterEnumerationEnumerationCharacterConstraintValidator.validate(model.charParameter, HttpModelType.parameter, "charParameter");

        requiredConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterBase64URLEncodedBase64URLEncodedConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterCountryCodeCountryCodeConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        emailConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterEnumerationEnumerationStringConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        hostNameConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterIPIPConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterLatinAlphabetOnlyLatinAlphabetOnlyConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterLengthLengthConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        lowercaseConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterMaxLengthMaxLengthConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterMinLengthMinLengthConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterPatternPatternConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterPhonePhoneConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        skypeConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterTelegramTelegramConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        uRIConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        uRLEncodedConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        uppercaseConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterViberViberConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");
        stringParameterWhatsAppWhatsAppConstraintValidator.validate(model.stringParameter, HttpModelType.parameter, "stringParameter");

        requiredConstraintValidator.validate(model.instantParameter, HttpModelType.parameter, "instantParameter");
        futureInstantConstraintValidator.validate(model.instantParameter, HttpModelType.parameter, "instantParameter");
        futureOrPresentInstantConstraintValidator.validate(model.instantParameter, HttpModelType.parameter, "instantParameter");
        pastInstantConstraintValidator.validate(model.instantParameter, HttpModelType.parameter, "instantParameter");
        pastOrPresentInstantConstraintValidator.validate(model.instantParameter, HttpModelType.parameter, "instantParameter");
        instantParameterTruncatedTimeTruncatedTimeInstantConstraintValidator.validate(model.instantParameter, HttpModelType.parameter, "instantParameter");

        requiredConstraintValidator.validate(model.colorParameter, HttpModelType.parameter, "colorParameter");
        colorParameterSubEnumSubEnumConstraintValidator.validate(model.colorParameter, HttpModelType.parameter, "colorParameter");

        requiredListConstraintValidator.validate(model.booleanValues, HttpModelType.parameter, "booleanValues");
        requiredConstraintValidator.validateList(model.booleanValues, HttpModelType.parameter, "booleanValues");
        assertFalseConstraintValidator.validateList(model.booleanValues, HttpModelType.parameter, "booleanValues");
        assertTrueConstraintValidator.validateList(model.booleanValues, HttpModelType.parameter, "booleanValues");
        booleanValuesMaxSizeMaxSizeConstraintValidator.validate(model.booleanValues, HttpModelType.parameter, "booleanValues");
        booleanValuesMinSizeMinSizeConstraintValidator.validate(model.booleanValues, HttpModelType.parameter, "booleanValues");
        booleanValuesSizeSizeConstraintValidator.validate(model.booleanValues, HttpModelType.parameter, "booleanValues");
        uniqueItemsConstraintValidator.validate(model.booleanValues, HttpModelType.parameter, "booleanValues");

        requiredListConstraintValidator.validate(model.byteValues, HttpModelType.parameter, "byteValues");
        requiredConstraintValidator.validateList(model.byteValues, HttpModelType.parameter, "byteValues");
        byteValuesMaxIntMaxByteConstraintValidator.validateList(model.byteValues, HttpModelType.parameter, "byteValues");
        byteValuesMaxSizeMaxSizeConstraintValidator.validate(model.byteValues, HttpModelType.parameter, "byteValues");
        byteValuesMinIntMinByteConstraintValidator.validateList(model.byteValues, HttpModelType.parameter, "byteValues");
        byteValuesMinSizeMinSizeConstraintValidator.validate(model.byteValues, HttpModelType.parameter, "byteValues");
        byteValuesSizeSizeConstraintValidator.validate(model.byteValues, HttpModelType.parameter, "byteValues");
        uniqueItemsConstraintValidator.validate(model.byteValues, HttpModelType.parameter, "byteValues");

        requiredListConstraintValidator.validate(model.shortValues, HttpModelType.parameter, "shortValues");
        requiredConstraintValidator.validateList(model.shortValues, HttpModelType.parameter, "shortValues");
        shortValuesMaxIntMaxShortConstraintValidator.validateList(model.shortValues, HttpModelType.parameter, "shortValues");
        shortValuesMaxSizeMaxSizeConstraintValidator.validate(model.shortValues, HttpModelType.parameter, "shortValues");
        shortValuesMinIntMinShortConstraintValidator.validateList(model.shortValues, HttpModelType.parameter, "shortValues");
        shortValuesMinSizeMinSizeConstraintValidator.validate(model.shortValues, HttpModelType.parameter, "shortValues");
        shortValuesSizeSizeConstraintValidator.validate(model.shortValues, HttpModelType.parameter, "shortValues");
        uniqueItemsConstraintValidator.validate(model.shortValues, HttpModelType.parameter, "shortValues");

        requiredListConstraintValidator.validate(model.intValues, HttpModelType.parameter, "intValues");
        requiredConstraintValidator.validateList(model.intValues, HttpModelType.parameter, "intValues");
        intValuesMaxIntMaxIntConstraintValidator.validateList(model.intValues, HttpModelType.parameter, "intValues");
        intValuesMaxSizeMaxSizeConstraintValidator.validate(model.intValues, HttpModelType.parameter, "intValues");
        intValuesMinIntMinIntConstraintValidator.validateList(model.intValues, HttpModelType.parameter, "intValues");
        intValuesMinSizeMinSizeConstraintValidator.validate(model.intValues, HttpModelType.parameter, "intValues");
        intValuesSizeSizeConstraintValidator.validate(model.intValues, HttpModelType.parameter, "intValues");
        uniqueItemsConstraintValidator.validate(model.intValues, HttpModelType.parameter, "intValues");

        requiredListConstraintValidator.validate(model.longValues, HttpModelType.parameter, "longValues");
        requiredConstraintValidator.validateList(model.longValues, HttpModelType.parameter, "longValues");
        longValuesMaxIntMaxLongConstraintValidator.validateList(model.longValues, HttpModelType.parameter, "longValues");
        longValuesMaxSizeMaxSizeConstraintValidator.validate(model.longValues, HttpModelType.parameter, "longValues");
        longValuesMinIntMinLongConstraintValidator.validateList(model.longValues, HttpModelType.parameter, "longValues");
        longValuesMinSizeMinSizeConstraintValidator.validate(model.longValues, HttpModelType.parameter, "longValues");
        longValuesSizeSizeConstraintValidator.validate(model.longValues, HttpModelType.parameter, "longValues");
        uniqueItemsConstraintValidator.validate(model.longValues, HttpModelType.parameter, "longValues");

        requiredListConstraintValidator.validate(model.charValues, HttpModelType.parameter, "charValues");
        requiredConstraintValidator.validateList(model.charValues, HttpModelType.parameter, "charValues");
        charValuesEnumerationEnumerationCharacterConstraintValidator.validateList(model.charValues, HttpModelType.parameter, "charValues");
        charValuesMaxSizeMaxSizeConstraintValidator.validate(model.charValues, HttpModelType.parameter, "charValues");
        charValuesMinSizeMinSizeConstraintValidator.validate(model.charValues, HttpModelType.parameter, "charValues");
        charValuesSizeSizeConstraintValidator.validate(model.charValues, HttpModelType.parameter, "charValues");
        uniqueItemsConstraintValidator.validate(model.charValues, HttpModelType.parameter, "charValues");

        requiredListConstraintValidator.validate(model.floatValues, HttpModelType.parameter, "floatValues");
        requiredConstraintValidator.validateList(model.floatValues, HttpModelType.parameter, "floatValues");
        floatValuesMaxDoubleMaxFloatConstraintValidator.validateList(model.floatValues, HttpModelType.parameter, "floatValues");
        floatValuesMaxSizeMaxSizeConstraintValidator.validate(model.floatValues, HttpModelType.parameter, "floatValues");
        floatValuesMinDoubleMinFloatConstraintValidator.validateList(model.floatValues, HttpModelType.parameter, "floatValues");
        floatValuesMinSizeMinSizeConstraintValidator.validate(model.floatValues, HttpModelType.parameter, "floatValues");
        floatValuesSizeSizeConstraintValidator.validate(model.floatValues, HttpModelType.parameter, "floatValues");
        uniqueItemsConstraintValidator.validate(model.floatValues, HttpModelType.parameter, "floatValues");

        requiredListConstraintValidator.validate(model.doubleValues, HttpModelType.parameter, "doubleValues");
        requiredConstraintValidator.validateList(model.doubleValues, HttpModelType.parameter, "doubleValues");
        doubleValuesMaxDoubleMaxDoubleConstraintValidator.validateList(model.doubleValues, HttpModelType.parameter, "doubleValues");
        doubleValuesMaxSizeMaxSizeConstraintValidator.validate(model.doubleValues, HttpModelType.parameter, "doubleValues");
        doubleValuesMinDoubleMinDoubleConstraintValidator.validateList(model.doubleValues, HttpModelType.parameter, "doubleValues");
        doubleValuesMinSizeMinSizeConstraintValidator.validate(model.doubleValues, HttpModelType.parameter, "doubleValues");
        doubleValuesSizeSizeConstraintValidator.validate(model.doubleValues, HttpModelType.parameter, "doubleValues");
        uniqueItemsConstraintValidator.validate(model.doubleValues, HttpModelType.parameter, "doubleValues");

        requiredListConstraintValidator.validate(model.decimals, HttpModelType.parameter, "decimals");
        requiredConstraintValidator.validateList(model.decimals, HttpModelType.parameter, "decimals");
        decimalsLatLatConstraintValidator.validateList(model.decimals, HttpModelType.parameter, "decimals");
        decimalsLngLngConstraintValidator.validateList(model.decimals, HttpModelType.parameter, "decimals");
        decimalsMaxNumberMaxBigDecimalNumberConstraintValidator.validateList(model.decimals, HttpModelType.parameter, "decimals");
        decimalsMaxSizeMaxSizeConstraintValidator.validate(model.decimals, HttpModelType.parameter, "decimals");
        decimalsMinNumberMinBigDecimalNumberConstraintValidator.validateList(model.decimals, HttpModelType.parameter, "decimals");
        decimalsMinSizeMinSizeConstraintValidator.validate(model.decimals, HttpModelType.parameter, "decimals");
        decimalsNumericNumericConstraintValidator.validateList(model.decimals, HttpModelType.parameter, "decimals");
        decimalsSizeSizeConstraintValidator.validate(model.decimals, HttpModelType.parameter, "decimals");
        uniqueItemsConstraintValidator.validate(model.decimals, HttpModelType.parameter, "decimals");

        requiredListConstraintValidator.validate(model.bigIntegers, HttpModelType.parameter, "bigIntegers");
        requiredConstraintValidator.validateList(model.bigIntegers, HttpModelType.parameter, "bigIntegers");
        bigIntegersMaxNumberMaxBigIntegerNumberConstraintValidator.validateList(model.bigIntegers, HttpModelType.parameter, "bigIntegers");
        bigIntegersMaxSizeMaxSizeConstraintValidator.validate(model.bigIntegers, HttpModelType.parameter, "bigIntegers");
        bigIntegersMinNumberMinBigIntegerNumberConstraintValidator.validateList(model.bigIntegers, HttpModelType.parameter, "bigIntegers");
        bigIntegersMinSizeMinSizeConstraintValidator.validate(model.bigIntegers, HttpModelType.parameter, "bigIntegers");
        bigIntegersSizeSizeConstraintValidator.validate(model.bigIntegers, HttpModelType.parameter, "bigIntegers");
        uniqueItemsConstraintValidator.validate(model.bigIntegers, HttpModelType.parameter, "bigIntegers");

        requiredListConstraintValidator.validate(model.strings, HttpModelType.parameter, "strings");
        requiredConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsBase64URLEncodedBase64URLEncodedConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsCountryCodeCountryCodeConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        emailConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsEnumerationEnumerationStringConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        hostNameConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsIPIPConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsLatinAlphabetOnlyLatinAlphabetOnlyConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsLengthLengthConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        lowercaseConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsMaxLengthMaxLengthConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsMaxSizeMaxSizeConstraintValidator.validate(model.strings, HttpModelType.parameter, "strings");
        stringsMinLengthMinLengthConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsMinSizeMinSizeConstraintValidator.validate(model.strings, HttpModelType.parameter, "strings");
        stringsPatternPatternConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsPhonePhoneConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsSizeSizeConstraintValidator.validate(model.strings, HttpModelType.parameter, "strings");
        skypeConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsTelegramTelegramConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        uRIConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        uRLEncodedConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        uniqueItemsConstraintValidator.validate(model.strings, HttpModelType.parameter, "strings");
        uppercaseConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsViberViberConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");
        stringsWhatsAppWhatsAppConstraintValidator.validateList(model.strings, HttpModelType.parameter, "strings");

        requiredListConstraintValidator.validate(model.instants, HttpModelType.parameter, "instants");
        requiredConstraintValidator.validateList(model.instants, HttpModelType.parameter, "instants");
        futureInstantConstraintValidator.validateList(model.instants, HttpModelType.parameter, "instants");
        futureOrPresentInstantConstraintValidator.validateList(model.instants, HttpModelType.parameter, "instants");
        instantsMaxSizeMaxSizeConstraintValidator.validate(model.instants, HttpModelType.parameter, "instants");
        instantsMinSizeMinSizeConstraintValidator.validate(model.instants, HttpModelType.parameter, "instants");
        pastInstantConstraintValidator.validateList(model.instants, HttpModelType.parameter, "instants");
        pastOrPresentInstantConstraintValidator.validateList(model.instants, HttpModelType.parameter, "instants");
        instantsSizeSizeConstraintValidator.validate(model.instants, HttpModelType.parameter, "instants");
        instantsTruncatedTimeTruncatedTimeInstantConstraintValidator.validateList(model.instants, HttpModelType.parameter, "instants");
        uniqueItemsConstraintValidator.validate(model.instants, HttpModelType.parameter, "instants");

        requiredListConstraintValidator.validate(model.colors, HttpModelType.parameter, "colors");
        requiredConstraintValidator.validateList(model.colors, HttpModelType.parameter, "colors");
        colorsMaxSizeMaxSizeConstraintValidator.validate(model.colors, HttpModelType.parameter, "colors");
        colorsMinSizeMinSizeConstraintValidator.validate(model.colors, HttpModelType.parameter, "colors");
        colorsSizeSizeConstraintValidator.validate(model.colors, HttpModelType.parameter, "colors");
        colorsSubEnumSubEnumConstraintValidator.validateList(model.colors, HttpModelType.parameter, "colors");
        uniqueItemsConstraintValidator.validate(model.colors, HttpModelType.parameter, "colors");

        requiredConstraintValidator.validate(model.countryCodeAlpha2, HttpModelType.parameter, "countryCodeAlpha2");
        countryCodeAlpha2CountryCodeCountryCodeConstraintValidator.validate(model.countryCodeAlpha2, HttpModelType.parameter, "countryCodeAlpha2");

        requiredConstraintValidator.validate(model.countryCodeAlpha3, HttpModelType.parameter, "countryCodeAlpha3");
        countryCodeAlpha3CountryCodeCountryCodeConstraintValidator.validate(model.countryCodeAlpha3, HttpModelType.parameter, "countryCodeAlpha3");

        requiredConstraintValidator.validate(model.countryCodeNumeric, HttpModelType.parameter, "countryCodeNumeric");
        countryCodeNumericCountryCodeCountryCodeConstraintValidator.validate(model.countryCodeNumeric, HttpModelType.parameter, "countryCodeNumeric");

        requiredConstraintValidator.validate(model.base64URLEncodedBase, HttpModelType.parameter, "base64URLEncodedBase");
        base64URLEncodedBaseBase64URLEncodedBase64URLEncodedConstraintValidator.validate(model.base64URLEncodedBase, HttpModelType.parameter, "base64URLEncodedBase");

        requiredConstraintValidator.validate(model.base64URLEncodedUrl, HttpModelType.parameter, "base64URLEncodedUrl");
        base64URLEncodedUrlBase64URLEncodedBase64URLEncodedConstraintValidator.validate(model.base64URLEncodedUrl, HttpModelType.parameter, "base64URLEncodedUrl");

        requiredConstraintValidator.validate(model.ip, HttpModelType.parameter, "ip");
        ipIPIPConstraintValidator.validate(model.ip, HttpModelType.parameter, "ip");

        requiredConstraintValidator.validate(model.ip4, HttpModelType.parameter, "ip4");
        ip4IPIPConstraintValidator.validate(model.ip4, HttpModelType.parameter, "ip4");

        requiredConstraintValidator.validate(model.ip6, HttpModelType.parameter, "ip6");
        ip6IPIPConstraintValidator.validate(model.ip6, HttpModelType.parameter, "ip6");

        requiredConstraintValidator.validate(model.lat111km, HttpModelType.parameter, "lat111km");
        lat111kmLatLatConstraintValidator.validate(model.lat111km, HttpModelType.parameter, "lat111km");

        requiredConstraintValidator.validate(model.lng111km, HttpModelType.parameter, "lng111km");
        lng111kmLngLngConstraintValidator.validate(model.lng111km, HttpModelType.parameter, "lng111km");

        requiredConstraintValidator.validate(model.lat11km, HttpModelType.parameter, "lat11km");
        lat11kmLatLatConstraintValidator.validate(model.lat11km, HttpModelType.parameter, "lat11km");

        requiredConstraintValidator.validate(model.lng11km, HttpModelType.parameter, "lng11km");
        lng11kmLngLngConstraintValidator.validate(model.lng11km, HttpModelType.parameter, "lng11km");

        requiredConstraintValidator.validate(model.lat1km, HttpModelType.parameter, "lat1km");
        lat1kmLatLatConstraintValidator.validate(model.lat1km, HttpModelType.parameter, "lat1km");

        requiredConstraintValidator.validate(model.lng1km, HttpModelType.parameter, "lng1km");
        lng1kmLngLngConstraintValidator.validate(model.lng1km, HttpModelType.parameter, "lng1km");

        requiredConstraintValidator.validate(model.lat111m, HttpModelType.parameter, "lat111m");
        lat111mLatLatConstraintValidator.validate(model.lat111m, HttpModelType.parameter, "lat111m");

        requiredConstraintValidator.validate(model.lng111m, HttpModelType.parameter, "lng111m");
        lng111mLngLngConstraintValidator.validate(model.lng111m, HttpModelType.parameter, "lng111m");

        requiredConstraintValidator.validate(model.lat11m, HttpModelType.parameter, "lat11m");
        lat11mLatLatConstraintValidator.validate(model.lat11m, HttpModelType.parameter, "lat11m");

        requiredConstraintValidator.validate(model.lng11m, HttpModelType.parameter, "lng11m");
        lng11mLngLngConstraintValidator.validate(model.lng11m, HttpModelType.parameter, "lng11m");

        requiredConstraintValidator.validate(model.lat1m, HttpModelType.parameter, "lat1m");
        lat1mLatLatConstraintValidator.validate(model.lat1m, HttpModelType.parameter, "lat1m");

        requiredConstraintValidator.validate(model.lng1m, HttpModelType.parameter, "lng1m");
        lng1mLngLngConstraintValidator.validate(model.lng1m, HttpModelType.parameter, "lng1m");

        requiredConstraintValidator.validate(model.lat11cm, HttpModelType.parameter, "lat11cm");
        lat11cmLatLatConstraintValidator.validate(model.lat11cm, HttpModelType.parameter, "lat11cm");

        requiredConstraintValidator.validate(model.lng11cm, HttpModelType.parameter, "lng11cm");
        lng11cmLngLngConstraintValidator.validate(model.lng11cm, HttpModelType.parameter, "lng11cm");

        requiredConstraintValidator.validate(model.lat1cm, HttpModelType.parameter, "lat1cm");
        lat1cmLatLatConstraintValidator.validate(model.lat1cm, HttpModelType.parameter, "lat1cm");

        requiredConstraintValidator.validate(model.lng1cm, HttpModelType.parameter, "lng1cm");
        lng1cmLngLngConstraintValidator.validate(model.lng1cm, HttpModelType.parameter, "lng1cm");
    }
}
