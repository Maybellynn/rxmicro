package io.rxmicro.examples.rest.controller.routing;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by rxmicro annotation processor
 */
public final class $$RoutingUsingHttpBody extends AbstractRestController {

    private RoutingUsingHttpBody restController;

    private $$VirtualRoutingUsingHttpBodyRequestModelReader virtualRoutingUsingHttpBodyRequestModelReader;

    private $$VirtualRoutingUsingHttpBodyRequest2ModelReader virtualRoutingUsingHttpBodyRequest2ModelReader;

    @Override
    protected void postConstruct() {
        restController = new RoutingUsingHttpBody();
        virtualRoutingUsingHttpBodyRequestModelReader = new $$VirtualRoutingUsingHttpBodyRequestModelReader();
        virtualRoutingUsingHttpBodyRequest2ModelReader = new $$VirtualRoutingUsingHttpBodyRequest2ModelReader();
    }

    @Override
    public Class<?> getRestControllerClass() {
        return RoutingUsingHttpBody.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "handleRequestsWithoutBody(java.lang.String)",
                        this::handleRequestsWithoutBody,
                        false,
                        new ExactUrlRequestMappingRule(
                                "DELETE",
                                "/",
                                false
                        ),
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/",
                                false
                        ),
                        new ExactUrlRequestMappingRule(
                                "HEAD",
                                "/",
                                false
                        ),
                        new ExactUrlRequestMappingRule(
                                "OPTIONS",
                                "/",
                                false
                        ),
                        new ExactUrlRequestMappingRule(
                                "POST",
                                "/",
                                false
                        ),
                        new ExactUrlRequestMappingRule(
                                "PATCH",
                                "/",
                                false
                        ),
                        new ExactUrlRequestMappingRule(
                                "PUT",
                                "/",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "handleRequestsWithBody(java.lang.String)",
                        this::handleRequestsWithBody,
                        false,
                        new ExactUrlRequestMappingRule(
                                "POST",
                                "/",
                                true
                        ),
                        new ExactUrlRequestMappingRule(
                                "PATCH",
                                "/",
                                true
                        ),
                        new ExactUrlRequestMappingRule(
                                "PUT",
                                "/",
                                true
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> handleRequestsWithoutBody(final PathVariableMapping pathVariableMapping,
                                                                    final HttpRequest request) {
        final $$VirtualRoutingUsingHttpBodyRequest req = virtualRoutingUsingHttpBodyRequestModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        restController.handleRequestsWithoutBody(req.parameter);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> handleRequestsWithBody(final PathVariableMapping pathVariableMapping,
                                                                 final HttpRequest request) {
        final $$VirtualRoutingUsingHttpBodyRequest2 req = virtualRoutingUsingHttpBodyRequest2ModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        restController.handleRequestsWithBody(req.parameter);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
