package io.rxmicro.examples.rest.controller.handlers;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;
import org.junit.runner.Request;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RestControllerWithoutBody extends AbstractRestController {

    private RestControllerWithoutBody restController;

    private $$VirtualWithoutBodyRequestServerModelReader virtualWithoutBodyRequestServerModelReader;

    private $$VirtualWithoutBodyRequest4ServerModelReader virtualWithoutBodyRequest4ServerModelReader;

    private $$VirtualWithoutBodyRequest5ServerModelReader virtualWithoutBodyRequest5ServerModelReader;

    private $$VirtualWithoutBodyRequest2ServerModelReader virtualWithoutBodyRequest2ServerModelReader;

    private $$VirtualWithoutBodyRequest3ServerModelReader virtualWithoutBodyRequest3ServerModelReader;

    private $$RequestServerModelReader requestServerModelReader;

    private HttpResponse mono1NotFoundResponse;

    private HttpResponse mono2NotFoundResponse;

    private HttpResponse mono4NotFoundResponse;

    @Override
    protected void postConstruct() {
        restController = new RestControllerWithoutBody();
        virtualWithoutBodyRequestServerModelReader = new $$VirtualWithoutBodyRequestServerModelReader();
        virtualWithoutBodyRequest4ServerModelReader = new $$VirtualWithoutBodyRequest4ServerModelReader();
        virtualWithoutBodyRequest5ServerModelReader = new $$VirtualWithoutBodyRequest5ServerModelReader();
        virtualWithoutBodyRequest2ServerModelReader = new $$VirtualWithoutBodyRequest2ServerModelReader();
        virtualWithoutBodyRequest3ServerModelReader = new $$VirtualWithoutBodyRequest3ServerModelReader();
        requestServerModelReader = new $$RequestServerModelReader();
        mono1NotFoundResponse = notFound("Not Found");
        mono2NotFoundResponse = notFound("Not Found");
        mono4NotFoundResponse = notFound("Not Found");
    }

    @Override
    public Class<?> getRestControllerClass() {
        return RestControllerWithoutBody.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "void1",
                        List.of(),
                        this::void1,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/void/void1",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "void2",
                        List.of(
                                io.rxmicro.examples.rest.controller.handlers.Request.class
                        ),
                        this::void2,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/void/void2",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "void3",
                        List.of(
                                java.lang.String.class
                        ),
                        this::void3,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/void/void3",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completedFuture1",
                        List.of(),
                        this::completedFuture1,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/jse/completedFuture1",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completedFuture1",
                        List.of(
                                io.rxmicro.examples.rest.controller.handlers.Request.class
                        ),
                        this::completedFuture1Request,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/jse/completedFuture2",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completedFuture1",
                        List.of(
                                java.lang.String.class
                        ),
                        this::completedFuture1String,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/jse/completedFuture3",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completionStage1",
                        List.of(),
                        this::completionStage1,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/jse/completionStage1",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completionStage2",
                        List.of(
                                io.rxmicro.examples.rest.controller.handlers.Request.class
                        ),
                        this::completionStage2,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/jse/completionStage2",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completionStage3",
                        List.of(
                                java.lang.String.class
                        ),
                        this::completionStage3,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/jse/completionStage3",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "mono1",
                        List.of(),
                        this::mono1,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/spring-reactor/mono1",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "mono2",
                        List.of(
                                java.lang.String.class
                        ),
                        this::mono2,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/spring-reactor/mono2",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "mono4",
                        List.of(
                                io.rxmicro.examples.rest.controller.handlers.Request.class
                        ),
                        this::mono4,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/spring-reactor/mono3",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completable1",
                        List.of(),
                        this::completable1,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/rxjava3/completable1",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completable2",
                        List.of(
                                io.rxmicro.examples.rest.controller.handlers.Request.class
                        ),
                        this::completable2,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/rxjava3/completable2",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "completable3",
                        List.of(
                                java.lang.String.class
                        ),
                        this::completable3,
                        false,
                        new ExactUrlRequestMappingRule(
                                "GET",
                                "/rxjava3/completable3",
                                false
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> void1(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        restController.void1();
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> void2(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final Request req = requestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        restController.void2(req);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> void3(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final $$VirtualWithoutBodyRequest req = virtualWithoutBodyRequestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        restController.void3(req.requestParameter);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completedFuture1(final PathVariableMapping pathVariableMapping,
                                                           final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completedFuture1()
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completedFuture1Request(final PathVariableMapping pathVariableMapping,
                                                                  final HttpRequest request) {
        final Request req = requestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completedFuture1(req)
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completedFuture1String(final PathVariableMapping pathVariableMapping,
                                                                 final HttpRequest request) {
        final $$VirtualWithoutBodyRequest2 req = virtualWithoutBodyRequest2ServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completedFuture1(req.requestParameter)
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completionStage1(final PathVariableMapping pathVariableMapping,
                                                           final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completionStage1()
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completionStage2(final PathVariableMapping pathVariableMapping,
                                                           final HttpRequest request) {
        final Request req = requestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completionStage2(req)
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completionStage3(final PathVariableMapping pathVariableMapping,
                                                           final HttpRequest request) {
        final $$VirtualWithoutBodyRequest3 req = virtualWithoutBodyRequest3ServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completionStage3(req.requestParameter)
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> mono1(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.mono1()
                .toFuture()
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> mono2(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final $$VirtualWithoutBodyRequest4 req = virtualWithoutBodyRequest4ServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.mono2(req.requestParameter)
                .toFuture()
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> mono4(final PathVariableMapping pathVariableMapping,
                                                final HttpRequest request) {
        final Request req = requestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.mono4(req)
                .toFuture()
                .thenApply(nothing -> buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completable1(final PathVariableMapping pathVariableMapping,
                                                       final HttpRequest request) {
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completable1()
                .toCompletionStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completable2(final PathVariableMapping pathVariableMapping,
                                                       final HttpRequest request) {
        final Request req = requestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completable2(req)
                .toCompletionStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> completable3(final PathVariableMapping pathVariableMapping,
                                                       final HttpRequest request) {
        final $$VirtualWithoutBodyRequest5 req = virtualWithoutBodyRequest5ServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.completable3(req.requestParameter)
                .toCompletionStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
