package io.rxmicro.examples.rest.controller.map.model.type.model.nested;

import io.rxmicro.examples.rest.controller.map.model.type.model.Status;
import io.rxmicro.exchange.json.detail.ModelFromJsonConverter;

import java.util.Map;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$NestedModelFromJsonConverter extends ModelFromJsonConverter<Nested> {

    @Override
    public Nested fromJsonObject(final Map<String, Object> params) {
        final Nested model = new Nested();
        model.booleanData = toBooleanMap(params.get("booleanData"), "booleanData");
        model.byteData = toByteMap(params.get("byteData"), "byteData");
        model.shortData = toShortMap(params.get("shortData"), "shortData");
        model.integerData = toIntegerMap(params.get("integerData"), "integerData");
        model.longData = toLongMap(params.get("longData"), "longData");
        model.bigIntegerData = toBigIntegerMap(params.get("bigIntegerData"), "bigIntegerData");
        model.floatData = toFloatMap(params.get("floatData"), "floatData");
        model.doubleData = toDoubleMap(params.get("doubleData"), "doubleData");
        model.bigDecimalData = toBigDecimalMap(params.get("bigDecimalData"), "bigDecimalData");
        model.characterData = toCharacterMap(params.get("characterData"), "characterData");
        model.stringData = toStringMap(params.get("stringData"), "stringData");
        model.enumData = toEnumMap(Status.class, params.get("enumData"), "enumData");
        model.instantData = toInstantMap(params.get("instantData"), "instantData");
        return model;
    }
}
