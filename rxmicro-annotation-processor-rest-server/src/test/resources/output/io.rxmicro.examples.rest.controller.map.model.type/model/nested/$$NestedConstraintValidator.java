package io.rxmicro.examples.rest.controller.map.model.type.model.nested;

import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredMapConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$NestedConstraintValidator implements ConstraintValidator<Nested> {

    private final RequiredMapConstraintValidator requiredMapConstraintValidator =
            getStatelessValidator(RequiredMapConstraintValidator.class);

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    @Override
    public void validateNonNull(final Nested model,
                                final ModelType httpModelType,
                                final String name) {
        requiredMapConstraintValidator.validate(model.booleanData, HttpModelType.PARAMETER, "booleanData");
        requiredConstraintValidator.validateMapValues(model.booleanData, HttpModelType.PARAMETER, "booleanData");

        requiredMapConstraintValidator.validate(model.byteData, HttpModelType.PARAMETER, "byteData");
        requiredConstraintValidator.validateMapValues(model.byteData, HttpModelType.PARAMETER, "byteData");

        requiredMapConstraintValidator.validate(model.shortData, HttpModelType.PARAMETER, "shortData");
        requiredConstraintValidator.validateMapValues(model.shortData, HttpModelType.PARAMETER, "shortData");

        requiredMapConstraintValidator.validate(model.integerData, HttpModelType.PARAMETER, "integerData");
        requiredConstraintValidator.validateMapValues(model.integerData, HttpModelType.PARAMETER, "integerData");

        requiredMapConstraintValidator.validate(model.longData, HttpModelType.PARAMETER, "longData");
        requiredConstraintValidator.validateMapValues(model.longData, HttpModelType.PARAMETER, "longData");

        requiredMapConstraintValidator.validate(model.bigIntegerData, HttpModelType.PARAMETER, "bigIntegerData");
        requiredConstraintValidator.validateMapValues(model.bigIntegerData, HttpModelType.PARAMETER, "bigIntegerData");

        requiredMapConstraintValidator.validate(model.floatData, HttpModelType.PARAMETER, "floatData");
        requiredConstraintValidator.validateMapValues(model.floatData, HttpModelType.PARAMETER, "floatData");

        requiredMapConstraintValidator.validate(model.doubleData, HttpModelType.PARAMETER, "doubleData");
        requiredConstraintValidator.validateMapValues(model.doubleData, HttpModelType.PARAMETER, "doubleData");

        requiredMapConstraintValidator.validate(model.bigDecimalData, HttpModelType.PARAMETER, "bigDecimalData");
        requiredConstraintValidator.validateMapValues(model.bigDecimalData, HttpModelType.PARAMETER, "bigDecimalData");

        requiredMapConstraintValidator.validate(model.characterData, HttpModelType.PARAMETER, "characterData");
        requiredConstraintValidator.validateMapValues(model.characterData, HttpModelType.PARAMETER, "characterData");

        requiredMapConstraintValidator.validate(model.stringData, HttpModelType.PARAMETER, "stringData");
        requiredAndNotEmptyStringConstraintValidator.validateMapValues(model.stringData, HttpModelType.PARAMETER, "stringData");

        requiredMapConstraintValidator.validate(model.enumData, HttpModelType.PARAMETER, "enumData");
        requiredConstraintValidator.validateMapValues(model.enumData, HttpModelType.PARAMETER, "enumData");

        requiredMapConstraintValidator.validate(model.instantData, HttpModelType.PARAMETER, "instantData");
        requiredConstraintValidator.validateMapValues(model.instantData, HttpModelType.PARAMETER, "instantData");
    }
}
