package io.rxmicro.examples.rest.controller.complex.model.model;

import io.rxmicro.examples.rest.controller.complex.model.model.nested.$$NestedModelConstraintValidator;
import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ComplexModelConstraintValidator implements ConstraintValidator<ComplexModel> {

    private final $$NestedModelConstraintValidator nestedModelConstraintValidator =
            new $$NestedModelConstraintValidator();

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    @Override
    public void validateNonNull(final ComplexModel model,
                                final ModelType httpModelType,
                                final String name) {
        requiredConstraintValidator.validate(model.status, HttpModelType.PARAMETER, "status");

        requiredListConstraintValidator.validate(model.statusList, HttpModelType.PARAMETER, "statusList");
        requiredConstraintValidator.validateIterable(model.statusList, HttpModelType.PARAMETER, "statusList");

        requiredConstraintValidator.validate(model.aBoolean, HttpModelType.PARAMETER, "aBoolean");

        requiredListConstraintValidator.validate(model.booleanList, HttpModelType.PARAMETER, "booleanList");
        requiredConstraintValidator.validateIterable(model.booleanList, HttpModelType.PARAMETER, "booleanList");

        requiredConstraintValidator.validate(model.aByte, HttpModelType.PARAMETER, "aByte");

        requiredListConstraintValidator.validate(model.byteList, HttpModelType.PARAMETER, "byteList");
        requiredConstraintValidator.validateIterable(model.byteList, HttpModelType.PARAMETER, "byteList");

        requiredConstraintValidator.validate(model.aShort, HttpModelType.PARAMETER, "aShort");

        requiredListConstraintValidator.validate(model.shortList, HttpModelType.PARAMETER, "shortList");
        requiredConstraintValidator.validateIterable(model.shortList, HttpModelType.PARAMETER, "shortList");

        requiredConstraintValidator.validate(model.aInteger, HttpModelType.PARAMETER, "aInteger");

        requiredListConstraintValidator.validate(model.integerList, HttpModelType.PARAMETER, "integerList");
        requiredConstraintValidator.validateIterable(model.integerList, HttpModelType.PARAMETER, "integerList");

        requiredConstraintValidator.validate(model.aLong, HttpModelType.PARAMETER, "aLong");

        requiredListConstraintValidator.validate(model.longList, HttpModelType.PARAMETER, "longList");
        requiredConstraintValidator.validateIterable(model.longList, HttpModelType.PARAMETER, "longList");

        requiredConstraintValidator.validate(model.bigInteger, HttpModelType.PARAMETER, "bigInteger");

        requiredListConstraintValidator.validate(model.bigIntegerList, HttpModelType.PARAMETER, "bigIntegerList");
        requiredConstraintValidator.validateIterable(model.bigIntegerList, HttpModelType.PARAMETER, "bigIntegerList");

        requiredConstraintValidator.validate(model.aFloat, HttpModelType.PARAMETER, "aFloat");

        requiredListConstraintValidator.validate(model.floatList, HttpModelType.PARAMETER, "floatList");
        requiredConstraintValidator.validateIterable(model.floatList, HttpModelType.PARAMETER, "floatList");

        requiredConstraintValidator.validate(model.aDouble, HttpModelType.PARAMETER, "aDouble");

        requiredListConstraintValidator.validate(model.doubleList, HttpModelType.PARAMETER, "doubleList");
        requiredConstraintValidator.validateIterable(model.doubleList, HttpModelType.PARAMETER, "doubleList");

        requiredConstraintValidator.validate(model.bigDecimal, HttpModelType.PARAMETER, "bigDecimal");

        requiredListConstraintValidator.validate(model.bigDecimalList, HttpModelType.PARAMETER, "bigDecimalList");
        requiredConstraintValidator.validateIterable(model.bigDecimalList, HttpModelType.PARAMETER, "bigDecimalList");

        requiredConstraintValidator.validate(model.character, HttpModelType.PARAMETER, "character");

        requiredListConstraintValidator.validate(model.characterList, HttpModelType.PARAMETER, "characterList");
        requiredConstraintValidator.validateIterable(model.characterList, HttpModelType.PARAMETER, "characterList");

        requiredAndNotEmptyStringConstraintValidator.validate(model.string, HttpModelType.PARAMETER, "string");

        requiredListConstraintValidator.validate(model.stringList, HttpModelType.PARAMETER, "stringList");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.stringList, HttpModelType.PARAMETER, "stringList");

        requiredConstraintValidator.validate(model.instant, HttpModelType.PARAMETER, "instant");

        requiredListConstraintValidator.validate(model.instantList, HttpModelType.PARAMETER, "instantList");
        requiredConstraintValidator.validateIterable(model.instantList, HttpModelType.PARAMETER, "instantList");

        requiredConstraintValidator.validate(model.nested, HttpModelType.PARAMETER, "nested");
        nestedModelConstraintValidator.validate(model.nested, HttpModelType.PARAMETER, "nested");

        requiredListConstraintValidator.validate(model.nestedList, HttpModelType.PARAMETER, "nestedList");
        requiredConstraintValidator.validateIterable(model.nestedList, HttpModelType.PARAMETER, "nestedList");
        nestedModelConstraintValidator.validateIterable(model.nestedList, HttpModelType.PARAMETER, "nestedList");
    }
}
