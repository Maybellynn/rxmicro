package io.rxmicro.examples.rest.controller.complex.model;

import io.rxmicro.examples.rest.controller.complex.model.model.$$ComplexModelModelReader;
import io.rxmicro.examples.rest.controller.complex.model.model.$$ComplexModelModelWriter;
import io.rxmicro.examples.rest.controller.complex.model.model.ComplexModel;
import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.concurrent.CompletionStage;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$MicroService extends AbstractRestController {

    private MicroService restController;

    private $$ComplexModelModelReader complexModelModelReader;

    private $$ComplexModelModelWriter complexModelModelWriter;

    @Override
    protected void postConstruct() {
        restController = new MicroService();
        complexModelModelReader = new $$ComplexModelModelReader();
        complexModelModelWriter = new $$ComplexModelModelWriter(restServerConfig.isHumanReadableOutput());
    }

    @Override
    public Class<?> getRestControllerClass() {
        return MicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "post(io.rxmicro.examples.rest.controller.complex.model.model.ComplexModel)",
                        this::post,
                        false,
                        new ExactUrlRequestMappingRule(
                                "POST",
                                "/",
                                true
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> post(final PathVariableMapping pathVariableMapping,
                                               final HttpRequest request) {
        final ComplexModel req = complexModelModelReader.read(pathVariableMapping, request, request.contentExists());
        final HttpHeaders headers = HttpHeaders.of();
        return restController.post(req)
                .thenApply(response -> buildResponse(response, 200, headers));
    }

    private HttpResponse buildResponse(final ComplexModel model,
                                       final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        complexModelModelWriter.write(model, response);
        return response;
    }
}
