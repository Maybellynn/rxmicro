package rxmicro.examples.rest.controller.static_resources.complex;

import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerAggregator;
import io.rxmicro.rest.server.detail.component.StaticResourceRestController;
import io.rxmicro.rest.server.detail.model.mapping.resource.AnyOneOrManyUrlPathMatchTemplate;
import io.rxmicro.rest.server.detail.model.mapping.resource.AnySingleUrlPathMatchTemplate;
import io.rxmicro.rest.server.detail.model.mapping.resource.EndsWithAndOneOrMorePathFragmentUrlPathMatchTemplate;
import io.rxmicro.rest.server.detail.model.mapping.resource.EndsWithAndSinglePathFragmentUrlPathMatchTemplate;
import io.rxmicro.rest.server.detail.model.mapping.resource.StartsWithAndOneOrMorePathFragmentUrlPathMatchTemplate;
import io.rxmicro.rest.server.detail.model.mapping.resource.StartsWithAndSinglePathFragmentUrlPathMatchTemplate;

import java.util.List;
import java.util.Map;

import static io.rxmicro.rest.server.detail.component.CustomExceptionServerModelWriters.CUSTOM_EXCEPTION_MODEL_WRITERS_CUSTOMIZER_CLASS_NAME;
import static io.rxmicro.runtime.detail.ChildrenInitializer.invokeAllStaticSections;
import static java.util.Map.entry;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RestControllerAggregatorImpl extends RestControllerAggregator {

    static {
        $$EnvironmentCustomizer.customize();
        invokeAllStaticSections(null, CUSTOM_EXCEPTION_MODEL_WRITERS_CUSTOMIZER_CLASS_NAME);
    }

    @Override
    protected List<AbstractRestController> listAllRestControllers() {
        return List.of(
                new io.rxmicro.examples.rest.controller.static_resources.complex.$$RestController(),
                new StaticResourceRestController(
                        List.of(
                                AnyOneOrManyUrlPathMatchTemplate.INSTANCE,
                                AnySingleUrlPathMatchTemplate.INSTANCE,
                                new EndsWithAndOneOrMorePathFragmentUrlPathMatchTemplate("**.log"),
                                new StartsWithAndOneOrMorePathFragmentUrlPathMatchTemplate("/static/**"),
                                new EndsWithAndSinglePathFragmentUrlPathMatchTemplate("*.txt"),
                                new StartsWithAndSinglePathFragmentUrlPathMatchTemplate("/static*")
                        ),
                        Map.of(),
                        List.of(
                                "/custom1",
                                "/custom2",
                                "/parent/child/link.txt"
                        ),
                        Map.ofEntries(
                                entry("/custom1", "custom.txt"),
                                entry("/custom2", "custom.txt")
                        )
                )
        );
    }
}
