package io.rxmicro.examples.rest.controller.model.field.access.internals;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualInternalsMicroService extends AbstractRestController {

    private VirtualInternalsMicroService restController;

    private $$VirtualVirtualInternalsRequestServerModelReader virtualVirtualInternalsRequestServerModelReader;

    @Override
    protected void postConstruct() {
        restController = new VirtualInternalsMicroService();
        virtualVirtualInternalsRequestServerModelReader = new $$VirtualVirtualInternalsRequestServerModelReader();
    }

    @Override
    public Class<?> getRestControllerClass() {
        return VirtualInternalsMicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "put",
                        List.of(
                                java.lang.String.class, java.net.SocketAddress.class, java.lang.String.class, java.lang.String.class, io.rxmicro.http.HttpVersion.class, io.rxmicro.http.HttpHeaders.class, byte[].class, io.rxmicro.rest.server.detail.model.HttpRequest.class, java.lang.String.class
                        ),
                        this::put,
                        false,
                        new ExactUrlRequestMappingRule(
                                "PUT",
                                "/internals/virtual",
                                true
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> put(final PathVariableMapping pathVariableMapping,
                                              final HttpRequest request) {
        final $$VirtualVirtualInternalsRequest req = virtualVirtualInternalsRequestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        restController.put(req.internalRemoteAddress1, req.internalRemoteAddress2, req.internalUrlPath, req.internalRequestMethod, req.internalHttpVersion, req.internalRequestHeaders, req.internalRequestBody, req.internalRequest, req.internalRequestId);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
