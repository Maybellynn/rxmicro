package io.rxmicro.examples.rest.controller.model.field.access.headers.gettersetter;

import io.rxmicro.examples.rest.controller.model.field.access.Status;
import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RequestModelReader extends ModelReader<Request> {

    @Override
    public Request read(final PathVariableMapping pathVariableMapping,
                        final HttpRequest request,
                        final boolean readParametersFromBody) {
        final Request model = new Request();
        readPrimitivesToModel(pathVariableMapping, request, model);
        return model;
    }

    public void readPrimitivesToModel(final PathVariableMapping pathVariableMapping,
                                      final HttpRequest request,
                                      final Request model) {
        final HttpHeaders httpHeaders = request.getHeaders();
        model.setBooleanHeader(toBoolean(httpHeaders.getValue("booleanHeader"), HttpModelType.HEADER, "booleanHeader"));
        model.setByteHeader(toByte(httpHeaders.getValue("byteHeader"), HttpModelType.HEADER, "byteHeader"));
        model.setShortHeader(toShort(httpHeaders.getValue("shortHeader"), HttpModelType.HEADER, "shortHeader"));
        model.setIntHeader(toInteger(httpHeaders.getValue("intHeader"), HttpModelType.HEADER, "intHeader"));
        model.setLongHeader(toLong(httpHeaders.getValue("longHeader"), HttpModelType.HEADER, "longHeader"));
        model.setBigIntHeader(toBigInteger(httpHeaders.getValue("bigIntHeader"), HttpModelType.HEADER, "bigIntHeader"));
        model.setFloatHeader(toFloat(httpHeaders.getValue("floatHeader"), HttpModelType.HEADER, "floatHeader"));
        model.setDoubleHeader(toDouble(httpHeaders.getValue("doubleHeader"), HttpModelType.HEADER, "doubleHeader"));
        model.setDecimalHeader(toBigDecimal(httpHeaders.getValue("decimalHeader"), HttpModelType.HEADER, "decimalHeader"));
        model.setCharHeader(toCharacter(httpHeaders.getValue("charHeader"), HttpModelType.HEADER, "charHeader"));
        model.setStringHeader(toString(httpHeaders.getValue("stringHeader"), HttpModelType.HEADER, "stringHeader"));
        model.setInstantHeader(toInstant(httpHeaders.getValue("instantHeader"), HttpModelType.HEADER, "instantHeader"));
        model.setEnumHeader(toEnum(Status.class, httpHeaders.getValue("enumHeader"), HttpModelType.HEADER, "enumHeader"));
        model.setBooleanHeaderList(toBooleanList(httpHeaders.getValues("booleanHeaderList"), HttpModelType.HEADER, "booleanHeaderList"));
        model.setByteHeaderList(toByteList(httpHeaders.getValues("byteHeaderList"), HttpModelType.HEADER, "byteHeaderList"));
        model.setShortHeaderList(toShortList(httpHeaders.getValues("shortHeaderList"), HttpModelType.HEADER, "shortHeaderList"));
        model.setIntHeaderList(toIntegerList(httpHeaders.getValues("intHeaderList"), HttpModelType.HEADER, "intHeaderList"));
        model.setLongHeaderList(toLongList(httpHeaders.getValues("longHeaderList"), HttpModelType.HEADER, "longHeaderList"));
        model.setBigIntHeaderList(toBigIntegerList(httpHeaders.getValues("bigIntHeaderList"), HttpModelType.HEADER, "bigIntHeaderList"));
        model.setFloatHeaderList(toFloatList(httpHeaders.getValues("floatHeaderList"), HttpModelType.HEADER, "floatHeaderList"));
        model.setDoubleHeaderList(toDoubleList(httpHeaders.getValues("doubleHeaderList"), HttpModelType.HEADER, "doubleHeaderList"));
        model.setDecimalHeaderList(toBigDecimalList(httpHeaders.getValues("decimalHeaderList"), HttpModelType.HEADER, "decimalHeaderList"));
        model.setCharHeaderList(toCharacterList(httpHeaders.getValues("charHeaderList"), HttpModelType.HEADER, "charHeaderList"));
        model.setStringHeaderList(toStringList(httpHeaders.getValues("stringHeaderList"), HttpModelType.HEADER, "stringHeaderList"));
        model.setInstantHeaderList(toInstantList(httpHeaders.getValues("instantHeaderList"), HttpModelType.HEADER, "instantHeaderList"));
        model.setEnumHeaderList(toEnumList(Status.class, httpHeaders.getValues("enumHeaderList"), HttpModelType.HEADER, "enumHeaderList"));
        model.setBooleanHeaderSet(toBooleanSet(httpHeaders.getValues("booleanHeaderSet"), HttpModelType.HEADER, "booleanHeaderSet"));
        model.setByteHeaderSet(toByteSet(httpHeaders.getValues("byteHeaderSet"), HttpModelType.HEADER, "byteHeaderSet"));
        model.setShortHeaderSet(toShortSet(httpHeaders.getValues("shortHeaderSet"), HttpModelType.HEADER, "shortHeaderSet"));
        model.setIntHeaderSet(toIntegerSet(httpHeaders.getValues("intHeaderSet"), HttpModelType.HEADER, "intHeaderSet"));
        model.setLongHeaderSet(toLongSet(httpHeaders.getValues("longHeaderSet"), HttpModelType.HEADER, "longHeaderSet"));
        model.setBigIntHeaderSet(toBigIntegerSet(httpHeaders.getValues("bigIntHeaderSet"), HttpModelType.HEADER, "bigIntHeaderSet"));
        model.setFloatHeaderSet(toFloatSet(httpHeaders.getValues("floatHeaderSet"), HttpModelType.HEADER, "floatHeaderSet"));
        model.setDoubleHeaderSet(toDoubleSet(httpHeaders.getValues("doubleHeaderSet"), HttpModelType.HEADER, "doubleHeaderSet"));
        model.setDecimalHeaderSet(toBigDecimalSet(httpHeaders.getValues("decimalHeaderSet"), HttpModelType.HEADER, "decimalHeaderSet"));
        model.setCharHeaderSet(toCharacterSet(httpHeaders.getValues("charHeaderSet"), HttpModelType.HEADER, "charHeaderSet"));
        model.setStringHeaderSet(toStringSet(httpHeaders.getValues("stringHeaderSet"), HttpModelType.HEADER, "stringHeaderSet"));
        model.setInstantHeaderSet(toInstantSet(httpHeaders.getValues("instantHeaderSet"), HttpModelType.HEADER, "instantHeaderSet"));
        model.setEnumHeaderSet(toEnumSet(Status.class, httpHeaders.getValues("enumHeaderSet"), HttpModelType.HEADER, "enumHeaderSet"));
        model.setRequestIdHeader(toString(httpHeaders.getValue("Request-Id"), HttpModelType.HEADER, "Request-Id"));
    }
}
