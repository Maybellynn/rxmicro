package io.rxmicro.examples.rest.controller.model.field.access.headers.reflection;

import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;
import io.rxmicro.validation.validator.RequiredSetConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;
import static rxmicro.examples.rest.controller.model.field.access.$$Reflections.getFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ResponseConstraintValidator implements ConstraintValidator<Response> {

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final RequiredSetConstraintValidator requiredSetConstraintValidator =
            getStatelessValidator(RequiredSetConstraintValidator.class);

    @Override
    public void validateNonNull(final Response model,
                                final ModelType httpModelType,
                                final String name) {
        requiredConstraintValidator.validate((java.lang.Boolean) getFieldValue(model, "booleanHeader"), HttpModelType.HEADER, "booleanHeader");

        requiredConstraintValidator.validate((java.lang.Byte) getFieldValue(model, "byteHeader"), HttpModelType.HEADER, "byteHeader");

        requiredConstraintValidator.validate((java.lang.Short) getFieldValue(model, "shortHeader"), HttpModelType.HEADER, "shortHeader");

        requiredConstraintValidator.validate((java.lang.Integer) getFieldValue(model, "intHeader"), HttpModelType.HEADER, "intHeader");

        requiredConstraintValidator.validate((java.lang.Long) getFieldValue(model, "longHeader"), HttpModelType.HEADER, "longHeader");

        requiredConstraintValidator.validate((java.math.BigInteger) getFieldValue(model, "bigIntHeader"), HttpModelType.HEADER, "bigIntHeader");

        requiredConstraintValidator.validate((java.lang.Float) getFieldValue(model, "floatHeader"), HttpModelType.HEADER, "floatHeader");

        requiredConstraintValidator.validate((java.lang.Double) getFieldValue(model, "doubleHeader"), HttpModelType.HEADER, "doubleHeader");

        requiredConstraintValidator.validate((java.math.BigDecimal) getFieldValue(model, "decimalHeader"), HttpModelType.HEADER, "decimalHeader");

        requiredConstraintValidator.validate((java.lang.Character) getFieldValue(model, "charHeader"), HttpModelType.HEADER, "charHeader");

        requiredAndNotEmptyStringConstraintValidator.validate((java.lang.String) getFieldValue(model, "stringHeader"), HttpModelType.HEADER, "stringHeader");

        requiredConstraintValidator.validate((java.time.Instant) getFieldValue(model, "instantHeader"), HttpModelType.HEADER, "instantHeader");

        requiredConstraintValidator.validate((io.rxmicro.examples.rest.controller.model.field.access.Status) getFieldValue(model, "enumHeader"), HttpModelType.HEADER, "enumHeader");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Boolean>) getFieldValue(model, "booleanHeaderList"), HttpModelType.HEADER, "booleanHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Boolean>) getFieldValue(model, "booleanHeaderList"), HttpModelType.HEADER, "booleanHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Byte>) getFieldValue(model, "byteHeaderList"), HttpModelType.HEADER, "byteHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Byte>) getFieldValue(model, "byteHeaderList"), HttpModelType.HEADER, "byteHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Short>) getFieldValue(model, "shortHeaderList"), HttpModelType.HEADER, "shortHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Short>) getFieldValue(model, "shortHeaderList"), HttpModelType.HEADER, "shortHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Integer>) getFieldValue(model, "intHeaderList"), HttpModelType.HEADER, "intHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Integer>) getFieldValue(model, "intHeaderList"), HttpModelType.HEADER, "intHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Long>) getFieldValue(model, "longHeaderList"), HttpModelType.HEADER, "longHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Long>) getFieldValue(model, "longHeaderList"), HttpModelType.HEADER, "longHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.math.BigInteger>) getFieldValue(model, "bigIntHeaderList"), HttpModelType.HEADER, "bigIntHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.math.BigInteger>) getFieldValue(model, "bigIntHeaderList"), HttpModelType.HEADER, "bigIntHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Float>) getFieldValue(model, "floatHeaderList"), HttpModelType.HEADER, "floatHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Float>) getFieldValue(model, "floatHeaderList"), HttpModelType.HEADER, "floatHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Double>) getFieldValue(model, "doubleHeaderList"), HttpModelType.HEADER, "doubleHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Double>) getFieldValue(model, "doubleHeaderList"), HttpModelType.HEADER, "doubleHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.math.BigDecimal>) getFieldValue(model, "decimalHeaderList"), HttpModelType.HEADER, "decimalHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.math.BigDecimal>) getFieldValue(model, "decimalHeaderList"), HttpModelType.HEADER, "decimalHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Character>) getFieldValue(model, "charHeaderList"), HttpModelType.HEADER, "charHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Character>) getFieldValue(model, "charHeaderList"), HttpModelType.HEADER, "charHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.String>) getFieldValue(model, "stringHeaderList"), HttpModelType.HEADER, "stringHeaderList");
        requiredAndNotEmptyStringConstraintValidator.validateIterable((java.util.List<java.lang.String>) getFieldValue(model, "stringHeaderList"), HttpModelType.HEADER, "stringHeaderList");

        requiredListConstraintValidator.validate((java.util.List<java.time.Instant>) getFieldValue(model, "instantHeaderList"), HttpModelType.HEADER, "instantHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<java.time.Instant>) getFieldValue(model, "instantHeaderList"), HttpModelType.HEADER, "instantHeaderList");

        requiredListConstraintValidator.validate((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumHeaderList"), HttpModelType.HEADER, "enumHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumHeaderList"), HttpModelType.HEADER, "enumHeaderList");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Boolean>) getFieldValue(model, "booleanHeaderSet"), HttpModelType.HEADER, "booleanHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Boolean>) getFieldValue(model, "booleanHeaderSet"), HttpModelType.HEADER, "booleanHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Byte>) getFieldValue(model, "byteHeaderSet"), HttpModelType.HEADER, "byteHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Byte>) getFieldValue(model, "byteHeaderSet"), HttpModelType.HEADER, "byteHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Short>) getFieldValue(model, "shortHeaderSet"), HttpModelType.HEADER, "shortHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Short>) getFieldValue(model, "shortHeaderSet"), HttpModelType.HEADER, "shortHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Integer>) getFieldValue(model, "intHeaderSet"), HttpModelType.HEADER, "intHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Integer>) getFieldValue(model, "intHeaderSet"), HttpModelType.HEADER, "intHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Long>) getFieldValue(model, "longHeaderSet"), HttpModelType.HEADER, "longHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Long>) getFieldValue(model, "longHeaderSet"), HttpModelType.HEADER, "longHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.math.BigInteger>) getFieldValue(model, "bigIntHeaderSet"), HttpModelType.HEADER, "bigIntHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.math.BigInteger>) getFieldValue(model, "bigIntHeaderSet"), HttpModelType.HEADER, "bigIntHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Float>) getFieldValue(model, "floatHeaderSet"), HttpModelType.HEADER, "floatHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Float>) getFieldValue(model, "floatHeaderSet"), HttpModelType.HEADER, "floatHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Double>) getFieldValue(model, "doubleHeaderSet"), HttpModelType.HEADER, "doubleHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Double>) getFieldValue(model, "doubleHeaderSet"), HttpModelType.HEADER, "doubleHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.math.BigDecimal>) getFieldValue(model, "decimalHeaderSet"), HttpModelType.HEADER, "decimalHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.math.BigDecimal>) getFieldValue(model, "decimalHeaderSet"), HttpModelType.HEADER, "decimalHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Character>) getFieldValue(model, "charHeaderSet"), HttpModelType.HEADER, "charHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Character>) getFieldValue(model, "charHeaderSet"), HttpModelType.HEADER, "charHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.String>) getFieldValue(model, "stringHeaderSet"), HttpModelType.HEADER, "stringHeaderSet");
        requiredAndNotEmptyStringConstraintValidator.validateIterable((java.util.Set<java.lang.String>) getFieldValue(model, "stringHeaderSet"), HttpModelType.HEADER, "stringHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.time.Instant>) getFieldValue(model, "instantHeaderSet"), HttpModelType.HEADER, "instantHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.time.Instant>) getFieldValue(model, "instantHeaderSet"), HttpModelType.HEADER, "instantHeaderSet");

        requiredSetConstraintValidator.validate((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumHeaderSet"), HttpModelType.HEADER, "enumHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumHeaderSet"), HttpModelType.HEADER, "enumHeaderSet");

        requiredListConstraintValidator.validate((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "repeatingEnumHeaderList"), HttpModelType.HEADER, "repeatingEnumHeaderList");
        requiredConstraintValidator.validateIterable((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "repeatingEnumHeaderList"), HttpModelType.HEADER, "repeatingEnumHeaderList");

        requiredSetConstraintValidator.validate((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "repeatingEnumHeaderSet"), HttpModelType.HEADER, "repeatingEnumHeaderSet");
        requiredConstraintValidator.validateIterable((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "repeatingEnumHeaderSet"), HttpModelType.HEADER, "repeatingEnumHeaderSet");
    }
}
