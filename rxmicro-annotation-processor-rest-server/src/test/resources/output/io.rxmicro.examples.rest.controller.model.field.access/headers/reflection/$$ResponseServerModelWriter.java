package io.rxmicro.examples.rest.controller.model.field.access.headers.reflection;

import io.rxmicro.examples.rest.controller.model.field.access.Status;
import io.rxmicro.rest.server.detail.component.ServerModelWriter;
import io.rxmicro.rest.server.detail.model.HttpResponse;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.List;
import java.util.Set;

import static rxmicro.examples.rest.controller.model.field.access.$$Reflections.getFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ResponseServerModelWriter extends ServerModelWriter<Response> {

    public $$ResponseServerModelWriter(final boolean humanReadableOutput) {
        //do nothing
    }

    @Override
    public void write(final Response model,
                      final HttpResponse response) {
        writePrimitivesToResponse(model, response);
    }

    public void writePrimitivesToResponse(final Response model,
                                          final HttpResponse response) {
        response.setHeader("booleanHeader", (Boolean) getFieldValue(model, "booleanHeader"));
        response.setHeader("byteHeader", (Byte) getFieldValue(model, "byteHeader"));
        response.setHeader("shortHeader", (Short) getFieldValue(model, "shortHeader"));
        response.setHeader("intHeader", (Integer) getFieldValue(model, "intHeader"));
        response.setHeader("longHeader", (Long) getFieldValue(model, "longHeader"));
        response.setHeader("bigIntHeader", (BigInteger) getFieldValue(model, "bigIntHeader"));
        response.setHeader("floatHeader", (Float) getFieldValue(model, "floatHeader"));
        response.setHeader("doubleHeader", (Double) getFieldValue(model, "doubleHeader"));
        response.setHeader("decimalHeader", (BigDecimal) getFieldValue(model, "decimalHeader"));
        response.setHeader("charHeader", (Character) getFieldValue(model, "charHeader"));
        response.setHeader("stringHeader", (String) getFieldValue(model, "stringHeader"));
        response.setHeader("instantHeader", (Instant) getFieldValue(model, "instantHeader"));
        response.setHeader("enumHeader", (Status) getFieldValue(model, "enumHeader"));
        response.setHeader("booleanHeaderList", (List<Boolean>) getFieldValue(model, "booleanHeaderList"));
        response.setHeader("byteHeaderList", (List<Byte>) getFieldValue(model, "byteHeaderList"));
        response.setHeader("shortHeaderList", (List<Short>) getFieldValue(model, "shortHeaderList"));
        response.setHeader("intHeaderList", (List<Integer>) getFieldValue(model, "intHeaderList"));
        response.setHeader("longHeaderList", (List<Long>) getFieldValue(model, "longHeaderList"));
        response.setHeader("bigIntHeaderList", (List<BigInteger>) getFieldValue(model, "bigIntHeaderList"));
        response.setHeader("floatHeaderList", (List<Float>) getFieldValue(model, "floatHeaderList"));
        response.setHeader("doubleHeaderList", (List<Double>) getFieldValue(model, "doubleHeaderList"));
        response.setHeader("decimalHeaderList", (List<BigDecimal>) getFieldValue(model, "decimalHeaderList"));
        response.setHeader("charHeaderList", (List<Character>) getFieldValue(model, "charHeaderList"));
        response.setHeader("stringHeaderList", (List<String>) getFieldValue(model, "stringHeaderList"));
        response.setHeader("instantHeaderList", (List<Instant>) getFieldValue(model, "instantHeaderList"));
        response.setHeader("enumHeaderList", (List<Status>) getFieldValue(model, "enumHeaderList"));
        response.setHeader("booleanHeaderSet", (Set<Boolean>) getFieldValue(model, "booleanHeaderSet"));
        response.setHeader("byteHeaderSet", (Set<Byte>) getFieldValue(model, "byteHeaderSet"));
        response.setHeader("shortHeaderSet", (Set<Short>) getFieldValue(model, "shortHeaderSet"));
        response.setHeader("intHeaderSet", (Set<Integer>) getFieldValue(model, "intHeaderSet"));
        response.setHeader("longHeaderSet", (Set<Long>) getFieldValue(model, "longHeaderSet"));
        response.setHeader("bigIntHeaderSet", (Set<BigInteger>) getFieldValue(model, "bigIntHeaderSet"));
        response.setHeader("floatHeaderSet", (Set<Float>) getFieldValue(model, "floatHeaderSet"));
        response.setHeader("doubleHeaderSet", (Set<Double>) getFieldValue(model, "doubleHeaderSet"));
        response.setHeader("decimalHeaderSet", (Set<BigDecimal>) getFieldValue(model, "decimalHeaderSet"));
        response.setHeader("charHeaderSet", (Set<Character>) getFieldValue(model, "charHeaderSet"));
        response.setHeader("stringHeaderSet", (Set<String>) getFieldValue(model, "stringHeaderSet"));
        response.setHeader("instantHeaderSet", (Set<Instant>) getFieldValue(model, "instantHeaderSet"));
        response.setHeader("enumHeaderSet", (Set<Status>) getFieldValue(model, "enumHeaderSet"));
        for (final Status item : (List<Status>) getFieldValue(model, "repeatingEnumHeaderList")) {
            response.addHeader("repeatingEnumHeaderList", item);
        }
        for (final Status item : (Set<Status>) getFieldValue(model, "repeatingEnumHeaderSet")) {
            response.addHeader("repeatingEnumHeaderSet", item);
        }
    }
}
