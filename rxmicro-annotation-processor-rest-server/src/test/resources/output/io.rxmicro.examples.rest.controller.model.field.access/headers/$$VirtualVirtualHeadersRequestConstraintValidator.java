package io.rxmicro.examples.rest.controller.model.field.access.headers;

import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.NotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;
import io.rxmicro.validation.validator.RequiredSetConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualVirtualHeadersRequestConstraintValidator implements ConstraintValidator<$$VirtualVirtualHeadersRequest> {

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final RequiredSetConstraintValidator requiredSetConstraintValidator =
            getStatelessValidator(RequiredSetConstraintValidator.class);

    private final NotEmptyStringConstraintValidator notEmptyStringConstraintValidator =
            getStatelessValidator(NotEmptyStringConstraintValidator.class);

    @Override
    public void validateNonNull(final $$VirtualVirtualHeadersRequest model,
                                final ModelType httpModelType,
                                final String name) {
        requiredConstraintValidator.validate(model.booleanHeader, HttpModelType.HEADER, "Boolean-Header");

        requiredConstraintValidator.validate(model.byteHeader, HttpModelType.HEADER, "Byte-Header");

        requiredConstraintValidator.validate(model.shortHeader, HttpModelType.HEADER, "Short-Header");

        requiredConstraintValidator.validate(model.intHeader, HttpModelType.HEADER, "Int-Header");

        requiredConstraintValidator.validate(model.longHeader, HttpModelType.HEADER, "Long-Header");

        requiredConstraintValidator.validate(model.bigIntHeader, HttpModelType.HEADER, "Big-Int-Header");

        requiredConstraintValidator.validate(model.floatHeader, HttpModelType.HEADER, "Float-Header");

        requiredConstraintValidator.validate(model.doubleHeader, HttpModelType.HEADER, "Double-Header");

        requiredConstraintValidator.validate(model.decimalHeader, HttpModelType.HEADER, "Decimal-Header");

        requiredConstraintValidator.validate(model.charHeader, HttpModelType.HEADER, "Char-Header");

        requiredAndNotEmptyStringConstraintValidator.validate(model.stringHeader, HttpModelType.HEADER, "String-Header");

        requiredConstraintValidator.validate(model.instantHeader, HttpModelType.HEADER, "Instant-Header");

        requiredConstraintValidator.validate(model.enumHeader, HttpModelType.HEADER, "Enum-Header");

        requiredListConstraintValidator.validate(model.booleanHeaderList, HttpModelType.HEADER, "Boolean-Header-List");
        requiredConstraintValidator.validateIterable(model.booleanHeaderList, HttpModelType.HEADER, "Boolean-Header-List");

        requiredListConstraintValidator.validate(model.byteHeaderList, HttpModelType.HEADER, "Byte-Header-List");
        requiredConstraintValidator.validateIterable(model.byteHeaderList, HttpModelType.HEADER, "Byte-Header-List");

        requiredListConstraintValidator.validate(model.shortHeaderList, HttpModelType.HEADER, "Short-Header-List");
        requiredConstraintValidator.validateIterable(model.shortHeaderList, HttpModelType.HEADER, "Short-Header-List");

        requiredListConstraintValidator.validate(model.intHeaderList, HttpModelType.HEADER, "Int-Header-List");
        requiredConstraintValidator.validateIterable(model.intHeaderList, HttpModelType.HEADER, "Int-Header-List");

        requiredListConstraintValidator.validate(model.longHeaderList, HttpModelType.HEADER, "Long-Header-List");
        requiredConstraintValidator.validateIterable(model.longHeaderList, HttpModelType.HEADER, "Long-Header-List");

        requiredListConstraintValidator.validate(model.bigIntHeaderList, HttpModelType.HEADER, "Big-Int-Header-List");
        requiredConstraintValidator.validateIterable(model.bigIntHeaderList, HttpModelType.HEADER, "Big-Int-Header-List");

        requiredListConstraintValidator.validate(model.floatHeaderList, HttpModelType.HEADER, "Float-Header-List");
        requiredConstraintValidator.validateIterable(model.floatHeaderList, HttpModelType.HEADER, "Float-Header-List");

        requiredListConstraintValidator.validate(model.doubleHeaderList, HttpModelType.HEADER, "Double-Header-List");
        requiredConstraintValidator.validateIterable(model.doubleHeaderList, HttpModelType.HEADER, "Double-Header-List");

        requiredListConstraintValidator.validate(model.decimalHeaderList, HttpModelType.HEADER, "Decimal-Header-List");
        requiredConstraintValidator.validateIterable(model.decimalHeaderList, HttpModelType.HEADER, "Decimal-Header-List");

        requiredListConstraintValidator.validate(model.charHeaderList, HttpModelType.HEADER, "Char-Header-List");
        requiredConstraintValidator.validateIterable(model.charHeaderList, HttpModelType.HEADER, "Char-Header-List");

        requiredListConstraintValidator.validate(model.stringHeaderList, HttpModelType.HEADER, "String-Header-List");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.stringHeaderList, HttpModelType.HEADER, "String-Header-List");

        requiredListConstraintValidator.validate(model.instantHeaderList, HttpModelType.HEADER, "Instant-Header-List");
        requiredConstraintValidator.validateIterable(model.instantHeaderList, HttpModelType.HEADER, "Instant-Header-List");

        requiredListConstraintValidator.validate(model.enumHeaderList, HttpModelType.HEADER, "Enum-Header-List");
        requiredConstraintValidator.validateIterable(model.enumHeaderList, HttpModelType.HEADER, "Enum-Header-List");

        requiredSetConstraintValidator.validate(model.booleanHeaderSet, HttpModelType.HEADER, "Boolean-Header-Set");
        requiredConstraintValidator.validateIterable(model.booleanHeaderSet, HttpModelType.HEADER, "Boolean-Header-Set");

        requiredSetConstraintValidator.validate(model.byteHeaderSet, HttpModelType.HEADER, "Byte-Header-Set");
        requiredConstraintValidator.validateIterable(model.byteHeaderSet, HttpModelType.HEADER, "Byte-Header-Set");

        requiredSetConstraintValidator.validate(model.shortHeaderSet, HttpModelType.HEADER, "Short-Header-Set");
        requiredConstraintValidator.validateIterable(model.shortHeaderSet, HttpModelType.HEADER, "Short-Header-Set");

        requiredSetConstraintValidator.validate(model.intHeaderSet, HttpModelType.HEADER, "Int-Header-Set");
        requiredConstraintValidator.validateIterable(model.intHeaderSet, HttpModelType.HEADER, "Int-Header-Set");

        requiredSetConstraintValidator.validate(model.longHeaderSet, HttpModelType.HEADER, "Long-Header-Set");
        requiredConstraintValidator.validateIterable(model.longHeaderSet, HttpModelType.HEADER, "Long-Header-Set");

        requiredSetConstraintValidator.validate(model.bigIntHeaderSet, HttpModelType.HEADER, "Big-Int-Header-Set");
        requiredConstraintValidator.validateIterable(model.bigIntHeaderSet, HttpModelType.HEADER, "Big-Int-Header-Set");

        requiredSetConstraintValidator.validate(model.floatHeaderSet, HttpModelType.HEADER, "Float-Header-Set");
        requiredConstraintValidator.validateIterable(model.floatHeaderSet, HttpModelType.HEADER, "Float-Header-Set");

        requiredSetConstraintValidator.validate(model.doubleHeaderSet, HttpModelType.HEADER, "Double-Header-Set");
        requiredConstraintValidator.validateIterable(model.doubleHeaderSet, HttpModelType.HEADER, "Double-Header-Set");

        requiredSetConstraintValidator.validate(model.decimalHeaderSet, HttpModelType.HEADER, "Decimal-Header-Set");
        requiredConstraintValidator.validateIterable(model.decimalHeaderSet, HttpModelType.HEADER, "Decimal-Header-Set");

        requiredSetConstraintValidator.validate(model.charHeaderSet, HttpModelType.HEADER, "Char-Header-Set");
        requiredConstraintValidator.validateIterable(model.charHeaderSet, HttpModelType.HEADER, "Char-Header-Set");

        requiredSetConstraintValidator.validate(model.stringHeaderSet, HttpModelType.HEADER, "String-Header-Set");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.stringHeaderSet, HttpModelType.HEADER, "String-Header-Set");

        requiredSetConstraintValidator.validate(model.instantHeaderSet, HttpModelType.HEADER, "Instant-Header-Set");
        requiredConstraintValidator.validateIterable(model.instantHeaderSet, HttpModelType.HEADER, "Instant-Header-Set");

        requiredSetConstraintValidator.validate(model.enumHeaderSet, HttpModelType.HEADER, "Enum-Header-Set");
        requiredConstraintValidator.validateIterable(model.enumHeaderSet, HttpModelType.HEADER, "Enum-Header-Set");

        notEmptyStringConstraintValidator.validate(model.requestIdHeader, HttpModelType.HEADER, "Request-Id");
    }
}
