package io.rxmicro.examples.rest.controller.model.field.access.headers;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualHeadersMicroService extends AbstractRestController {

    private VirtualHeadersMicroService restController;

    private $$VirtualVirtualHeadersRequestServerModelReader virtualVirtualHeadersRequestServerModelReader;

    private $$VirtualVirtualHeadersRequestConstraintValidator virtualVirtualHeadersRequestConstraintValidator;

    @Override
    protected void postConstruct() {
        restController = new VirtualHeadersMicroService();
        virtualVirtualHeadersRequestServerModelReader = new $$VirtualVirtualHeadersRequestServerModelReader();
        virtualVirtualHeadersRequestConstraintValidator = new $$VirtualVirtualHeadersRequestConstraintValidator();
    }

    @Override
    public Class<?> getRestControllerClass() {
        return VirtualHeadersMicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "put",
                        List.of(
                                java.lang.Boolean.class, java.lang.Byte.class, java.lang.Short.class, java.lang.Integer.class, java.lang.Long.class, java.math.BigInteger.class, java.lang.Float.class, java.lang.Double.class, java.math.BigDecimal.class, java.lang.Character.class, java.lang.String.class, java.time.Instant.class, io.rxmicro.examples.rest.controller.model.field.access.Status.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.List.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.util.Set.class, java.lang.String.class
                        ),
                        this::put,
                        false,
                        new ExactUrlRequestMappingRule(
                                "PUT",
                                "/headers/virtual",
                                true
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> put(final PathVariableMapping pathVariableMapping,
                                              final HttpRequest request) {
        final $$VirtualVirtualHeadersRequest req = virtualVirtualHeadersRequestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        virtualVirtualHeadersRequestConstraintValidator.validate(req);
        final HttpHeaders headers = HttpHeaders.of();
        restController.put(req.booleanHeader, req.byteHeader, req.shortHeader, req.intHeader, req.longHeader, req.bigIntHeader, req.floatHeader, req.doubleHeader, req.decimalHeader, req.charHeader, req.stringHeader, req.instantHeader, req.enumHeader, req.booleanHeaderList, req.byteHeaderList, req.shortHeaderList, req.intHeaderList, req.longHeaderList, req.bigIntHeaderList, req.floatHeaderList, req.doubleHeaderList, req.decimalHeaderList, req.charHeaderList, req.stringHeaderList, req.instantHeaderList, req.enumHeaderList, req.booleanHeaderSet, req.byteHeaderSet, req.shortHeaderSet, req.intHeaderSet, req.longHeaderSet, req.bigIntHeaderSet, req.floatHeaderSet, req.doubleHeaderSet, req.decimalHeaderSet, req.charHeaderSet, req.stringHeaderSet, req.instantHeaderSet, req.enumHeaderSet, req.requestIdHeader);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
