package io.rxmicro.examples.rest.controller.model.field.access.params.gettersetter;

import io.rxmicro.examples.rest.controller.model.field.access.Status;
import io.rxmicro.http.QueryParams;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$QueryRequestModelReader extends ModelReader<QueryRequest> {

    @Override
    public QueryRequest read(final PathVariableMapping pathVariableMapping,
                             final HttpRequest request,
                             final boolean readParametersFromBody) {
        final QueryRequest model = new QueryRequest();
        final QueryParams params = extractParams(request.getQueryString());
        readPrimitivesToModel(pathVariableMapping, request, params, model);
        return model;
    }

    protected void readPrimitivesToModel(final PathVariableMapping pathVariableMapping,
                                         final HttpRequest request,
                                         final QueryParams params,
                                         final QueryRequest model) {
        model.setBooleanParameter(toBoolean(params.getValue("booleanParameter"), HttpModelType.PARAMETER, "booleanParameter"));
        model.setByteParameter(toByte(params.getValue("byteParameter"), HttpModelType.PARAMETER, "byteParameter"));
        model.setShortParameter(toShort(params.getValue("shortParameter"), HttpModelType.PARAMETER, "shortParameter"));
        model.setIntParameter(toInteger(params.getValue("intParameter"), HttpModelType.PARAMETER, "intParameter"));
        model.setLongParameter(toLong(params.getValue("longParameter"), HttpModelType.PARAMETER, "longParameter"));
        model.setBigIntParameter(toBigInteger(params.getValue("bigIntParameter"), HttpModelType.PARAMETER, "bigIntParameter"));
        model.setFloatParameter(toFloat(params.getValue("floatParameter"), HttpModelType.PARAMETER, "floatParameter"));
        model.setDoubleParameter(toDouble(params.getValue("doubleParameter"), HttpModelType.PARAMETER, "doubleParameter"));
        model.setDecimalParameter(toBigDecimal(params.getValue("decimalParameter"), HttpModelType.PARAMETER, "decimalParameter"));
        model.setCharParameter(toCharacter(params.getValue("charParameter"), HttpModelType.PARAMETER, "charParameter"));
        model.setStringParameter(toString(params.getValue("stringParameter"), HttpModelType.PARAMETER, "stringParameter"));
        model.setInstantParameter(toInstant(params.getValue("instantParameter"), HttpModelType.PARAMETER, "instantParameter"));
        model.setEnumParameter(toEnum(Status.class, params.getValue("enumParameter"), HttpModelType.PARAMETER, "enumParameter"));
        model.setBooleanParameterList(toBooleanList(params.getValues("booleanParameterList"), HttpModelType.PARAMETER, "booleanParameterList"));
        model.setByteParameterList(toByteList(params.getValues("byteParameterList"), HttpModelType.PARAMETER, "byteParameterList"));
        model.setShortParameterList(toShortList(params.getValues("shortParameterList"), HttpModelType.PARAMETER, "shortParameterList"));
        model.setIntParameterList(toIntegerList(params.getValues("intParameterList"), HttpModelType.PARAMETER, "intParameterList"));
        model.setLongParameterList(toLongList(params.getValues("longParameterList"), HttpModelType.PARAMETER, "longParameterList"));
        model.setBigIntParameterList(toBigIntegerList(params.getValues("bigIntParameterList"), HttpModelType.PARAMETER, "bigIntParameterList"));
        model.setFloatParameterList(toFloatList(params.getValues("floatParameterList"), HttpModelType.PARAMETER, "floatParameterList"));
        model.setDoubleParameterList(toDoubleList(params.getValues("doubleParameterList"), HttpModelType.PARAMETER, "doubleParameterList"));
        model.setDecimalParameterList(toBigDecimalList(params.getValues("decimalParameterList"), HttpModelType.PARAMETER, "decimalParameterList"));
        model.setCharParameterList(toCharacterList(params.getValues("charParameterList"), HttpModelType.PARAMETER, "charParameterList"));
        model.setStringParameterList(toStringList(params.getValues("stringParameterList"), HttpModelType.PARAMETER, "stringParameterList"));
        model.setInstantParameterList(toInstantList(params.getValues("instantParameterList"), HttpModelType.PARAMETER, "instantParameterList"));
        model.setEnumParameterList(toEnumList(Status.class, params.getValues("enumParameterList"), HttpModelType.PARAMETER, "enumParameterList"));
        model.setBooleanParameterSet(toBooleanSet(params.getValues("booleanParameterSet"), HttpModelType.PARAMETER, "booleanParameterSet"));
        model.setByteParameterSet(toByteSet(params.getValues("byteParameterSet"), HttpModelType.PARAMETER, "byteParameterSet"));
        model.setShortParameterSet(toShortSet(params.getValues("shortParameterSet"), HttpModelType.PARAMETER, "shortParameterSet"));
        model.setIntParameterSet(toIntegerSet(params.getValues("intParameterSet"), HttpModelType.PARAMETER, "intParameterSet"));
        model.setLongParameterSet(toLongSet(params.getValues("longParameterSet"), HttpModelType.PARAMETER, "longParameterSet"));
        model.setBigIntParameterSet(toBigIntegerSet(params.getValues("bigIntParameterSet"), HttpModelType.PARAMETER, "bigIntParameterSet"));
        model.setFloatParameterSet(toFloatSet(params.getValues("floatParameterSet"), HttpModelType.PARAMETER, "floatParameterSet"));
        model.setDoubleParameterSet(toDoubleSet(params.getValues("doubleParameterSet"), HttpModelType.PARAMETER, "doubleParameterSet"));
        model.setDecimalParameterSet(toBigDecimalSet(params.getValues("decimalParameterSet"), HttpModelType.PARAMETER, "decimalParameterSet"));
        model.setCharParameterSet(toCharacterSet(params.getValues("charParameterSet"), HttpModelType.PARAMETER, "charParameterSet"));
        model.setStringParameterSet(toStringSet(params.getValues("stringParameterSet"), HttpModelType.PARAMETER, "stringParameterSet"));
        model.setInstantParameterSet(toInstantSet(params.getValues("instantParameterSet"), HttpModelType.PARAMETER, "instantParameterSet"));
        model.setEnumParameterSet(toEnumSet(Status.class, params.getValues("enumParameterSet"), HttpModelType.PARAMETER, "enumParameterSet"));
    }
}
