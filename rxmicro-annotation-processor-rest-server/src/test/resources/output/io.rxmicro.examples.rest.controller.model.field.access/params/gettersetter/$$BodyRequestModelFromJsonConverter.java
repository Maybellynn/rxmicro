package io.rxmicro.examples.rest.controller.model.field.access.params.gettersetter;

import io.rxmicro.examples.rest.controller.model.field.access.Status;
import io.rxmicro.examples.rest.controller.model.field.access.params.gettersetter.nested.$$NestedModelFromJsonConverter;
import io.rxmicro.exchange.json.detail.ModelFromJsonConverter;

import java.util.Map;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$BodyRequestModelFromJsonConverter extends ModelFromJsonConverter<BodyRequest> {

    private final $$NestedModelFromJsonConverter nestedModelFromJsonConverter =
            new $$NestedModelFromJsonConverter();

    @Override
    public BodyRequest fromJsonObject(final Map<String, Object> params) {
        final BodyRequest model = new BodyRequest();
        readParamsToModel(params, model);
        return model;
    }

    protected void readParamsToModel(final Map<String, Object> params,
                                     final BodyRequest model) {
        model.setBooleanParameter(toBoolean(params.get("booleanParameter"), "booleanParameter"));
        model.setByteParameter(toByte(params.get("byteParameter"), "byteParameter"));
        model.setShortParameter(toShort(params.get("shortParameter"), "shortParameter"));
        model.setIntParameter(toInteger(params.get("intParameter"), "intParameter"));
        model.setLongParameter(toLong(params.get("longParameter"), "longParameter"));
        model.setBigIntParameter(toBigInteger(params.get("bigIntParameter"), "bigIntParameter"));
        model.setFloatParameter(toFloat(params.get("floatParameter"), "floatParameter"));
        model.setDoubleParameter(toDouble(params.get("doubleParameter"), "doubleParameter"));
        model.setDecimalParameter(toBigDecimal(params.get("decimalParameter"), "decimalParameter"));
        model.setCharParameter(toCharacter(params.get("charParameter"), "charParameter"));
        model.setStringParameter(toString(params.get("stringParameter"), "stringParameter"));
        model.setInstantParameter(toInstant(params.get("instantParameter"), "instantParameter"));
        model.setEnumParameter(toEnum(Status.class, params.get("enumParameter"), "enumParameter"));
        model.setBooleanParameterList(toBooleanList(params.get("booleanParameterList"), "booleanParameterList"));
        model.setByteParameterList(toByteList(params.get("byteParameterList"), "byteParameterList"));
        model.setShortParameterList(toShortList(params.get("shortParameterList"), "shortParameterList"));
        model.setIntParameterList(toIntegerList(params.get("intParameterList"), "intParameterList"));
        model.setLongParameterList(toLongList(params.get("longParameterList"), "longParameterList"));
        model.setBigIntParameterList(toBigIntegerList(params.get("bigIntParameterList"), "bigIntParameterList"));
        model.setFloatParameterList(toFloatList(params.get("floatParameterList"), "floatParameterList"));
        model.setDoubleParameterList(toDoubleList(params.get("doubleParameterList"), "doubleParameterList"));
        model.setDecimalParameterList(toBigDecimalList(params.get("decimalParameterList"), "decimalParameterList"));
        model.setCharParameterList(toCharacterList(params.get("charParameterList"), "charParameterList"));
        model.setStringParameterList(toStringList(params.get("stringParameterList"), "stringParameterList"));
        model.setInstantParameterList(toInstantList(params.get("instantParameterList"), "instantParameterList"));
        model.setEnumParameterList(toEnumList(Status.class, params.get("enumParameterList"), "enumParameterList"));
        model.setBooleanParameterSet(toBooleanSet(params.get("booleanParameterSet"), "booleanParameterSet"));
        model.setByteParameterSet(toByteSet(params.get("byteParameterSet"), "byteParameterSet"));
        model.setShortParameterSet(toShortSet(params.get("shortParameterSet"), "shortParameterSet"));
        model.setIntParameterSet(toIntegerSet(params.get("intParameterSet"), "intParameterSet"));
        model.setLongParameterSet(toLongSet(params.get("longParameterSet"), "longParameterSet"));
        model.setBigIntParameterSet(toBigIntegerSet(params.get("bigIntParameterSet"), "bigIntParameterSet"));
        model.setFloatParameterSet(toFloatSet(params.get("floatParameterSet"), "floatParameterSet"));
        model.setDoubleParameterSet(toDoubleSet(params.get("doubleParameterSet"), "doubleParameterSet"));
        model.setDecimalParameterSet(toBigDecimalSet(params.get("decimalParameterSet"), "decimalParameterSet"));
        model.setCharParameterSet(toCharacterSet(params.get("charParameterSet"), "charParameterSet"));
        model.setStringParameterSet(toStringSet(params.get("stringParameterSet"), "stringParameterSet"));
        model.setInstantParameterSet(toInstantSet(params.get("instantParameterSet"), "instantParameterSet"));
        model.setEnumParameterSet(toEnumSet(Status.class, params.get("enumParameterSet"), "enumParameterSet"));
        model.setBooleanParameterMap(toBooleanMap(params.get("booleanParameterMap"), "booleanParameterMap"));
        model.setByteParameterMap(toByteMap(params.get("byteParameterMap"), "byteParameterMap"));
        model.setShortParameterMap(toShortMap(params.get("shortParameterMap"), "shortParameterMap"));
        model.setIntegerParameterMap(toIntegerMap(params.get("integerParameterMap"), "integerParameterMap"));
        model.setLongParameterMap(toLongMap(params.get("longParameterMap"), "longParameterMap"));
        model.setBigIntegerParameterMap(toBigIntegerMap(params.get("bigIntegerParameterMap"), "bigIntegerParameterMap"));
        model.setFloatParameterMap(toFloatMap(params.get("floatParameterMap"), "floatParameterMap"));
        model.setDoubleParameterMap(toDoubleMap(params.get("doubleParameterMap"), "doubleParameterMap"));
        model.setBigDecimalParameterMap(toBigDecimalMap(params.get("bigDecimalParameterMap"), "bigDecimalParameterMap"));
        model.setCharacterParameterMap(toCharacterMap(params.get("characterParameterMap"), "characterParameterMap"));
        model.setStringParameterMap(toStringMap(params.get("stringParameterMap"), "stringParameterMap"));
        model.setInstantParameterMap(toInstantMap(params.get("instantParameterMap"), "instantParameterMap"));
        model.setEnumParameterMap(toEnumMap(Status.class, params.get("enumParameterMap"), "enumParameterMap"));
        model.setNested(convertToObjectIfNotNull(nestedModelFromJsonConverter, params.get("nested"), "nested"));
        model.setNestedList(convertToListIfNotNull(nestedModelFromJsonConverter, params.get("nestedList"), "nestedList"));
        model.setNestedSet(convertToSetIfNotNull(nestedModelFromJsonConverter, params.get("nestedSet"), "nestedSet"));
        model.setNestedParameterMap(convertToMapIfNotNull(nestedModelFromJsonConverter, params.get("nestedParameterMap"), "nestedParameterMap"));
    }
}
