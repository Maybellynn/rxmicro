package io.rxmicro.examples.rest.controller.model.field.access.params.gettersetter;

import io.rxmicro.examples.rest.controller.model.field.access.params.gettersetter.nested.$$NestedModelToJsonConverter;
import io.rxmicro.exchange.json.detail.ModelToJsonConverter;
import io.rxmicro.json.JsonObjectBuilder;

import java.util.Map;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ResponseModelToJsonConverter extends ModelToJsonConverter<Response> {

    private final $$NestedModelToJsonConverter nestedModelToJsonConverter =
            new $$NestedModelToJsonConverter();

    @Override
    public Map<String, Object> toJsonObject(final Response model) {
        final JsonObjectBuilder builder = new JsonObjectBuilder();
        putValuesToBuilder(model, builder);
        return builder.build();
    }

    protected void putValuesToBuilder(final Response model,
                                      final JsonObjectBuilder builder) {
        builder.put("booleanParameter", model.getBooleanParameter());
        builder.put("byteParameter", model.getByteParameter());
        builder.put("shortParameter", model.getShortParameter());
        builder.put("intParameter", model.getIntParameter());
        builder.put("longParameter", model.getLongParameter());
        builder.put("bigIntParameter", model.getBigIntParameter());
        builder.put("floatParameter", model.getFloatParameter());
        builder.put("doubleParameter", model.getDoubleParameter());
        builder.put("decimalParameter", model.getDecimalParameter());
        builder.put("charParameter", model.getCharParameter());
        builder.put("stringParameter", model.getStringParameter());
        builder.put("instantParameter", model.getInstantParameter());
        builder.put("enumParameter", model.getEnumParameter());
        builder.put("booleanParameterList", model.getBooleanParameterList());
        builder.put("byteParameterList", model.getByteParameterList());
        builder.put("shortParameterList", model.getShortParameterList());
        builder.put("intParameterList", model.getIntParameterList());
        builder.put("longParameterList", model.getLongParameterList());
        builder.put("bigIntParameterList", model.getBigIntParameterList());
        builder.put("floatParameterList", model.getFloatParameterList());
        builder.put("doubleParameterList", model.getDoubleParameterList());
        builder.put("decimalParameterList", model.getDecimalParameterList());
        builder.put("charParameterList", model.getCharParameterList());
        builder.put("stringParameterList", model.getStringParameterList());
        builder.put("instantParameterList", model.getInstantParameterList());
        builder.put("enumParameterList", model.getEnumParameterList());
        builder.put("booleanParameterSet", model.getBooleanParameterSet());
        builder.put("byteParameterSet", model.getByteParameterSet());
        builder.put("shortParameterSet", model.getShortParameterSet());
        builder.put("intParameterSet", model.getIntParameterSet());
        builder.put("longParameterSet", model.getLongParameterSet());
        builder.put("bigIntParameterSet", model.getBigIntParameterSet());
        builder.put("floatParameterSet", model.getFloatParameterSet());
        builder.put("doubleParameterSet", model.getDoubleParameterSet());
        builder.put("decimalParameterSet", model.getDecimalParameterSet());
        builder.put("charParameterSet", model.getCharParameterSet());
        builder.put("stringParameterSet", model.getStringParameterSet());
        builder.put("instantParameterSet", model.getInstantParameterSet());
        builder.put("enumParameterSet", model.getEnumParameterSet());
        builder.put("booleanParameterMap", model.getBooleanParameterMap());
        builder.put("byteParameterMap", model.getByteParameterMap());
        builder.put("shortParameterMap", model.getShortParameterMap());
        builder.put("integerParameterMap", model.getIntegerParameterMap());
        builder.put("longParameterMap", model.getLongParameterMap());
        builder.put("bigIntegerParameterMap", model.getBigIntegerParameterMap());
        builder.put("floatParameterMap", model.getFloatParameterMap());
        builder.put("doubleParameterMap", model.getDoubleParameterMap());
        builder.put("bigDecimalParameterMap", model.getBigDecimalParameterMap());
        builder.put("characterParameterMap", model.getCharacterParameterMap());
        builder.put("stringParameterMap", model.getStringParameterMap());
        builder.put("instantParameterMap", model.getInstantParameterMap());
        builder.put("enumParameterMap", model.getEnumParameterMap());
        builder.put("nested", convertFromObjectIfNotNull(nestedModelToJsonConverter, model.getNested()));
        builder.put("nestedList", convertFromListIfNotNull(nestedModelToJsonConverter, model.getNestedList()));
        builder.put("nestedSet", convertFromSetIfNotNull(nestedModelToJsonConverter, model.getNestedSet()));
        builder.put("nestedParameterMap", convertFromMapIfNotNull(nestedModelToJsonConverter, model.getNestedParameterMap()));
    }
}
