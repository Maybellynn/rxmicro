package io.rxmicro.examples.rest.controller.model.field.access.params.reflection;

import io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.$$NestedConstraintValidator;
import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;
import io.rxmicro.validation.validator.RequiredMapConstraintValidator;
import io.rxmicro.validation.validator.RequiredSetConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;
import static rxmicro.examples.rest.controller.model.field.access.$$Reflections.getFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$BodyRequestConstraintValidator implements ConstraintValidator<BodyRequest> {

    private final $$NestedConstraintValidator nestedConstraintValidator =
            new $$NestedConstraintValidator();

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final RequiredSetConstraintValidator requiredSetConstraintValidator =
            getStatelessValidator(RequiredSetConstraintValidator.class);

    private final RequiredMapConstraintValidator requiredMapConstraintValidator =
            getStatelessValidator(RequiredMapConstraintValidator.class);

    @Override
    public void validateNonNull(final BodyRequest model,
                                final ModelType httpModelType,
                                final String name) {
        requiredConstraintValidator.validate((java.lang.Boolean) getFieldValue(model, "booleanParameter"), HttpModelType.PARAMETER, "booleanParameter");

        requiredConstraintValidator.validate((java.lang.Byte) getFieldValue(model, "byteParameter"), HttpModelType.PARAMETER, "byteParameter");

        requiredConstraintValidator.validate((java.lang.Short) getFieldValue(model, "shortParameter"), HttpModelType.PARAMETER, "shortParameter");

        requiredConstraintValidator.validate((java.lang.Integer) getFieldValue(model, "intParameter"), HttpModelType.PARAMETER, "intParameter");

        requiredConstraintValidator.validate((java.lang.Long) getFieldValue(model, "longParameter"), HttpModelType.PARAMETER, "longParameter");

        requiredConstraintValidator.validate((java.math.BigInteger) getFieldValue(model, "bigIntParameter"), HttpModelType.PARAMETER, "bigIntParameter");

        requiredConstraintValidator.validate((java.lang.Float) getFieldValue(model, "floatParameter"), HttpModelType.PARAMETER, "floatParameter");

        requiredConstraintValidator.validate((java.lang.Double) getFieldValue(model, "doubleParameter"), HttpModelType.PARAMETER, "doubleParameter");

        requiredConstraintValidator.validate((java.math.BigDecimal) getFieldValue(model, "decimalParameter"), HttpModelType.PARAMETER, "decimalParameter");

        requiredConstraintValidator.validate((java.lang.Character) getFieldValue(model, "charParameter"), HttpModelType.PARAMETER, "charParameter");

        requiredAndNotEmptyStringConstraintValidator.validate((java.lang.String) getFieldValue(model, "stringParameter"), HttpModelType.PARAMETER, "stringParameter");

        requiredConstraintValidator.validate((java.time.Instant) getFieldValue(model, "instantParameter"), HttpModelType.PARAMETER, "instantParameter");

        requiredConstraintValidator.validate((io.rxmicro.examples.rest.controller.model.field.access.Status) getFieldValue(model, "enumParameter"), HttpModelType.PARAMETER, "enumParameter");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Boolean>) getFieldValue(model, "booleanParameterList"), HttpModelType.PARAMETER, "booleanParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Boolean>) getFieldValue(model, "booleanParameterList"), HttpModelType.PARAMETER, "booleanParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Byte>) getFieldValue(model, "byteParameterList"), HttpModelType.PARAMETER, "byteParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Byte>) getFieldValue(model, "byteParameterList"), HttpModelType.PARAMETER, "byteParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Short>) getFieldValue(model, "shortParameterList"), HttpModelType.PARAMETER, "shortParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Short>) getFieldValue(model, "shortParameterList"), HttpModelType.PARAMETER, "shortParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Integer>) getFieldValue(model, "intParameterList"), HttpModelType.PARAMETER, "intParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Integer>) getFieldValue(model, "intParameterList"), HttpModelType.PARAMETER, "intParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Long>) getFieldValue(model, "longParameterList"), HttpModelType.PARAMETER, "longParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Long>) getFieldValue(model, "longParameterList"), HttpModelType.PARAMETER, "longParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.math.BigInteger>) getFieldValue(model, "bigIntParameterList"), HttpModelType.PARAMETER, "bigIntParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.math.BigInteger>) getFieldValue(model, "bigIntParameterList"), HttpModelType.PARAMETER, "bigIntParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Float>) getFieldValue(model, "floatParameterList"), HttpModelType.PARAMETER, "floatParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Float>) getFieldValue(model, "floatParameterList"), HttpModelType.PARAMETER, "floatParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Double>) getFieldValue(model, "doubleParameterList"), HttpModelType.PARAMETER, "doubleParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Double>) getFieldValue(model, "doubleParameterList"), HttpModelType.PARAMETER, "doubleParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.math.BigDecimal>) getFieldValue(model, "decimalParameterList"), HttpModelType.PARAMETER, "decimalParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.math.BigDecimal>) getFieldValue(model, "decimalParameterList"), HttpModelType.PARAMETER, "decimalParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.Character>) getFieldValue(model, "charParameterList"), HttpModelType.PARAMETER, "charParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.lang.Character>) getFieldValue(model, "charParameterList"), HttpModelType.PARAMETER, "charParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.lang.String>) getFieldValue(model, "stringParameterList"), HttpModelType.PARAMETER, "stringParameterList");
        requiredAndNotEmptyStringConstraintValidator.validateIterable((java.util.List<java.lang.String>) getFieldValue(model, "stringParameterList"), HttpModelType.PARAMETER, "stringParameterList");

        requiredListConstraintValidator.validate((java.util.List<java.time.Instant>) getFieldValue(model, "instantParameterList"), HttpModelType.PARAMETER, "instantParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<java.time.Instant>) getFieldValue(model, "instantParameterList"), HttpModelType.PARAMETER, "instantParameterList");

        requiredListConstraintValidator.validate((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumParameterList"), HttpModelType.PARAMETER, "enumParameterList");
        requiredConstraintValidator.validateIterable((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumParameterList"), HttpModelType.PARAMETER, "enumParameterList");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Boolean>) getFieldValue(model, "booleanParameterSet"), HttpModelType.PARAMETER, "booleanParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Boolean>) getFieldValue(model, "booleanParameterSet"), HttpModelType.PARAMETER, "booleanParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Byte>) getFieldValue(model, "byteParameterSet"), HttpModelType.PARAMETER, "byteParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Byte>) getFieldValue(model, "byteParameterSet"), HttpModelType.PARAMETER, "byteParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Short>) getFieldValue(model, "shortParameterSet"), HttpModelType.PARAMETER, "shortParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Short>) getFieldValue(model, "shortParameterSet"), HttpModelType.PARAMETER, "shortParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Integer>) getFieldValue(model, "intParameterSet"), HttpModelType.PARAMETER, "intParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Integer>) getFieldValue(model, "intParameterSet"), HttpModelType.PARAMETER, "intParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Long>) getFieldValue(model, "longParameterSet"), HttpModelType.PARAMETER, "longParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Long>) getFieldValue(model, "longParameterSet"), HttpModelType.PARAMETER, "longParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.math.BigInteger>) getFieldValue(model, "bigIntParameterSet"), HttpModelType.PARAMETER, "bigIntParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.math.BigInteger>) getFieldValue(model, "bigIntParameterSet"), HttpModelType.PARAMETER, "bigIntParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Float>) getFieldValue(model, "floatParameterSet"), HttpModelType.PARAMETER, "floatParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Float>) getFieldValue(model, "floatParameterSet"), HttpModelType.PARAMETER, "floatParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Double>) getFieldValue(model, "doubleParameterSet"), HttpModelType.PARAMETER, "doubleParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Double>) getFieldValue(model, "doubleParameterSet"), HttpModelType.PARAMETER, "doubleParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.math.BigDecimal>) getFieldValue(model, "decimalParameterSet"), HttpModelType.PARAMETER, "decimalParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.math.BigDecimal>) getFieldValue(model, "decimalParameterSet"), HttpModelType.PARAMETER, "decimalParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.Character>) getFieldValue(model, "charParameterSet"), HttpModelType.PARAMETER, "charParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.lang.Character>) getFieldValue(model, "charParameterSet"), HttpModelType.PARAMETER, "charParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.lang.String>) getFieldValue(model, "stringParameterSet"), HttpModelType.PARAMETER, "stringParameterSet");
        requiredAndNotEmptyStringConstraintValidator.validateIterable((java.util.Set<java.lang.String>) getFieldValue(model, "stringParameterSet"), HttpModelType.PARAMETER, "stringParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<java.time.Instant>) getFieldValue(model, "instantParameterSet"), HttpModelType.PARAMETER, "instantParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<java.time.Instant>) getFieldValue(model, "instantParameterSet"), HttpModelType.PARAMETER, "instantParameterSet");

        requiredSetConstraintValidator.validate((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumParameterSet"), HttpModelType.PARAMETER, "enumParameterSet");
        requiredConstraintValidator.validateIterable((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumParameterSet"), HttpModelType.PARAMETER, "enumParameterSet");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.Boolean>) getFieldValue(model, "booleanParameterMap"), HttpModelType.PARAMETER, "booleanParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.Boolean>) getFieldValue(model, "booleanParameterMap"), HttpModelType.PARAMETER, "booleanParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.Byte>) getFieldValue(model, "byteParameterMap"), HttpModelType.PARAMETER, "byteParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.Byte>) getFieldValue(model, "byteParameterMap"), HttpModelType.PARAMETER, "byteParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.Short>) getFieldValue(model, "shortParameterMap"), HttpModelType.PARAMETER, "shortParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.Short>) getFieldValue(model, "shortParameterMap"), HttpModelType.PARAMETER, "shortParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.Integer>) getFieldValue(model, "integerParameterMap"), HttpModelType.PARAMETER, "integerParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.Integer>) getFieldValue(model, "integerParameterMap"), HttpModelType.PARAMETER, "integerParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.Long>) getFieldValue(model, "longParameterMap"), HttpModelType.PARAMETER, "longParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.Long>) getFieldValue(model, "longParameterMap"), HttpModelType.PARAMETER, "longParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.math.BigInteger>) getFieldValue(model, "bigIntegerParameterMap"), HttpModelType.PARAMETER, "bigIntegerParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.math.BigInteger>) getFieldValue(model, "bigIntegerParameterMap"), HttpModelType.PARAMETER, "bigIntegerParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.Float>) getFieldValue(model, "floatParameterMap"), HttpModelType.PARAMETER, "floatParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.Float>) getFieldValue(model, "floatParameterMap"), HttpModelType.PARAMETER, "floatParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.Double>) getFieldValue(model, "doubleParameterMap"), HttpModelType.PARAMETER, "doubleParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.Double>) getFieldValue(model, "doubleParameterMap"), HttpModelType.PARAMETER, "doubleParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.math.BigDecimal>) getFieldValue(model, "bigDecimalParameterMap"), HttpModelType.PARAMETER, "bigDecimalParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.math.BigDecimal>) getFieldValue(model, "bigDecimalParameterMap"), HttpModelType.PARAMETER, "bigDecimalParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.Character>) getFieldValue(model, "characterParameterMap"), HttpModelType.PARAMETER, "characterParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.Character>) getFieldValue(model, "characterParameterMap"), HttpModelType.PARAMETER, "characterParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.lang.String>) getFieldValue(model, "stringParameterMap"), HttpModelType.PARAMETER, "stringParameterMap");
        requiredAndNotEmptyStringConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.lang.String>) getFieldValue(model, "stringParameterMap"), HttpModelType.PARAMETER, "stringParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,java.time.Instant>) getFieldValue(model, "instantParameterMap"), HttpModelType.PARAMETER, "instantParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,java.time.Instant>) getFieldValue(model, "instantParameterMap"), HttpModelType.PARAMETER, "instantParameterMap");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumParameterMap"), HttpModelType.PARAMETER, "enumParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,io.rxmicro.examples.rest.controller.model.field.access.Status>) getFieldValue(model, "enumParameterMap"), HttpModelType.PARAMETER, "enumParameterMap");

        requiredConstraintValidator.validate((io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested) getFieldValue(model, "nested"), HttpModelType.PARAMETER, "nested");
        nestedConstraintValidator.validate((io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested) getFieldValue(model, "nested"), HttpModelType.PARAMETER, "nested");

        requiredListConstraintValidator.validate((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedList"), HttpModelType.PARAMETER, "nestedList");
        requiredConstraintValidator.validateIterable((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedList"), HttpModelType.PARAMETER, "nestedList");
        nestedConstraintValidator.validateIterable((java.util.List<io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedList"), HttpModelType.PARAMETER, "nestedList");

        requiredSetConstraintValidator.validate((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedSet"), HttpModelType.PARAMETER, "nestedSet");
        requiredConstraintValidator.validateIterable((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedSet"), HttpModelType.PARAMETER, "nestedSet");
        nestedConstraintValidator.validateIterable((java.util.Set<io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedSet"), HttpModelType.PARAMETER, "nestedSet");

        requiredMapConstraintValidator.validate((java.util.Map<java.lang.String,io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedParameterMap"), HttpModelType.PARAMETER, "nestedParameterMap");
        requiredConstraintValidator.validateMapValues((java.util.Map<java.lang.String,io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedParameterMap"), HttpModelType.PARAMETER, "nestedParameterMap");
        nestedConstraintValidator.validateMapValues((java.util.Map<java.lang.String,io.rxmicro.examples.rest.controller.model.field.access.params.reflection.nested.Nested>) getFieldValue(model, "nestedParameterMap"), HttpModelType.PARAMETER, "nestedParameterMap");
    }
}
