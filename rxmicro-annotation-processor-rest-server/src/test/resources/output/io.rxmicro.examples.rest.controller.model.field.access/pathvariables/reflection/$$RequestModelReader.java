package io.rxmicro.examples.rest.controller.model.field.access.pathvariables.reflection;

import io.rxmicro.examples.rest.controller.model.field.access.Status;
import io.rxmicro.http.QueryParams;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

import static rxmicro.$$Reflections.setFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RequestModelReader extends ModelReader<Request> {

    @Override
    public Request read(final PathVariableMapping pathVariableMapping,
                        final HttpRequest request,
                        final boolean readParametersFromBody) {
        final Request model = new Request();
        readPrimitivesToModel(pathVariableMapping, request, QueryParams.of(), model, readParametersFromBody);
        return model;
    }

    public void readPrimitivesToModel(final PathVariableMapping pathVariableMapping,
                                      final HttpRequest request,
                                      final QueryParams params,
                                      final Request model,
                                      final boolean readParametersFromBody) {
        setFieldValue(model, "booleanPathVariable", toBoolean(pathVariableMapping.getValue("a"), HttpModelType.PATH, "a"));
        setFieldValue(model, "bytePathVariable", toByte(pathVariableMapping.getValue("b"), HttpModelType.PATH, "b"));
        setFieldValue(model, "shortPathVariable", toShort(pathVariableMapping.getValue("c"), HttpModelType.PATH, "c"));
        setFieldValue(model, "intPathVariable", toInteger(pathVariableMapping.getValue("d"), HttpModelType.PATH, "d"));
        setFieldValue(model, "longPathVariable", toLong(pathVariableMapping.getValue("e"), HttpModelType.PATH, "e"));
        setFieldValue(model, "bigIntegerPathVariable", toBigInteger(pathVariableMapping.getValue("f"), HttpModelType.PATH, "f"));
        setFieldValue(model, "floatPathVariable", toFloat(pathVariableMapping.getValue("g"), HttpModelType.PATH, "g"));
        setFieldValue(model, "doublePathVariable", toDouble(pathVariableMapping.getValue("h"), HttpModelType.PATH, "h"));
        setFieldValue(model, "decimalPathVariable", toBigDecimal(pathVariableMapping.getValue("i"), HttpModelType.PATH, "i"));
        setFieldValue(model, "charPathVariable", toCharacter(pathVariableMapping.getValue("j"), HttpModelType.PATH, "j"));
        setFieldValue(model, "stringPathVariable", toString(pathVariableMapping.getValue("k"), HttpModelType.PATH, "k"));
        setFieldValue(model, "instantPathVariable", toInstant(pathVariableMapping.getValue("l"), HttpModelType.PATH, "l"));
        setFieldValue(model, "enumPathVariable", toEnum(Status.class, pathVariableMapping.getValue("m"), HttpModelType.PATH, "m"));
    }
}
