package io.rxmicro.examples.rest.controller.model.field.access.pathvariables;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.model.UrlSegments;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.WithUrlPathVariablesRequestMappingRule;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualPathVariablesMicroService extends AbstractRestController {

    private VirtualPathVariablesMicroService restController;

    private $$VirtualVirtualPathVariablesRequestServerModelReader virtualVirtualPathVariablesRequestServerModelReader;

    @Override
    protected void postConstruct() {
        restController = new VirtualPathVariablesMicroService();
        virtualVirtualPathVariablesRequestServerModelReader = new $$VirtualVirtualPathVariablesRequestServerModelReader();
    }

    @Override
    public Class<?> getRestControllerClass() {
        return VirtualPathVariablesMicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "put",
                        List.of(
                                java.lang.Boolean.class, java.lang.Byte.class, java.lang.Short.class, java.lang.Integer.class, java.lang.Long.class, java.math.BigInteger.class, java.lang.Float.class, java.lang.Double.class, java.math.BigDecimal.class, java.lang.Character.class, java.lang.String.class, java.time.Instant.class, io.rxmicro.examples.rest.controller.model.field.access.Status.class
                        ),
                        this::put,
                        false,
                        new WithUrlPathVariablesRequestMappingRule(
                                "PUT",
                                new UrlSegments(
                                        "/path-variables/virtual/?/?/?/?/?/?/?/?/?/?/?/?/?/?",
                                        List.of("a", "b", "c", "d", "e", "f", "g", "j", "h", "i", "j", "k", "l", "m")
                                ),
                                true
                        )

                )
        );
    }

    private CompletionStage<HttpResponse> put(final PathVariableMapping pathVariableMapping,
                                              final HttpRequest request) {
        final $$VirtualVirtualPathVariablesRequest req = virtualVirtualPathVariablesRequestServerModelReader.read(pathVariableMapping, request, request.isContentPresent());
        final HttpHeaders headers = HttpHeaders.of();
        restController.put(req.booleanPathVariable, req.bytePathVariable, req.shortPathVariable, req.intPathVariable, req.longPathVariable, req.bigIntegerPathVariable, req.floatPathVariable, req.doublePathVariable, req.decimalPathVariable, req.charPathVariable, req.stringPathVariable, req.instantPathVariable, req.enumPathVariable);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
