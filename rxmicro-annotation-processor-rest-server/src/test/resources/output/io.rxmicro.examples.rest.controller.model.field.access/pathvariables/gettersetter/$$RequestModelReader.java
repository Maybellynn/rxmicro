package io.rxmicro.examples.rest.controller.model.field.access.pathvariables.gettersetter;

import io.rxmicro.examples.rest.controller.model.field.access.Status;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RequestModelReader extends ModelReader<Request> {

    @Override
    public Request read(final PathVariableMapping pathVariableMapping,
                        final HttpRequest request,
                        final boolean readParametersFromBody) {
        final Request model = new Request();
        readPrimitivesToModel(pathVariableMapping, request, model);
        return model;
    }

    protected void readPrimitivesToModel(final PathVariableMapping pathVariableMapping,
                                         final HttpRequest request,
                                         final Request model) {
        model.setBooleanPathVariable(toBoolean(pathVariableMapping.getValue("a"), HttpModelType.PATH, "a"));
        model.setBytePathVariable(toByte(pathVariableMapping.getValue("b"), HttpModelType.PATH, "b"));
        model.setShortPathVariable(toShort(pathVariableMapping.getValue("c"), HttpModelType.PATH, "c"));
        model.setIntPathVariable(toInteger(pathVariableMapping.getValue("d"), HttpModelType.PATH, "d"));
        model.setLongPathVariable(toLong(pathVariableMapping.getValue("e"), HttpModelType.PATH, "e"));
        model.setBigIntegerPathVariable(toBigInteger(pathVariableMapping.getValue("f"), HttpModelType.PATH, "f"));
        model.setFloatPathVariable(toFloat(pathVariableMapping.getValue("g"), HttpModelType.PATH, "g"));
        model.setDoublePathVariable(toDouble(pathVariableMapping.getValue("h"), HttpModelType.PATH, "h"));
        model.setDecimalPathVariable(toBigDecimal(pathVariableMapping.getValue("i"), HttpModelType.PATH, "i"));
        model.setCharPathVariable(toCharacter(pathVariableMapping.getValue("j"), HttpModelType.PATH, "j"));
        model.setStringPathVariable(toString(pathVariableMapping.getValue("k"), HttpModelType.PATH, "k"));
        model.setInstantPathVariable(toInstant(pathVariableMapping.getValue("l"), HttpModelType.PATH, "l"));
        model.setEnumPathVariable(toEnum(Status.class, pathVariableMapping.getValue("m"), HttpModelType.PATH, "m"));
    }
}
