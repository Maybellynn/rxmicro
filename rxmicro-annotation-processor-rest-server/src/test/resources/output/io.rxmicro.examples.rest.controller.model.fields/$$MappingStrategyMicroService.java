package io.rxmicro.examples.rest.controller.model.fields;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$MappingStrategyMicroService extends AbstractRestController {

    private MappingStrategyMicroService restController;

    private $$VirtualMappingStrategyRequestModelReader virtualMappingStrategyRequestModelReader;

    private $$VirtualMappingStrategyRequest2ModelReader virtualMappingStrategyRequest2ModelReader;

    private $$VirtualMappingStrategyRequest3ModelReader virtualMappingStrategyRequest3ModelReader;

    @Override
    protected void postConstruct() {
        restController = new MappingStrategyMicroService();
        virtualMappingStrategyRequestModelReader = new $$VirtualMappingStrategyRequestModelReader();
        virtualMappingStrategyRequest2ModelReader = new $$VirtualMappingStrategyRequest2ModelReader();
        virtualMappingStrategyRequest3ModelReader = new $$VirtualMappingStrategyRequest3ModelReader();
    }

    @Override
    public Class<?> getRestControllerClass() {
        return MappingStrategyMicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "consume1(java.math.BigDecimal,java.time.Instant)",
                        this::consume1,
                        false,
                        new ExactUrlRequestMappingRule(
                                "PUT",
                                "/consume1",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "consume2(java.math.BigDecimal,java.time.Instant)",
                        this::consume2,
                        false,
                        new ExactUrlRequestMappingRule(
                                "PUT",
                                "/consume2",
                                false
                        )
                ),
                new Registration(
                        "/",
                        "consume3(java.math.BigDecimal,java.time.Instant)",
                        this::consume3,
                        false,
                        new ExactUrlRequestMappingRule(
                                "PUT",
                                "/consume3",
                                false
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> consume1(final PathVariableMapping pathVariableMapping,
                                                   final HttpRequest request) {
        final $$VirtualMappingStrategyRequest req = virtualMappingStrategyRequestModelReader.read(pathVariableMapping, request, request.contentExists());
        final HttpHeaders headers = HttpHeaders.of();
        restController.consume1(req.supportedApiVersionCode, req.maxSupportedDateTime);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> consume2(final PathVariableMapping pathVariableMapping,
                                                   final HttpRequest request) {
        final $$VirtualMappingStrategyRequest2 req = virtualMappingStrategyRequest2ModelReader.read(pathVariableMapping, request, request.contentExists());
        final HttpHeaders headers = HttpHeaders.of();
        restController.consume2(req.supportedApiVersionCode, req.maxSupportedDateTime);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> consume3(final PathVariableMapping pathVariableMapping,
                                                   final HttpRequest request) {
        final $$VirtualMappingStrategyRequest3 req = virtualMappingStrategyRequest3ModelReader.read(pathVariableMapping, request, request.contentExists());
        final HttpHeaders headers = HttpHeaders.of();
        restController.consume3(req.supportedApiVersionCode, req.maxSupportedDateTime);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
