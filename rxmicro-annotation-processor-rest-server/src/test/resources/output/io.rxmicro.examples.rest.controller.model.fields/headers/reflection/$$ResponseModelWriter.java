package io.rxmicro.examples.rest.controller.model.fields.headers.reflection;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.rest.server.detail.component.ModelWriter;
import io.rxmicro.rest.server.detail.model.HttpResponse;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.List;

import static rxmicro.$$Reflections.getFieldValue;

/**
 * Generated by rxmicro annotation processor
 */
public final class $$ResponseModelWriter extends ModelWriter<Response> {

    public $$ResponseModelWriter(final boolean humanReadableOutput) {
        //do nothing
    }

    @Override
    public void write(final Response model,
                      final HttpResponse response) {
        response.setHeader("booleanParameter", (Boolean) getFieldValue(model, "booleanParameter"));
        response.setHeader("byteParameter", (Byte) getFieldValue(model, "byteParameter"));
        response.setHeader("shortParameter", (Short) getFieldValue(model, "shortParameter"));
        response.setHeader("intParameter", (Integer) getFieldValue(model, "intParameter"));
        response.setHeader("longParameter", (Long) getFieldValue(model, "longParameter"));
        response.setHeader("bigIntParameter", (BigInteger) getFieldValue(model, "bigIntParameter"));
        response.setHeader("floatParameter", (Float) getFieldValue(model, "floatParameter"));
        response.setHeader("doubleParameter", (Double) getFieldValue(model, "doubleParameter"));
        response.setHeader("decimalParameter", (BigDecimal) getFieldValue(model, "decimalParameter"));
        response.setHeader("charParameter", (Character) getFieldValue(model, "charParameter"));
        response.setHeader("stringParameter", (String) getFieldValue(model, "stringParameter"));
        response.setHeader("instantParameter", (Instant) getFieldValue(model, "instantParameter"));
        response.setHeader("status", (Status) getFieldValue(model, "status"));
        response.setHeader("booleanParameters", (List<Boolean>) getFieldValue(model, "booleanParameters"));
        response.setHeader("byteParameters", (List<Byte>) getFieldValue(model, "byteParameters"));
        response.setHeader("shortParameters", (List<Short>) getFieldValue(model, "shortParameters"));
        response.setHeader("intParameters", (List<Integer>) getFieldValue(model, "intParameters"));
        response.setHeader("longParameters", (List<Long>) getFieldValue(model, "longParameters"));
        response.setHeader("bigIntParameters", (List<BigInteger>) getFieldValue(model, "bigIntParameters"));
        response.setHeader("floatParameters", (List<Float>) getFieldValue(model, "floatParameters"));
        response.setHeader("doubleParameters", (List<Double>) getFieldValue(model, "doubleParameters"));
        response.setHeader("decimalParameters", (List<BigDecimal>) getFieldValue(model, "decimalParameters"));
        response.setHeader("charParameters", (List<Character>) getFieldValue(model, "charParameters"));
        response.setHeader("stringParameters", (List<String>) getFieldValue(model, "stringParameters"));
        response.setHeader("instantParameters", (List<Instant>) getFieldValue(model, "instantParameters"));
        response.setHeader("statuses", (List<Status>) getFieldValue(model, "statuses"));
        for (final Status item : (List<Status>) getFieldValue(model, "repeatingStatues")) {
            response.addHeader("repeatingStatues", item);
        }
    }
}
