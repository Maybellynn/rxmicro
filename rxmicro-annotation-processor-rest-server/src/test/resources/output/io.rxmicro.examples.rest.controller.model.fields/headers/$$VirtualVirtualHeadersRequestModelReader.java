package io.rxmicro.examples.rest.controller.model.fields.headers;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$VirtualVirtualHeadersRequestModelReader extends ModelReader<$$VirtualVirtualHeadersRequest> {

    @Override
    public $$VirtualVirtualHeadersRequest read(final PathVariableMapping pathVariableMapping,
                                               final HttpRequest request,
                                               final boolean readParametersFromBody) {
        final $$VirtualVirtualHeadersRequest model = new $$VirtualVirtualHeadersRequest();
        final HttpHeaders httpHeaders = request.getHeaders();
        model.booleanParameter = toBoolean(httpHeaders.getValue("Boolean-Parameter"), HttpModelType.header, "Boolean-Parameter");
        model.byteParameter = toByte(httpHeaders.getValue("Byte-Parameter"), HttpModelType.header, "Byte-Parameter");
        model.shortParameter = toShort(httpHeaders.getValue("Short-Parameter"), HttpModelType.header, "Short-Parameter");
        model.intParameter = toInteger(httpHeaders.getValue("Int-Parameter"), HttpModelType.header, "Int-Parameter");
        model.longParameter = toLong(httpHeaders.getValue("Long-Parameter"), HttpModelType.header, "Long-Parameter");
        model.bigIntParameter = toBigInteger(httpHeaders.getValue("Big-Int-Parameter"), HttpModelType.header, "Big-Int-Parameter");
        model.floatParameter = toFloat(httpHeaders.getValue("Float-Parameter"), HttpModelType.header, "Float-Parameter");
        model.doubleParameter = toDouble(httpHeaders.getValue("Double-Parameter"), HttpModelType.header, "Double-Parameter");
        model.decimalParameter = toBigDecimal(httpHeaders.getValue("Decimal-Parameter"), HttpModelType.header, "Decimal-Parameter");
        model.charParameter = toCharacter(httpHeaders.getValue("Char-Parameter"), HttpModelType.header, "Char-Parameter");
        model.stringParameter = toString(httpHeaders.getValue("String-Parameter"), HttpModelType.header, "String-Parameter");
        model.instantParameter = toInstant(httpHeaders.getValue("Instant-Parameter"), HttpModelType.header, "Instant-Parameter");
        model.status = toEnum(Status.class, httpHeaders.getValue("Status"), HttpModelType.header, "Status");
        model.booleanParameters = toBooleanArray(httpHeaders.getValues("Boolean-Parameters"), HttpModelType.header, "Boolean-Parameters");
        model.byteParameters = toByteArray(httpHeaders.getValues("Byte-Parameters"), HttpModelType.header, "Byte-Parameters");
        model.shortParameters = toShortArray(httpHeaders.getValues("Short-Parameters"), HttpModelType.header, "Short-Parameters");
        model.intParameters = toIntegerArray(httpHeaders.getValues("Int-Parameters"), HttpModelType.header, "Int-Parameters");
        model.longParameters = toLongArray(httpHeaders.getValues("Long-Parameters"), HttpModelType.header, "Long-Parameters");
        model.bigIntParameters = toBigIntegerArray(httpHeaders.getValues("Big-Int-Parameters"), HttpModelType.header, "Big-Int-Parameters");
        model.floatParameters = toFloatArray(httpHeaders.getValues("Float-Parameters"), HttpModelType.header, "Float-Parameters");
        model.doubleParameters = toDoubleArray(httpHeaders.getValues("Double-Parameters"), HttpModelType.header, "Double-Parameters");
        model.decimalParameters = toBigDecimalArray(httpHeaders.getValues("Decimal-Parameters"), HttpModelType.header, "Decimal-Parameters");
        model.charParameters = toCharacterArray(httpHeaders.getValues("Char-Parameters"), HttpModelType.header, "Char-Parameters");
        model.stringParameters = toStringArray(httpHeaders.getValues("String-Parameters"), HttpModelType.header, "String-Parameters");
        model.instantParameters = toInstantArray(httpHeaders.getValues("Instant-Parameters"), HttpModelType.header, "Instant-Parameters");
        model.statuses = toEnumArray(Status.class, httpHeaders.getValues("Statuses"), HttpModelType.header, "Statuses");
        return model;
    }
}
