package io.rxmicro.examples.rest.controller.model.fields.headers.gettersetter;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$RequestModelReader extends ModelReader<Request> {

    @Override
    public Request read(final PathVariableMapping pathVariableMapping,
                        final HttpRequest request,
                        final boolean readParametersFromBody) {
        final Request model = new Request();
        final HttpHeaders httpHeaders = request.getHeaders();
        model.setBooleanParameter(toBoolean(httpHeaders.getValue("booleanParameter"), HttpModelType.header, "booleanParameter"));
        model.setByteParameter(toByte(httpHeaders.getValue("byteParameter"), HttpModelType.header, "byteParameter"));
        model.setShortParameter(toShort(httpHeaders.getValue("shortParameter"), HttpModelType.header, "shortParameter"));
        model.setIntParameter(toInteger(httpHeaders.getValue("intParameter"), HttpModelType.header, "intParameter"));
        model.setLongParameter(toLong(httpHeaders.getValue("longParameter"), HttpModelType.header, "longParameter"));
        model.setBigIntParameter(toBigInteger(httpHeaders.getValue("bigIntParameter"), HttpModelType.header, "bigIntParameter"));
        model.setFloatParameter(toFloat(httpHeaders.getValue("floatParameter"), HttpModelType.header, "floatParameter"));
        model.setDoubleParameter(toDouble(httpHeaders.getValue("doubleParameter"), HttpModelType.header, "doubleParameter"));
        model.setDecimalParameter(toBigDecimal(httpHeaders.getValue("decimalParameter"), HttpModelType.header, "decimalParameter"));
        model.setCharParameter(toCharacter(httpHeaders.getValue("charParameter"), HttpModelType.header, "charParameter"));
        model.setStringParameter(toString(httpHeaders.getValue("stringParameter"), HttpModelType.header, "stringParameter"));
        model.setInstantParameter(toInstant(httpHeaders.getValue("instantParameter"), HttpModelType.header, "instantParameter"));
        model.setStatus(toEnum(Status.class, httpHeaders.getValue("status"), HttpModelType.header, "status"));
        model.setBooleanParameters(toBooleanArray(httpHeaders.getValues("booleanParameters"), HttpModelType.header, "booleanParameters"));
        model.setByteParameters(toByteArray(httpHeaders.getValues("byteParameters"), HttpModelType.header, "byteParameters"));
        model.setShortParameters(toShortArray(httpHeaders.getValues("shortParameters"), HttpModelType.header, "shortParameters"));
        model.setIntParameters(toIntegerArray(httpHeaders.getValues("intParameters"), HttpModelType.header, "intParameters"));
        model.setLongParameters(toLongArray(httpHeaders.getValues("longParameters"), HttpModelType.header, "longParameters"));
        model.setBigIntParameters(toBigIntegerArray(httpHeaders.getValues("bigIntParameters"), HttpModelType.header, "bigIntParameters"));
        model.setFloatParameters(toFloatArray(httpHeaders.getValues("floatParameters"), HttpModelType.header, "floatParameters"));
        model.setDoubleParameters(toDoubleArray(httpHeaders.getValues("doubleParameters"), HttpModelType.header, "doubleParameters"));
        model.setDecimalParameters(toBigDecimalArray(httpHeaders.getValues("decimalParameters"), HttpModelType.header, "decimalParameters"));
        model.setCharParameters(toCharacterArray(httpHeaders.getValues("charParameters"), HttpModelType.header, "charParameters"));
        model.setStringParameters(toStringArray(httpHeaders.getValues("stringParameters"), HttpModelType.header, "stringParameters"));
        model.setInstantParameters(toInstantArray(httpHeaders.getValues("instantParameters"), HttpModelType.header, "instantParameters"));
        model.setStatuses(toEnumArray(Status.class, httpHeaders.getValues("statuses"), HttpModelType.header, "statuses"));
        return model;
    }
}
