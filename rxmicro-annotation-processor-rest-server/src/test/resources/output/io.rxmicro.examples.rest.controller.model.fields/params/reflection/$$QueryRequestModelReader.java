package io.rxmicro.examples.rest.controller.model.fields.params.reflection;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.http.QueryParams;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

import static rxmicro.$$Reflections.setFieldValue;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$QueryRequestModelReader extends ModelReader<QueryRequest> {

    @Override
    public QueryRequest read(final PathVariableMapping pathVariableMapping,
                             final HttpRequest request,
                             final boolean readParametersFromBody) {
        final QueryRequest model = new QueryRequest();
        final QueryParams params = extractParams(request.getQueryString());
        setFieldValue(model, "booleanParameter", toBoolean(params.getValue("booleanParameter"), HttpModelType.parameter, "booleanParameter"));
        setFieldValue(model, "byteParameter", toByte(params.getValue("byteParameter"), HttpModelType.parameter, "byteParameter"));
        setFieldValue(model, "shortParameter", toShort(params.getValue("shortParameter"), HttpModelType.parameter, "shortParameter"));
        setFieldValue(model, "intParameter", toInteger(params.getValue("intParameter"), HttpModelType.parameter, "intParameter"));
        setFieldValue(model, "longParameter", toLong(params.getValue("longParameter"), HttpModelType.parameter, "longParameter"));
        setFieldValue(model, "bigIntParameter", toBigInteger(params.getValue("bigIntParameter"), HttpModelType.parameter, "bigIntParameter"));
        setFieldValue(model, "floatParameter", toFloat(params.getValue("floatParameter"), HttpModelType.parameter, "floatParameter"));
        setFieldValue(model, "doubleParameter", toDouble(params.getValue("doubleParameter"), HttpModelType.parameter, "doubleParameter"));
        setFieldValue(model, "decimalParameter", toBigDecimal(params.getValue("decimalParameter"), HttpModelType.parameter, "decimalParameter"));
        setFieldValue(model, "charParameter", toCharacter(params.getValue("charParameter"), HttpModelType.parameter, "charParameter"));
        setFieldValue(model, "stringParameter", toString(params.getValue("stringParameter"), HttpModelType.parameter, "stringParameter"));
        setFieldValue(model, "instantParameter", toInstant(params.getValue("instantParameter"), HttpModelType.parameter, "instantParameter"));
        setFieldValue(model, "status", toEnum(Status.class, params.getValue("status"), HttpModelType.parameter, "status"));
        setFieldValue(model, "booleanParameters", toBooleanArray(params.getValues("booleanParameters"), HttpModelType.parameter, "booleanParameters"));
        setFieldValue(model, "byteParameters", toByteArray(params.getValues("byteParameters"), HttpModelType.parameter, "byteParameters"));
        setFieldValue(model, "shortParameters", toShortArray(params.getValues("shortParameters"), HttpModelType.parameter, "shortParameters"));
        setFieldValue(model, "intParameters", toIntegerArray(params.getValues("intParameters"), HttpModelType.parameter, "intParameters"));
        setFieldValue(model, "longParameters", toLongArray(params.getValues("longParameters"), HttpModelType.parameter, "longParameters"));
        setFieldValue(model, "bigIntParameters", toBigIntegerArray(params.getValues("bigIntParameters"), HttpModelType.parameter, "bigIntParameters"));
        setFieldValue(model, "floatParameters", toFloatArray(params.getValues("floatParameters"), HttpModelType.parameter, "floatParameters"));
        setFieldValue(model, "doubleParameters", toDoubleArray(params.getValues("doubleParameters"), HttpModelType.parameter, "doubleParameters"));
        setFieldValue(model, "decimalParameters", toBigDecimalArray(params.getValues("decimalParameters"), HttpModelType.parameter, "decimalParameters"));
        setFieldValue(model, "charParameters", toCharacterArray(params.getValues("charParameters"), HttpModelType.parameter, "charParameters"));
        setFieldValue(model, "stringParameters", toStringArray(params.getValues("stringParameters"), HttpModelType.parameter, "stringParameters"));
        setFieldValue(model, "instantParameters", toInstantArray(params.getValues("instantParameters"), HttpModelType.parameter, "instantParameters"));
        setFieldValue(model, "statuses", toEnumArray(Status.class, params.getValues("statuses"), HttpModelType.parameter, "statuses"));
        return model;
    }
}
