package io.rxmicro.examples.rest.controller.model.fields.params.reflection;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.http.QueryParams;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

import static rxmicro.$$Reflections.setFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$QueryRequestModelReader extends ModelReader<QueryRequest> {

    @Override
    public QueryRequest read(final PathVariableMapping pathVariableMapping,
                             final HttpRequest request,
                             final boolean readParametersFromBody) {
        final QueryRequest model = new QueryRequest();
        final QueryParams params = extractParams(request.getQueryString());
        setFieldValue(model, "booleanParameter", toBoolean(params.getValue("booleanParameter"), HttpModelType.PARAMETER, "booleanParameter"));
        setFieldValue(model, "byteParameter", toByte(params.getValue("byteParameter"), HttpModelType.PARAMETER, "byteParameter"));
        setFieldValue(model, "shortParameter", toShort(params.getValue("shortParameter"), HttpModelType.PARAMETER, "shortParameter"));
        setFieldValue(model, "intParameter", toInteger(params.getValue("intParameter"), HttpModelType.PARAMETER, "intParameter"));
        setFieldValue(model, "longParameter", toLong(params.getValue("longParameter"), HttpModelType.PARAMETER, "longParameter"));
        setFieldValue(model, "bigIntParameter", toBigInteger(params.getValue("bigIntParameter"), HttpModelType.PARAMETER, "bigIntParameter"));
        setFieldValue(model, "floatParameter", toFloat(params.getValue("floatParameter"), HttpModelType.PARAMETER, "floatParameter"));
        setFieldValue(model, "doubleParameter", toDouble(params.getValue("doubleParameter"), HttpModelType.PARAMETER, "doubleParameter"));
        setFieldValue(model, "decimalParameter", toBigDecimal(params.getValue("decimalParameter"), HttpModelType.PARAMETER, "decimalParameter"));
        setFieldValue(model, "charParameter", toCharacter(params.getValue("charParameter"), HttpModelType.PARAMETER, "charParameter"));
        setFieldValue(model, "stringParameter", toString(params.getValue("stringParameter"), HttpModelType.PARAMETER, "stringParameter"));
        setFieldValue(model, "instantParameter", toInstant(params.getValue("instantParameter"), HttpModelType.PARAMETER, "instantParameter"));
        setFieldValue(model, "status", toEnum(Status.class, params.getValue("status"), HttpModelType.PARAMETER, "status"));
        setFieldValue(model, "booleanParameters", toBooleanList(params.getValues("booleanParameters"), HttpModelType.PARAMETER, "booleanParameters"));
        setFieldValue(model, "byteParameters", toByteList(params.getValues("byteParameters"), HttpModelType.PARAMETER, "byteParameters"));
        setFieldValue(model, "shortParameters", toShortList(params.getValues("shortParameters"), HttpModelType.PARAMETER, "shortParameters"));
        setFieldValue(model, "intParameters", toIntegerList(params.getValues("intParameters"), HttpModelType.PARAMETER, "intParameters"));
        setFieldValue(model, "longParameters", toLongList(params.getValues("longParameters"), HttpModelType.PARAMETER, "longParameters"));
        setFieldValue(model, "bigIntParameters", toBigIntegerList(params.getValues("bigIntParameters"), HttpModelType.PARAMETER, "bigIntParameters"));
        setFieldValue(model, "floatParameters", toFloatList(params.getValues("floatParameters"), HttpModelType.PARAMETER, "floatParameters"));
        setFieldValue(model, "doubleParameters", toDoubleList(params.getValues("doubleParameters"), HttpModelType.PARAMETER, "doubleParameters"));
        setFieldValue(model, "decimalParameters", toBigDecimalList(params.getValues("decimalParameters"), HttpModelType.PARAMETER, "decimalParameters"));
        setFieldValue(model, "charParameters", toCharacterList(params.getValues("charParameters"), HttpModelType.PARAMETER, "charParameters"));
        setFieldValue(model, "stringParameters", toStringList(params.getValues("stringParameters"), HttpModelType.PARAMETER, "stringParameters"));
        setFieldValue(model, "instantParameters", toInstantList(params.getValues("instantParameters"), HttpModelType.PARAMETER, "instantParameters"));
        setFieldValue(model, "statuses", toEnumList(Status.class, params.getValues("statuses"), HttpModelType.PARAMETER, "statuses"));
        setFieldValue(model, "booleanParameterSet", toBooleanSet(params.getValues("booleanParameterSet"), HttpModelType.PARAMETER, "booleanParameterSet"));
        setFieldValue(model, "byteParameterSet", toByteSet(params.getValues("byteParameterSet"), HttpModelType.PARAMETER, "byteParameterSet"));
        setFieldValue(model, "shortParameterSet", toShortSet(params.getValues("shortParameterSet"), HttpModelType.PARAMETER, "shortParameterSet"));
        setFieldValue(model, "intParameterSet", toIntegerSet(params.getValues("intParameterSet"), HttpModelType.PARAMETER, "intParameterSet"));
        setFieldValue(model, "longParameterSet", toLongSet(params.getValues("longParameterSet"), HttpModelType.PARAMETER, "longParameterSet"));
        setFieldValue(model, "bigIntParameterSet", toBigIntegerSet(params.getValues("bigIntParameterSet"), HttpModelType.PARAMETER, "bigIntParameterSet"));
        setFieldValue(model, "floatParameterSet", toFloatSet(params.getValues("floatParameterSet"), HttpModelType.PARAMETER, "floatParameterSet"));
        setFieldValue(model, "doubleParameterSet", toDoubleSet(params.getValues("doubleParameterSet"), HttpModelType.PARAMETER, "doubleParameterSet"));
        setFieldValue(model, "decimalParameterSet", toBigDecimalSet(params.getValues("decimalParameterSet"), HttpModelType.PARAMETER, "decimalParameterSet"));
        setFieldValue(model, "charParameterSet", toCharacterSet(params.getValues("charParameterSet"), HttpModelType.PARAMETER, "charParameterSet"));
        setFieldValue(model, "stringParameterSet", toStringSet(params.getValues("stringParameterSet"), HttpModelType.PARAMETER, "stringParameterSet"));
        setFieldValue(model, "instantParameterSet", toInstantSet(params.getValues("instantParameterSet"), HttpModelType.PARAMETER, "instantParameterSet"));
        setFieldValue(model, "statusSet", toEnumSet(Status.class, params.getValues("statusSet"), HttpModelType.PARAMETER, "statusSet"));
        return model;
    }
}
