package io.rxmicro.examples.rest.controller.model.fields.params.gettersetter;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.http.QueryParams;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$QueryRequestModelReader extends ModelReader<QueryRequest> {

    @Override
    public QueryRequest read(final PathVariableMapping pathVariableMapping,
                             final HttpRequest request,
                             final boolean readParametersFromBody) {
        final QueryRequest model = new QueryRequest();
        final QueryParams params = extractParams(request.getQueryString());
        model.setBooleanParameter(toBoolean(params.getValue("booleanParameter"), HttpModelType.parameter, "booleanParameter"));
        model.setByteParameter(toByte(params.getValue("byteParameter"), HttpModelType.parameter, "byteParameter"));
        model.setShortParameter(toShort(params.getValue("shortParameter"), HttpModelType.parameter, "shortParameter"));
        model.setIntParameter(toInteger(params.getValue("intParameter"), HttpModelType.parameter, "intParameter"));
        model.setLongParameter(toLong(params.getValue("longParameter"), HttpModelType.parameter, "longParameter"));
        model.setBigIntParameter(toBigInteger(params.getValue("bigIntParameter"), HttpModelType.parameter, "bigIntParameter"));
        model.setFloatParameter(toFloat(params.getValue("floatParameter"), HttpModelType.parameter, "floatParameter"));
        model.setDoubleParameter(toDouble(params.getValue("doubleParameter"), HttpModelType.parameter, "doubleParameter"));
        model.setDecimalParameter(toBigDecimal(params.getValue("decimalParameter"), HttpModelType.parameter, "decimalParameter"));
        model.setCharParameter(toCharacter(params.getValue("charParameter"), HttpModelType.parameter, "charParameter"));
        model.setStringParameter(toString(params.getValue("stringParameter"), HttpModelType.parameter, "stringParameter"));
        model.setInstantParameter(toInstant(params.getValue("instantParameter"), HttpModelType.parameter, "instantParameter"));
        model.setStatus(toEnum(Status.class, params.getValue("status"), HttpModelType.parameter, "status"));
        model.setBooleanParameters(toBooleanArray(params.getValues("booleanParameters"), HttpModelType.parameter, "booleanParameters"));
        model.setByteParameters(toByteArray(params.getValues("byteParameters"), HttpModelType.parameter, "byteParameters"));
        model.setShortParameters(toShortArray(params.getValues("shortParameters"), HttpModelType.parameter, "shortParameters"));
        model.setIntParameters(toIntegerArray(params.getValues("intParameters"), HttpModelType.parameter, "intParameters"));
        model.setLongParameters(toLongArray(params.getValues("longParameters"), HttpModelType.parameter, "longParameters"));
        model.setBigIntParameters(toBigIntegerArray(params.getValues("bigIntParameters"), HttpModelType.parameter, "bigIntParameters"));
        model.setFloatParameters(toFloatArray(params.getValues("floatParameters"), HttpModelType.parameter, "floatParameters"));
        model.setDoubleParameters(toDoubleArray(params.getValues("doubleParameters"), HttpModelType.parameter, "doubleParameters"));
        model.setDecimalParameters(toBigDecimalArray(params.getValues("decimalParameters"), HttpModelType.parameter, "decimalParameters"));
        model.setCharParameters(toCharacterArray(params.getValues("charParameters"), HttpModelType.parameter, "charParameters"));
        model.setStringParameters(toStringArray(params.getValues("stringParameters"), HttpModelType.parameter, "stringParameters"));
        model.setInstantParameters(toInstantArray(params.getValues("instantParameters"), HttpModelType.parameter, "instantParameters"));
        model.setStatuses(toEnumArray(Status.class, params.getValues("statuses"), HttpModelType.parameter, "statuses"));
        return model;
    }
}
