package io.rxmicro.examples.rest.controller.model.fields.params.direct;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.http.QueryParams;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$QueryRequestModelReader extends ModelReader<QueryRequest> {

    @Override
    public QueryRequest read(final PathVariableMapping pathVariableMapping,
                             final HttpRequest request,
                             final boolean readParametersFromBody) {
        final QueryRequest model = new QueryRequest();
        final QueryParams params = extractParams(request.getQueryString());
        model.booleanParameter = toBoolean(params.getValue("booleanParameter"), HttpModelType.parameter, "booleanParameter");
        model.byteParameter = toByte(params.getValue("byteParameter"), HttpModelType.parameter, "byteParameter");
        model.shortParameter = toShort(params.getValue("shortParameter"), HttpModelType.parameter, "shortParameter");
        model.intParameter = toInteger(params.getValue("intParameter"), HttpModelType.parameter, "intParameter");
        model.longParameter = toLong(params.getValue("longParameter"), HttpModelType.parameter, "longParameter");
        model.bigIntParameter = toBigInteger(params.getValue("bigIntParameter"), HttpModelType.parameter, "bigIntParameter");
        model.floatParameter = toFloat(params.getValue("floatParameter"), HttpModelType.parameter, "floatParameter");
        model.doubleParameter = toDouble(params.getValue("doubleParameter"), HttpModelType.parameter, "doubleParameter");
        model.decimalParameter = toBigDecimal(params.getValue("decimalParameter"), HttpModelType.parameter, "decimalParameter");
        model.charParameter = toCharacter(params.getValue("charParameter"), HttpModelType.parameter, "charParameter");
        model.stringParameter = toString(params.getValue("stringParameter"), HttpModelType.parameter, "stringParameter");
        model.instantParameter = toInstant(params.getValue("instantParameter"), HttpModelType.parameter, "instantParameter");
        model.status = toEnum(Status.class, params.getValue("status"), HttpModelType.parameter, "status");
        model.booleanParameters = toBooleanArray(params.getValues("booleanParameters"), HttpModelType.parameter, "booleanParameters");
        model.byteParameters = toByteArray(params.getValues("byteParameters"), HttpModelType.parameter, "byteParameters");
        model.shortParameters = toShortArray(params.getValues("shortParameters"), HttpModelType.parameter, "shortParameters");
        model.intParameters = toIntegerArray(params.getValues("intParameters"), HttpModelType.parameter, "intParameters");
        model.longParameters = toLongArray(params.getValues("longParameters"), HttpModelType.parameter, "longParameters");
        model.bigIntParameters = toBigIntegerArray(params.getValues("bigIntParameters"), HttpModelType.parameter, "bigIntParameters");
        model.floatParameters = toFloatArray(params.getValues("floatParameters"), HttpModelType.parameter, "floatParameters");
        model.doubleParameters = toDoubleArray(params.getValues("doubleParameters"), HttpModelType.parameter, "doubleParameters");
        model.decimalParameters = toBigDecimalArray(params.getValues("decimalParameters"), HttpModelType.parameter, "decimalParameters");
        model.charParameters = toCharacterArray(params.getValues("charParameters"), HttpModelType.parameter, "charParameters");
        model.stringParameters = toStringArray(params.getValues("stringParameters"), HttpModelType.parameter, "stringParameters");
        model.instantParameters = toInstantArray(params.getValues("instantParameters"), HttpModelType.parameter, "instantParameters");
        model.statuses = toEnumArray(Status.class, params.getValues("statuses"), HttpModelType.parameter, "statuses");
        return model;
    }
}
