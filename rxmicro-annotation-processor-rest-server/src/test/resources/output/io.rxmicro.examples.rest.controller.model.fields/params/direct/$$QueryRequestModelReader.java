package io.rxmicro.examples.rest.controller.model.fields.params.direct;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.http.QueryParams;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$QueryRequestModelReader extends ModelReader<QueryRequest> {

    @Override
    public QueryRequest read(final PathVariableMapping pathVariableMapping,
                             final HttpRequest request,
                             final boolean readParametersFromBody) {
        final QueryRequest model = new QueryRequest();
        final QueryParams params = extractParams(request.getQueryString());
        model.booleanParameter = toBoolean(params.getValue("booleanParameter"), HttpModelType.PARAMETER, "booleanParameter");
        model.byteParameter = toByte(params.getValue("byteParameter"), HttpModelType.PARAMETER, "byteParameter");
        model.shortParameter = toShort(params.getValue("shortParameter"), HttpModelType.PARAMETER, "shortParameter");
        model.intParameter = toInteger(params.getValue("intParameter"), HttpModelType.PARAMETER, "intParameter");
        model.longParameter = toLong(params.getValue("longParameter"), HttpModelType.PARAMETER, "longParameter");
        model.bigIntParameter = toBigInteger(params.getValue("bigIntParameter"), HttpModelType.PARAMETER, "bigIntParameter");
        model.floatParameter = toFloat(params.getValue("floatParameter"), HttpModelType.PARAMETER, "floatParameter");
        model.doubleParameter = toDouble(params.getValue("doubleParameter"), HttpModelType.PARAMETER, "doubleParameter");
        model.decimalParameter = toBigDecimal(params.getValue("decimalParameter"), HttpModelType.PARAMETER, "decimalParameter");
        model.charParameter = toCharacter(params.getValue("charParameter"), HttpModelType.PARAMETER, "charParameter");
        model.stringParameter = toString(params.getValue("stringParameter"), HttpModelType.PARAMETER, "stringParameter");
        model.instantParameter = toInstant(params.getValue("instantParameter"), HttpModelType.PARAMETER, "instantParameter");
        model.status = toEnum(Status.class, params.getValue("status"), HttpModelType.PARAMETER, "status");
        model.booleanParameters = toBooleanList(params.getValues("booleanParameters"), HttpModelType.PARAMETER, "booleanParameters");
        model.byteParameters = toByteList(params.getValues("byteParameters"), HttpModelType.PARAMETER, "byteParameters");
        model.shortParameters = toShortList(params.getValues("shortParameters"), HttpModelType.PARAMETER, "shortParameters");
        model.intParameters = toIntegerList(params.getValues("intParameters"), HttpModelType.PARAMETER, "intParameters");
        model.longParameters = toLongList(params.getValues("longParameters"), HttpModelType.PARAMETER, "longParameters");
        model.bigIntParameters = toBigIntegerList(params.getValues("bigIntParameters"), HttpModelType.PARAMETER, "bigIntParameters");
        model.floatParameters = toFloatList(params.getValues("floatParameters"), HttpModelType.PARAMETER, "floatParameters");
        model.doubleParameters = toDoubleList(params.getValues("doubleParameters"), HttpModelType.PARAMETER, "doubleParameters");
        model.decimalParameters = toBigDecimalList(params.getValues("decimalParameters"), HttpModelType.PARAMETER, "decimalParameters");
        model.charParameters = toCharacterList(params.getValues("charParameters"), HttpModelType.PARAMETER, "charParameters");
        model.stringParameters = toStringList(params.getValues("stringParameters"), HttpModelType.PARAMETER, "stringParameters");
        model.instantParameters = toInstantList(params.getValues("instantParameters"), HttpModelType.PARAMETER, "instantParameters");
        model.statuses = toEnumList(Status.class, params.getValues("statuses"), HttpModelType.PARAMETER, "statuses");
        model.booleanParameterSet = toBooleanSet(params.getValues("booleanParameterSet"), HttpModelType.PARAMETER, "booleanParameterSet");
        model.byteParameterSet = toByteSet(params.getValues("byteParameterSet"), HttpModelType.PARAMETER, "byteParameterSet");
        model.shortParameterSet = toShortSet(params.getValues("shortParameterSet"), HttpModelType.PARAMETER, "shortParameterSet");
        model.intParameterSet = toIntegerSet(params.getValues("intParameterSet"), HttpModelType.PARAMETER, "intParameterSet");
        model.longParameterSet = toLongSet(params.getValues("longParameterSet"), HttpModelType.PARAMETER, "longParameterSet");
        model.bigIntParameterSet = toBigIntegerSet(params.getValues("bigIntParameterSet"), HttpModelType.PARAMETER, "bigIntParameterSet");
        model.floatParameterSet = toFloatSet(params.getValues("floatParameterSet"), HttpModelType.PARAMETER, "floatParameterSet");
        model.doubleParameterSet = toDoubleSet(params.getValues("doubleParameterSet"), HttpModelType.PARAMETER, "doubleParameterSet");
        model.decimalParameterSet = toBigDecimalSet(params.getValues("decimalParameterSet"), HttpModelType.PARAMETER, "decimalParameterSet");
        model.charParameterSet = toCharacterSet(params.getValues("charParameterSet"), HttpModelType.PARAMETER, "charParameterSet");
        model.stringParameterSet = toStringSet(params.getValues("stringParameterSet"), HttpModelType.PARAMETER, "stringParameterSet");
        model.instantParameterSet = toInstantSet(params.getValues("instantParameterSet"), HttpModelType.PARAMETER, "instantParameterSet");
        model.statusSet = toEnumSet(Status.class, params.getValues("statusSet"), HttpModelType.PARAMETER, "statusSet");
        return model;
    }
}
