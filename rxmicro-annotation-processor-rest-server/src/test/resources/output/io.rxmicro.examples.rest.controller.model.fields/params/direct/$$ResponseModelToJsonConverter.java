package io.rxmicro.examples.rest.controller.model.fields.params.direct;

import io.rxmicro.examples.rest.controller.model.fields.params.direct.nested.$$NestedModelToJsonConverter;
import io.rxmicro.exchange.json.detail.ModelToJsonConverter;
import io.rxmicro.json.JsonObjectBuilder;

import java.util.Map;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ResponseModelToJsonConverter extends ModelToJsonConverter<Response> {

    private final $$NestedModelToJsonConverter nestedModelToJsonConverter =
            new $$NestedModelToJsonConverter();

    @Override
    public Map<String, Object> toJsonObject(final Response model) {
        final JsonObjectBuilder builder = new JsonObjectBuilder();
        putValues(model, builder);
        return builder.build();
    }

    protected void putValues(final Response model,
                             final JsonObjectBuilder builder) {
        builder.put("booleanParameter", model.booleanParameter);
        builder.put("byteParameter", model.byteParameter);
        builder.put("shortParameter", model.shortParameter);
        builder.put("intParameter", model.intParameter);
        builder.put("longParameter", model.longParameter);
        builder.put("bigIntParameter", model.bigIntParameter);
        builder.put("floatParameter", model.floatParameter);
        builder.put("doubleParameter", model.doubleParameter);
        builder.put("decimalParameter", model.decimalParameter);
        builder.put("charParameter", model.charParameter);
        builder.put("stringParameter", model.stringParameter);
        builder.put("instantParameter", model.instantParameter);
        builder.put("status", model.status);
        builder.put("booleanParameters", model.booleanParameters);
        builder.put("byteParameters", model.byteParameters);
        builder.put("shortParameters", model.shortParameters);
        builder.put("intParameters", model.intParameters);
        builder.put("longParameters", model.longParameters);
        builder.put("bigIntParameters", model.bigIntParameters);
        builder.put("floatParameters", model.floatParameters);
        builder.put("doubleParameters", model.doubleParameters);
        builder.put("decimalParameters", model.decimalParameters);
        builder.put("charParameters", model.charParameters);
        builder.put("stringParameters", model.stringParameters);
        builder.put("instantParameters", model.instantParameters);
        builder.put("statuses", model.statuses);
        builder.put("booleanParameterSet", model.booleanParameterSet);
        builder.put("byteParameterSet", model.byteParameterSet);
        builder.put("shortParameterSet", model.shortParameterSet);
        builder.put("intParameterSet", model.intParameterSet);
        builder.put("longParameterSet", model.longParameterSet);
        builder.put("bigIntParameterSet", model.bigIntParameterSet);
        builder.put("floatParameterSet", model.floatParameterSet);
        builder.put("doubleParameterSet", model.doubleParameterSet);
        builder.put("decimalParameterSet", model.decimalParameterSet);
        builder.put("charParameterSet", model.charParameterSet);
        builder.put("stringParameterSet", model.stringParameterSet);
        builder.put("instantParameterSet", model.instantParameterSet);
        builder.put("statusSet", model.statusSet);
        builder.put("nested", convertFromObjectIfNotNull(nestedModelToJsonConverter, model.nested));
        builder.put("nestedList", convertFromListIfNotNull(nestedModelToJsonConverter, model.nestedList));
        builder.put("nestedSet", convertFromSetIfNotNull(nestedModelToJsonConverter, model.nestedSet));
        builder.put("booleanData", model.booleanData);
        builder.put("byteData", model.byteData);
        builder.put("shortData", model.shortData);
        builder.put("integerData", model.integerData);
        builder.put("longData", model.longData);
        builder.put("bigIntegerData", model.bigIntegerData);
        builder.put("floatData", model.floatData);
        builder.put("doubleData", model.doubleData);
        builder.put("bigDecimalData", model.bigDecimalData);
        builder.put("characterData", model.characterData);
        builder.put("stringData", model.stringData);
        builder.put("enumData", model.enumData);
        builder.put("instantData", model.instantData);
        builder.put("nestedMap", convertFromMapIfNotNull(nestedModelToJsonConverter, model.nestedMap));
    }
}
