package io.rxmicro.examples.rest.controller.model.fields.pathvariables.reflection;

import io.rxmicro.examples.rest.controller.model.fields.Status;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.ModelReader;
import io.rxmicro.rest.server.detail.model.HttpRequest;

import static rxmicro.$$Reflections.setFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RequestModelReader extends ModelReader<Request> {

    @Override
    public Request read(final PathVariableMapping pathVariableMapping,
                        final HttpRequest request,
                        final boolean readParametersFromBody) {
        final Request model = new Request();
        read(pathVariableMapping, request, model);
        return model;
    }

    protected void read(final PathVariableMapping pathVariableMapping,
                        final HttpRequest request,
                        final Request model) {
        setFieldValue(model, "booleanParameter", toBoolean(pathVariableMapping.getValue("a"), HttpModelType.PATH, "a"));
        setFieldValue(model, "byteParameter", toByte(pathVariableMapping.getValue("b"), HttpModelType.PATH, "b"));
        setFieldValue(model, "shortParameter", toShort(pathVariableMapping.getValue("c"), HttpModelType.PATH, "c"));
        setFieldValue(model, "intParameter", toInteger(pathVariableMapping.getValue("d"), HttpModelType.PATH, "d"));
        setFieldValue(model, "longParameter", toLong(pathVariableMapping.getValue("e"), HttpModelType.PATH, "e"));
        setFieldValue(model, "bigIntParameter", toBigInteger(pathVariableMapping.getValue("f"), HttpModelType.PATH, "f"));
        setFieldValue(model, "floatParameter", toFloat(pathVariableMapping.getValue("g"), HttpModelType.PATH, "g"));
        setFieldValue(model, "doubleParameter", toDouble(pathVariableMapping.getValue("h"), HttpModelType.PATH, "h"));
        setFieldValue(model, "decimalParameter", toBigDecimal(pathVariableMapping.getValue("i"), HttpModelType.PATH, "i"));
        setFieldValue(model, "charParameter", toCharacter(pathVariableMapping.getValue("j"), HttpModelType.PATH, "j"));
        setFieldValue(model, "stringParameter", toString(pathVariableMapping.getValue("k"), HttpModelType.PATH, "k"));
        setFieldValue(model, "instantParameter", toInstant(pathVariableMapping.getValue("l"), HttpModelType.PATH, "l"));
        setFieldValue(model, "status", toEnum(Status.class, pathVariableMapping.getValue("m"), HttpModelType.PATH, "m"));
    }
}
