package io.rxmicro.examples.rest.controller.model.fields.internals;

import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$VirtualInternalsMicroService extends AbstractRestController {

    private VirtualInternalsMicroService restController;

    private $$VirtualVirtualInternalsRequestModelReader virtualVirtualInternalsRequestModelReader;

    @Override
    protected void postConstruct() {
        restController = new VirtualInternalsMicroService();
        virtualVirtualInternalsRequestModelReader = new $$VirtualVirtualInternalsRequestModelReader();
    }

    @Override
    public Class<?> getRestControllerClass() {
        return VirtualInternalsMicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "put(io.rxmicro.rest.server.detail.model.HttpRequest,io.rxmicro.http.HttpVersion,io.rxmicro.http.HttpHeaders,java.net.SocketAddress,java.lang.String,java.lang.String,java.lang.String,byte[],java.lang.String)",
                        this::put,
                        false,
                        new ExactUrlRequestMappingRule(
                                "PUT",
                                "/internals/virtual",
                                true
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> put(final PathVariableMapping pathVariableMapping,
                                              final HttpRequest request) {
        final $$VirtualVirtualInternalsRequest req = virtualVirtualInternalsRequestModelReader.read(pathVariableMapping, request, request.contentExists());
        final HttpHeaders headers = HttpHeaders.of();
        restController.put(req.request, req.version, req.headers, req.remoteAddress1, req.remoteAddress2, req.urlPath, req.method, req.body, req.id);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
