package io.rxmicro.examples.validation.server.extendable.model.all_models_contain_fields.child;

import io.rxmicro.examples.validation.server.extendable.model.all_models_contain_fields.parent.$$ParentConstraintValidator;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.UppercaseConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ChildConstraintValidator implements ConstraintValidator<Child> {

    private final $$ParentConstraintValidator parentValidator =
            new $$ParentConstraintValidator();

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    private final UppercaseConstraintValidator uppercaseConstraintValidator =
            getStatelessValidator(UppercaseConstraintValidator.class);

    @Override
    public void validateNonNull(final Child model,
                                final HttpModelType httpModelType,
                                final String name) {
        parentValidator.validate(model, httpModelType, name);
        requiredAndNotEmptyStringConstraintValidator.validate(model.childParameter, HttpModelType.PARAMETER, "childParameter");
        uppercaseConstraintValidator.validate(model.childParameter, HttpModelType.PARAMETER, "childParameter");
    }
}
