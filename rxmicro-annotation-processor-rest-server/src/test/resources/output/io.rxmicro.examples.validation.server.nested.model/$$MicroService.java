package io.rxmicro.examples.validation.server.nested.model;

import io.rxmicro.examples.validation.server.nested.model.model.$$ArrayRequestConstraintValidator;
import io.rxmicro.examples.validation.server.nested.model.model.$$ArrayRequestModelReader;
import io.rxmicro.examples.validation.server.nested.model.model.$$ObjectRequestConstraintValidator;
import io.rxmicro.examples.validation.server.nested.model.model.$$ObjectRequestModelReader;
import io.rxmicro.examples.validation.server.nested.model.model.ArrayRequest;
import io.rxmicro.examples.validation.server.nested.model.model.ObjectRequest;
import io.rxmicro.http.HttpHeaders;
import io.rxmicro.rest.model.PathVariableMapping;
import io.rxmicro.rest.server.detail.component.AbstractRestController;
import io.rxmicro.rest.server.detail.component.RestControllerRegistrar;
import io.rxmicro.rest.server.detail.model.HttpRequest;
import io.rxmicro.rest.server.detail.model.HttpResponse;
import io.rxmicro.rest.server.detail.model.Registration;
import io.rxmicro.rest.server.detail.model.mapping.ExactUrlRequestMappingRule;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$MicroService extends AbstractRestController {

    private MicroService restController;

    private $$ArrayRequestModelReader arrayRequestModelReader;

    private $$ObjectRequestModelReader objectRequestModelReader;

    private $$ArrayRequestConstraintValidator arrayRequestConstraintValidator;

    private $$ObjectRequestConstraintValidator objectRequestConstraintValidator;

    @Override
    protected void postConstruct() {
        restController = new MicroService();
        arrayRequestModelReader = new $$ArrayRequestModelReader();
        objectRequestModelReader = new $$ObjectRequestModelReader();
        arrayRequestConstraintValidator = new $$ArrayRequestConstraintValidator();
        objectRequestConstraintValidator = new $$ObjectRequestConstraintValidator();
    }

    @Override
    public Class<?> getRestControllerClass() {
        return MicroService.class;
    }

    @Override
    public void register(final RestControllerRegistrar registrar) {
        registrar.register(
                this,
                new Registration(
                        "/",
                        "consume1",
                        List.of(
                                io.rxmicro.examples.validation.server.nested.model.model.ObjectRequest.class
                        ),
                        this::consume1,
                        false,
                        new ExactUrlRequestMappingRule(
                                "POST",
                                "/consume1",
                                true
                        )
                ),
                new Registration(
                        "/",
                        "consume2",
                        List.of(
                                io.rxmicro.examples.validation.server.nested.model.model.ArrayRequest.class
                        ),
                        this::consume2,
                        false,
                        new ExactUrlRequestMappingRule(
                                "POST",
                                "/consume2",
                                true
                        )
                )
        );
    }

    private CompletionStage<HttpResponse> consume1(final PathVariableMapping pathVariableMapping,
                                                   final HttpRequest request) {
        final ObjectRequest req = objectRequestModelReader.read(pathVariableMapping, request, request.isContentPresent());
        objectRequestConstraintValidator.validate(req);
        final HttpHeaders headers = HttpHeaders.of();
        restController.consume1(req);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private CompletionStage<HttpResponse> consume2(final PathVariableMapping pathVariableMapping,
                                                   final HttpRequest request) {
        final ArrayRequest req = arrayRequestModelReader.read(pathVariableMapping, request, request.isContentPresent());
        arrayRequestConstraintValidator.validate(req);
        final HttpHeaders headers = HttpHeaders.of();
        restController.consume2(req);
        return CompletableFuture.completedStage(buildResponse(200, headers));
    }

    private HttpResponse buildResponse(final int statusCode,
                                       final HttpHeaders headers) {
        final HttpResponse response = httpResponseBuilder.build();
        response.setStatus(statusCode);
        response.setOrAddHeaders(headers);
        return response;
    }
}
