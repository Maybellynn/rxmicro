package io.rxmicro.examples.data.mongo.update;

import com.mongodb.reactivestreams.client.FindPublisher;
import com.mongodb.reactivestreams.client.MongoDatabase;
import io.rxmicro.data.mongo.detail.AbstractMongoRepository;
import io.rxmicro.examples.data.mongo.update.model.$$AccountEntityEntityFromMongoDBConverter;
import io.rxmicro.examples.data.mongo.update.model.AccountEntity;
import io.rxmicro.examples.data.mongo.update.model.Role;
import org.bson.Document;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.util.List;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$MongoVerificationRepository extends AbstractMongoRepository implements VerificationRepository {

    private final $$AccountEntityEntityFromMongoDBConverter accountEntityEntityFromMongoDBConverter =
            new $$AccountEntityEntityFromMongoDBConverter();

    public $$MongoVerificationRepository(final MongoDatabase mongoDatabase) {
        super(VerificationRepository.class, mongoDatabase.getCollection("account"));
    }

    @Override
    public Mono<AccountEntity> findAccountById(final long id) {
        // query = "{_id: ?}
        final Document query = new Document("_id", id);
        final FindPublisher<Document> result = collection
                .find(query)
                .returnKey(false);
        return Mono.from(result)
                .map(accountEntityEntityFromMongoDBConverter::fromDB);
    }

    @Override
    public Mono<BigDecimal> findBalanceById(final long id) {
        // query = "{_id: ?}
        final Document query = new Document("_id", id);
        return Mono.from(collection
                .distinct("balance", query, BigDecimal.class));
    }

    @Override
    public Mono<List<BigDecimal>> findBalanceByRole(final Role role) {
        // query = "{role: ?}
        final Document query = new Document("role", role);
        return Flux.from(collection
                .distinct("balance", query, BigDecimal.class))
                .collectList();
    }

    @Override
    public Mono<List<BigDecimal>> findAllBalance() {
        return Flux.from(collection
                .distinct("balance", BigDecimal.class))
                .collectList();
    }
}
