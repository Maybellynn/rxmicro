package io.rxmicro.examples.data.mongo.update;

import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.result.UpdateResult;
import com.mongodb.reactivestreams.client.MongoDatabase;
import io.rxmicro.data.mongo.detail.AbstractMongoRepository;
import io.rxmicro.data.mongo.detail.MongoQueries;
import io.rxmicro.examples.data.mongo.update.model.$$AccountDocumentEntityToMongoDBConverter;
import io.rxmicro.examples.data.mongo.update.model.$$AccountEntityEntityToMongoDBConverter;
import io.rxmicro.examples.data.mongo.update.model.AccountDocument;
import io.rxmicro.examples.data.mongo.update.model.AccountEntity;
import io.rxmicro.examples.data.mongo.update.model.Role;
import org.bson.Document;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$MongoDataRepository extends AbstractMongoRepository implements DataRepository {

    private final $$AccountDocumentEntityToMongoDBConverter accountDocumentEntityToMongoDBConverter =
            new $$AccountDocumentEntityToMongoDBConverter();

    private final $$AccountEntityEntityToMongoDBConverter accountEntityEntityToMongoDBConverter =
            new $$AccountEntityEntityToMongoDBConverter();

    public $$MongoDataRepository(final MongoDatabase mongoDatabase) {
        super(DataRepository.class, mongoDatabase.getCollection("account"));
    }

    @Override
    public Mono<Boolean> updateEntity(final AccountEntity accountEntity) {
        final Document filter = new Document("_id", accountEntityEntityToMongoDBConverter.getId(accountEntity));
        final Document update = new Document("$set", accountEntityEntityToMongoDBConverter.toDB(accountEntity, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result)
                .map(r -> r.getModifiedCount() == 1);
    }

    @Override
    public Mono<Void> updateDocument(final AccountDocument accountDocument, final long id) {
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Document update = new Document("$set", accountDocumentEntityToMongoDBConverter.toDB(accountDocument, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result).then();
    }

    @Override
    public Mono<Long> updateById(final BigDecimal balance, final long id) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result)
                .map(r -> r.getModifiedCount());
    }

    @Override
    public Mono<UpdateResult> updateByRole(final BigDecimal balance, final Role role) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{role: ?}
        final Document filter = new Document("role", role);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result);
    }

    @Override
    public Mono<UpdateResult> updateAll(final BigDecimal balance) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        MongoQueries.NULL,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result);
    }
}
