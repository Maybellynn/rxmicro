package io.rxmicro.examples.data.mongo.supported.types;

import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.result.UpdateResult;
import com.mongodb.reactivestreams.client.MongoDatabase;
import io.rxmicro.data.mongo.detail.AbstractMongoRepository;
import io.rxmicro.examples.data.mongo.supported.types.model.$$SupportedTypesDocumentEntityToMongoDBConverter;
import io.rxmicro.examples.data.mongo.supported.types.model.$$SupportedTypesEntityEntityToMongoDBConverter;
import io.rxmicro.examples.data.mongo.supported.types.model.Status;
import io.rxmicro.examples.data.mongo.supported.types.model.SupportedTypesDocument;
import io.rxmicro.examples.data.mongo.supported.types.model.SupportedTypesEntity;
import org.bson.Document;
import org.bson.types.ObjectId;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.UUID;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$MongoUpdateDataRepository extends AbstractMongoRepository implements UpdateDataRepository {

    private final $$SupportedTypesDocumentEntityToMongoDBConverter supportedTypesDocumentEntityToMongoDBConverter =
            new $$SupportedTypesDocumentEntityToMongoDBConverter();

    private final $$SupportedTypesEntityEntityToMongoDBConverter supportedTypesEntityEntityToMongoDBConverter =
            new $$SupportedTypesEntityEntityToMongoDBConverter();

    public $$MongoUpdateDataRepository(final MongoDatabase mongoDatabase) {
        super(UpdateDataRepository.class, mongoDatabase.getCollection("supportedTypes"));
    }

    @Override
    public Mono<Long> update1(final SupportedTypesEntity supportedTypesEntity) {
        final Document filter = new Document("_id", supportedTypesEntityEntityToMongoDBConverter.getId(supportedTypesEntity));
        final Document update = new Document("$set", supportedTypesEntityEntityToMongoDBConverter.toDB(supportedTypesEntity, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result)
                .map(r -> r.getModifiedCount());
    }

    @Override
    public Mono<Long> update2(final SupportedTypesDocument supportedTypesDocument, final ObjectId id) {
        // filter = "{ _id: ? }
        final Document filter = new Document("_id", id);
        final Document update = new Document("$set", supportedTypesDocumentEntityToMongoDBConverter.toDB(supportedTypesDocument, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result)
                .map(r -> r.getModifiedCount());
    }

    @Override
    public Mono<Long> update3() {
        // update = "{$set : {status: 'created', aBoolean : true, aByte : NumberInt(127), aShort : NumberInt(500), aInteger : NumberInt(1000), aLong : NumberLong(999999999999), bigDecimal : NumberDecimal('0.3'), character : 'y', string : 'string', instant : ISODate('2020-02-02T02:20:00.000Z'), uuid : BinData(03, 'Ej5FZ+ibEtOkVlVmQkQAAA==')}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("status", "created")
                        .append("aBoolean", true)
                        .append("aByte", 127)
                        .append("aShort", 500)
                        .append("aInteger", 1000)
                        .append("aLong", 999999999999L)
                        .append("bigDecimal", new BigDecimal("0.3"))
                        .append("character", "y")
                        .append("string", "string")
                        .append("instant", Instant.ofEpochMilli(1580610000000L))
                        .append("uuid", UUID.fromString("d3129be8-6745-3e12-0000-4442665556a4"))
                );
        // filter = "{ _id: ObjectId('507f1f77bcf86cd799439011') }
        final Document filter = new Document("_id", new ObjectId("507f1f77bcf86cd799439011"));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result)
                .map(r -> r.getModifiedCount());
    }

    @Override
    public Mono<Long> update4(final Status status, final boolean aBoolean, final byte aByte, final short aShort, final int aInteger, final long aLong, final BigDecimal bigDecimal, final Character character, final String string, final Instant instant, final UUID uuid, final ObjectId objectId) {
        // update = "{$set : {status: ?, aBoolean : ?, aByte : ?, aShort : ?, aInteger : ?, aLong : ?, bigDecimal : ?, character : ?, string : ?, instant : ?, uuid : ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("status", status)
                        .append("aBoolean", aBoolean)
                        .append("aByte", aByte)
                        .append("aShort", aShort)
                        .append("aInteger", aInteger)
                        .append("aLong", aLong)
                        .append("bigDecimal", bigDecimal)
                        .append("character", character)
                        .append("string", string)
                        .append("instant", instant)
                        .append("uuid", uuid)
                );
        // filter = "{ _id: ? }
        final Document filter = new Document("_id", objectId);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result)
                .map(r -> r.getModifiedCount());
    }
}
