package io.rxmicro.examples.data.mongo.basic;

import com.mongodb.reactivestreams.client.FindPublisher;
import com.mongodb.reactivestreams.client.MongoDatabase;
import io.rxmicro.data.mongo.detail.AbstractMongoRepository;
import io.rxmicro.examples.data.mongo.basic.model.$$AccountEntityFromMongoDBConverter;
import io.rxmicro.examples.data.mongo.basic.model.Account;
import org.bson.Document;
import reactor.core.publisher.Mono;

/**
 * Generated by rxmicro annotation processor
 */
public final class $$MongoDataRepository extends AbstractMongoRepository implements DataRepository {

    private final $$AccountEntityFromMongoDBConverter accountEntityFromMongoDBConverter =
            new $$AccountEntityFromMongoDBConverter();

    public $$MongoDataRepository(final MongoDatabase mongoDatabase) {
        super(DataRepository.class, mongoDatabase.getCollection("account"));
    }

    @Override
    public Mono<Account> findByEmail(final String email) {
        // query = "{email: ?}
        final Document query = new Document("email", email);
        final FindPublisher<Document> result = collection
                .find(query)
                .returnKey(false);
        return Mono.from(result)
                .map(accountEntityFromMongoDBConverter::fromDB);
    }
}
