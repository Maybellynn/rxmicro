package io.rxmicro.examples.data.mongo.delete;

import com.mongodb.reactivestreams.client.FindPublisher;
import com.mongodb.reactivestreams.client.MongoDatabase;
import io.rxmicro.data.mongo.detail.AbstractMongoRepository;
import io.rxmicro.examples.data.mongo.delete.model.$$AccountEntityFromMongoDBConverter;
import io.rxmicro.examples.data.mongo.delete.model.Account;
import io.rxmicro.examples.data.mongo.delete.model.Role;
import org.bson.Document;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$MongoVerificationRepository extends AbstractMongoRepository implements VerificationRepository {

    private final $$AccountEntityFromMongoDBConverter accountEntityFromMongoDBConverter =
            new $$AccountEntityFromMongoDBConverter();

    public $$MongoVerificationRepository(final MongoDatabase mongoDatabase) {
        super(VerificationRepository.class, mongoDatabase.getCollection("account"));
    }

    @Override
    public Mono<Account> findById(final long id) {
        // query = "{_id: ?}
        final Document query = new Document("_id", id);
        final FindPublisher<Document> result = collection
                .find(query)
                .returnKey(false);
        return Mono.from(result)
                .map(accountEntityFromMongoDBConverter::fromDB);
    }

    @Override
    public Flux<Account> findByRole(final Role role) {
        // query = "{role: ?}
        final Document query = new Document("role", role);
        final FindPublisher<Document> result = collection
                .find(query)
                .returnKey(false);
        return Flux.from(result)
                .map(accountEntityFromMongoDBConverter::fromDB);
    }
}
