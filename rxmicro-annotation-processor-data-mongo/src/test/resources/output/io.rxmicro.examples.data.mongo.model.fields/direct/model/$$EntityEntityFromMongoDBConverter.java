package io.rxmicro.examples.data.mongo.model.fields.direct.model;

import io.rxmicro.data.mongo.detail.EntityFromMongoDBConverter;
import io.rxmicro.examples.data.mongo.model.fields.Status;
import io.rxmicro.examples.data.mongo.model.fields.direct.model.nested.$$NestedEntityFromMongoDBConverter;
import org.bson.Document;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$EntityEntityFromMongoDBConverter extends EntityFromMongoDBConverter<Document, Entity> {

    private final $$NestedEntityFromMongoDBConverter nestedEntityFromMongoDBConverter =
            new $$NestedEntityFromMongoDBConverter();

    @Override
    public Entity fromDB(final Document document) {
        final Entity model = new Entity();
        model.id = toObjectId(document.get("_id"), "id");
        model.status = toEnum(Status.class, document.get("status"), "status");
        model.statusList = toEnumArray(Status.class, document.get("statusList"), "statusList");
        model.aBoolean = toBoolean(document.get("aBoolean"), "aBoolean");
        model.booleanList = toBooleanArray(document.get("booleanList"), "booleanList");
        model.aByte = toByte(document.get("aByte"), "aByte");
        model.byteList = toByteArray(document.get("byteList"), "byteList");
        model.aShort = toShort(document.get("aShort"), "aShort");
        model.shortList = toShortArray(document.get("shortList"), "shortList");
        model.aInteger = toInteger(document.get("aInteger"), "aInteger");
        model.integerList = toIntegerArray(document.get("integerList"), "integerList");
        model.aLong = toLong(document.get("aLong"), "aLong");
        model.longList = toLongArray(document.get("longList"), "longList");
        model.aFloat = toFloat(document.get("aFloat"), "aFloat");
        model.floatList = toFloatArray(document.get("floatList"), "floatList");
        model.aDouble = toDouble(document.get("aDouble"), "aDouble");
        model.doubleList = toDoubleArray(document.get("doubleList"), "doubleList");
        model.bigDecimal = toBigDecimal(document.get("bigDecimal"), "bigDecimal");
        model.bigDecimalList = toBigDecimalArray(document.get("bigDecimalList"), "bigDecimalList");
        model.character = toCharacter(document.get("character"), "character");
        model.characterList = toCharacterArray(document.get("characterList"), "characterList");
        model.string = toString(document.get("string"), "string");
        model.stringList = toStringArray(document.get("stringList"), "stringList");
        model.pattern = toPattern(document.get("pattern"), "pattern");
        model.patternList = toPatternArray(document.get("patternList"), "patternList");
        model.instant = toInstant(document.get("instant"), "instant");
        model.instantList = toInstantArray(document.get("instantList"), "instantList");
        model.localDate = toLocalDate(document.get("localDate"), "localDate");
        model.localDateList = toLocalDateArray(document.get("localDateList"), "localDateList");
        model.localDateTime = toLocalDateTime(document.get("localDateTime"), "localDateTime");
        model.localDateTimeList = toLocalDateTimeArray(document.get("localDateTimeList"), "localDateTimeList");
        model.localTime = toLocalTime(document.get("localTime"), "localTime");
        model.localTimeList = toLocalTimeArray(document.get("localTimeList"), "localTimeList");
        model.uuid = toUUID(document.get("uuid"), "uuid");
        model.uuidList = toUUIDArray(document.get("uuidList"), "uuidList");
        model.code = toCode(document.get("code"), "code");
        model.codeList = toCodeArray(document.get("codeList"), "codeList");
        model.binary = toBinary(document.get("binary"), "binary");
        model.binaryList = toBinaryArray(document.get("binaryList"), "binaryList");
        model.nested = convertIfNotNull(nestedEntityFromMongoDBConverter, toType(Document.class, document.get("nested"), "nested"));
        model.nestedList = convertIfNotNull(nestedEntityFromMongoDBConverter, toArray(Document.class, document.get("nestedList"), "nestedList"));
        return model;
    }
}
