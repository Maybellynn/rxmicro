package io.rxmicro.examples.data.mongo.model.fields.setter_getter.model;

import io.rxmicro.data.mongo.detail.EntityToMongoDBConverter;
import io.rxmicro.examples.data.mongo.model.fields.reflection.model.nested.$$NestedEntityToMongoDBConverter;
import org.bson.Document;

import static io.rxmicro.common.util.Requires.require;

/**
 * Generated by rxmicro annotation processor
 *
 * @link http://rxmicro.io
 */
public final class $$EntityEntityToMongoDBConverter extends EntityToMongoDBConverter<Entity, Document> {

    private final $$NestedEntityToMongoDBConverter nestedEntityToMongoDBConverter =
            new $$NestedEntityToMongoDBConverter();

    @Override
    public Document toDB(final Entity model,
                         final boolean withId) {
        final Document document = new Document();
        final Object id = model.getId();
        if (id != null && withId) {
            document.append("_id", id);
        }
        document.append("status", model.getStatus());
        document.append("statusList", model.getStatusList());
        document.append("aBoolean", model.getaBoolean());
        document.append("booleanList", model.getBooleanList());
        document.append("aByte", model.getaByte());
        document.append("byteList", model.getByteList());
        document.append("aShort", model.getaShort());
        document.append("shortList", model.getShortList());
        document.append("aInteger", model.getaInteger());
        document.append("integerList", model.getIntegerList());
        document.append("aLong", model.getaLong());
        document.append("longList", model.getLongList());
        document.append("aFloat", model.getaFloat());
        document.append("floatList", model.getFloatList());
        document.append("aDouble", model.getaDouble());
        document.append("doubleList", model.getDoubleList());
        document.append("bigDecimal", model.getBigDecimal());
        document.append("bigDecimalList", model.getBigDecimalList());
        document.append("character", model.getCharacter());
        document.append("characterList", model.getCharacterList());
        document.append("string", model.getString());
        document.append("stringList", model.getStringList());
        document.append("pattern", model.getPattern());
        document.append("patternList", model.getPatternList());
        document.append("instant", model.getInstant());
        document.append("instantList", model.getInstantList());
        document.append("localDate", model.getLocalDate());
        document.append("localDateList", model.getLocalDateList());
        document.append("localDateTime", model.getLocalDateTime());
        document.append("localDateTimeList", model.getLocalDateTimeList());
        document.append("localTime", model.getLocalTime());
        document.append("localTimeList", model.getLocalTimeList());
        document.append("uuid", model.getUuid());
        document.append("uuidList", model.getUuidList());
        document.append("code", model.getCode());
        document.append("codeList", model.getCodeList());
        document.append("binary", model.getBinary());
        document.append("binaryList", model.getBinaryList());
        document.append("nested", convertIfNotNull(nestedEntityToMongoDBConverter, model.getNested()));
        document.append("nestedList", convertIfNotNull(nestedEntityToMongoDBConverter, model.getNestedList()));
        return document;
    }

    @Override
    public Object getId(final Entity model) {
        return require(model.getId(), "Entity does not contain document id: ?", model);
    }

    @Override
    public void setId(final Document document,
                      final Entity model) {
        final Object id = document.get("_id");
        if (id != null) {
            model.setId(toObjectId(id, "id"));
        }
    }
}
