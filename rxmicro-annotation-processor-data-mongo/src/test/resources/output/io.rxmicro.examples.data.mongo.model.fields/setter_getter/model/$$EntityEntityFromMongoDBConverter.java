package io.rxmicro.examples.data.mongo.model.fields.setter_getter.model;

import io.rxmicro.data.mongo.detail.EntityFromMongoDBConverter;
import io.rxmicro.examples.data.mongo.model.fields.Status;
import io.rxmicro.examples.data.mongo.model.fields.reflection.model.nested.$$NestedEntityFromMongoDBConverter;
import org.bson.Document;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$EntityEntityFromMongoDBConverter extends EntityFromMongoDBConverter<Document, Entity> {

    private final $$NestedEntityFromMongoDBConverter nestedEntityFromMongoDBConverter =
            new $$NestedEntityFromMongoDBConverter();

    @Override
    public Entity fromDB(final Document document) {
        final Entity model = new Entity();
        model.setId(toObjectId(document.get("_id"), "id"));
        model.setStatus(toEnum(Status.class, document.get("status"), "status"));
        model.setStatusList(toEnumArray(Status.class, document.get("statusList"), "statusList"));
        model.setaBoolean(toBoolean(document.get("aBoolean"), "aBoolean"));
        model.setBooleanList(toBooleanArray(document.get("booleanList"), "booleanList"));
        model.setaByte(toByte(document.get("aByte"), "aByte"));
        model.setByteList(toByteArray(document.get("byteList"), "byteList"));
        model.setaShort(toShort(document.get("aShort"), "aShort"));
        model.setShortList(toShortArray(document.get("shortList"), "shortList"));
        model.setaInteger(toInteger(document.get("aInteger"), "aInteger"));
        model.setIntegerList(toIntegerArray(document.get("integerList"), "integerList"));
        model.setaLong(toLong(document.get("aLong"), "aLong"));
        model.setLongList(toLongArray(document.get("longList"), "longList"));
        model.setaFloat(toFloat(document.get("aFloat"), "aFloat"));
        model.setFloatList(toFloatArray(document.get("floatList"), "floatList"));
        model.setaDouble(toDouble(document.get("aDouble"), "aDouble"));
        model.setDoubleList(toDoubleArray(document.get("doubleList"), "doubleList"));
        model.setBigDecimal(toBigDecimal(document.get("bigDecimal"), "bigDecimal"));
        model.setBigDecimalList(toBigDecimalArray(document.get("bigDecimalList"), "bigDecimalList"));
        model.setCharacter(toCharacter(document.get("character"), "character"));
        model.setCharacterList(toCharacterArray(document.get("characterList"), "characterList"));
        model.setString(toString(document.get("string"), "string"));
        model.setStringList(toStringArray(document.get("stringList"), "stringList"));
        model.setPattern(toPattern(document.get("pattern"), "pattern"));
        model.setPatternList(toPatternArray(document.get("patternList"), "patternList"));
        model.setInstant(toInstant(document.get("instant"), "instant"));
        model.setInstantList(toInstantArray(document.get("instantList"), "instantList"));
        model.setLocalDate(toLocalDate(document.get("localDate"), "localDate"));
        model.setLocalDateList(toLocalDateArray(document.get("localDateList"), "localDateList"));
        model.setLocalDateTime(toLocalDateTime(document.get("localDateTime"), "localDateTime"));
        model.setLocalDateTimeList(toLocalDateTimeArray(document.get("localDateTimeList"), "localDateTimeList"));
        model.setLocalTime(toLocalTime(document.get("localTime"), "localTime"));
        model.setLocalTimeList(toLocalTimeArray(document.get("localTimeList"), "localTimeList"));
        model.setUuid(toUUID(document.get("uuid"), "uuid"));
        model.setUuidList(toUUIDArray(document.get("uuidList"), "uuidList"));
        model.setCode(toCode(document.get("code"), "code"));
        model.setCodeList(toCodeArray(document.get("codeList"), "codeList"));
        model.setBinary(toBinary(document.get("binary"), "binary"));
        model.setBinaryList(toBinaryArray(document.get("binaryList"), "binaryList"));
        model.setNested(convertIfNotNull(nestedEntityFromMongoDBConverter, toType(Document.class, document.get("nested"), "nested")));
        model.setNestedList(convertIfNotNull(nestedEntityFromMongoDBConverter, toArray(Document.class, document.get("nestedList"), "nestedList")));
        return model;
    }
}
