package io.rxmicro.examples.data.mongo.all.operations;

import com.mongodb.reactivestreams.client.MongoDatabase;
import io.reactivex.rxjava3.core.Single;
import io.rxmicro.data.detail.adapter.PublisherToRequiredMonoFutureAdapter;
import io.rxmicro.data.mongo.detail.AbstractMongoRepository;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by rxmicro annotation processor
 */
public final class $$MongoEstimatedDocumentCountDataRepository extends AbstractMongoRepository implements EstimatedDocumentCountDataRepository {

    public $$MongoEstimatedDocumentCountDataRepository(final MongoDatabase mongoDatabase) {
        super(EstimatedDocumentCountDataRepository.class, mongoDatabase.getCollection("collection"));
    }

    @Override
    public Mono<Long> estimatedDocumentCountMono() {
        return Mono.from(collection.estimatedDocumentCount());
    }

    @Override
    public Single<Long> estimatedDocumentCount() {
        return Single.fromPublisher(collection.estimatedDocumentCount());
    }

    @Override
    public CompletableFuture<Long> estimatedDocumentCountCompletableFuture() {
        return new PublisherToRequiredMonoFutureAdapter<>(
                collection.estimatedDocumentCount(),
                useOptionalExceptionSupplier(CompletableFuture.class, Long.class)
        );
    }

    @Override
    public CompletionStage<Long> estimatedDocumentCountCompletionStage() {
        return new PublisherToRequiredMonoFutureAdapter<>(
                collection.estimatedDocumentCount(),
                useOptionalExceptionSupplier(CompletionStage.class, Long.class)
        );
    }
}
