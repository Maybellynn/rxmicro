package io.rxmicro.examples.data.mongo.all.operations;

import com.mongodb.client.result.DeleteResult;
import com.mongodb.reactivestreams.client.MongoDatabase;
import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Single;
import io.rxmicro.data.detail.adapter.PublisherToRequiredMonoFutureAdapter;
import io.rxmicro.data.mongo.detail.AbstractMongoRepository;
import io.rxmicro.examples.data.mongo.all.operations.model.$$AccountEntityToMongoDBConverter;
import io.rxmicro.examples.data.mongo.all.operations.model.Account;
import io.rxmicro.examples.data.mongo.all.operations.model.Role;
import org.bson.Document;
import org.bson.types.ObjectId;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$MongoDeleteDataRepository extends AbstractMongoRepository implements DeleteDataRepository {

    private final $$AccountEntityToMongoDBConverter accountEntityToMongoDBConverter =
            new $$AccountEntityToMongoDBConverter();

    public $$MongoDeleteDataRepository(final MongoDatabase mongoDatabase) {
        super(DeleteDataRepository.class, mongoDatabase.getCollection("collection"));
    }

    @Override
    public Mono<Void> delete1(final ObjectId id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Mono.from(result).then();
    }

    @Override
    public Mono<Boolean> delete2(final Role id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Mono.from(result)
                .map(r -> r.getDeletedCount() == 1);
    }

    @Override
    public Mono<Long> delete3(final UUID id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Mono.from(result)
                .map(r -> r.getDeletedCount());
    }

    @Override
    public Mono<DeleteResult> delete4(final Byte id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Mono.from(result);
    }

    @Override
    public Completable delete5(final Short id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Completable.fromPublisher(result);
    }

    @Override
    public Single<Boolean> delete6(final Integer id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Single.fromPublisher(result)
                .map(r -> r.getDeletedCount() == 1);
    }

    @Override
    public Single<Long> delete7(final Long id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Single.fromPublisher(result)
                .map(r -> r.getDeletedCount());
    }

    @Override
    public Single<DeleteResult> delete8(final Float id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Single.fromPublisher(result);
    }

    @Override
    public CompletionStage<Void> delete9(final Double id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletionStage.class, Void.class)
        ).thenApply(r -> null);
    }

    @Override
    public CompletionStage<Boolean> delete10(final BigDecimal id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletionStage.class, Boolean.class)
        ).thenApply(r -> r.getDeletedCount() == 1);
    }

    @Override
    public CompletionStage<Long> delete11(final Character id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletionStage.class, Long.class)
        ).thenApply(r -> r.getDeletedCount());
    }

    @Override
    public CompletionStage<DeleteResult> delete12(final String id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletionStage.class, DeleteResult.class)
        );
    }

    @Override
    public CompletableFuture<Void> delete13(final Instant id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletableFuture.class, Void.class)
        ).thenApply(r -> null);
    }

    @Override
    public CompletableFuture<Boolean> delete14(final LocalDate id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletableFuture.class, Boolean.class)
        ).thenApply(r -> r.getDeletedCount() == 1);
    }

    @Override
    public CompletableFuture<Long> delete15(final LocalDateTime id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletableFuture.class, Long.class)
        ).thenApply(r -> r.getDeletedCount());
    }

    @Override
    public CompletableFuture<DeleteResult> delete16(final LocalTime id) {
        final Document filter = new Document("_id", id);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletableFuture.class, DeleteResult.class)
        );
    }

    @Override
    public Mono<Boolean> delete17(final Account account) {
        final Document filter = new Document("_id", accountEntityToMongoDBConverter.getId(account));
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Mono.from(result)
                .map(r -> r.getDeletedCount() == 1);
    }

    @Override
    public Mono<Boolean> delete18(final String email) {
        // filter = "{email: ?}
        final Document filter = new Document("email", email);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Mono.from(result)
                .map(r -> r.getDeletedCount() == 1);
    }

    @Override
    public Mono<Long> delete19(final Role role) {
        // filter = "{role: ?}
        final Document filter = new Document("role", role);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Mono.from(result)
                .map(r -> r.getDeletedCount());
    }

    @Override
    public Mono<DeleteResult> delete20(final BigDecimal balance) {
        // filter = "{$or: [ {balance: ?}, {balance: ?}, {balance: ?}, {balance: ?}]}
        final Document filter = new Document("$or", balance);
        final Publisher<DeleteResult> result = collection.deleteMany(filter);
        return Mono.from(result);
    }
}
