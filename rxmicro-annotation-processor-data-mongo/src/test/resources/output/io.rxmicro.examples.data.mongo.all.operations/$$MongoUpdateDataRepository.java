package io.rxmicro.examples.data.mongo.all.operations;

import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.result.UpdateResult;
import com.mongodb.reactivestreams.client.MongoDatabase;
import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Single;
import io.rxmicro.data.detail.adapter.PublisherToRequiredMonoFutureAdapter;
import io.rxmicro.data.mongo.detail.AbstractMongoRepository;
import io.rxmicro.examples.data.mongo.all.operations.model.$$AccountDocumentEntityToMongoDBConverter;
import io.rxmicro.examples.data.mongo.all.operations.model.$$AccountEntityToMongoDBConverter;
import io.rxmicro.examples.data.mongo.all.operations.model.Account;
import io.rxmicro.examples.data.mongo.all.operations.model.AccountDocument;
import io.rxmicro.examples.data.mongo.all.operations.model.Role;
import org.bson.Document;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

/**
 * Generated by rxmicro annotation processor
 */
public final class $$MongoUpdateDataRepository extends AbstractMongoRepository implements UpdateDataRepository {

    private final $$AccountDocumentEntityToMongoDBConverter accountDocumentEntityToMongoDBConverter =
            new $$AccountDocumentEntityToMongoDBConverter();

    private final $$AccountEntityToMongoDBConverter accountEntityToMongoDBConverter =
            new $$AccountEntityToMongoDBConverter();

    public $$MongoUpdateDataRepository(final MongoDatabase mongoDatabase) {
        super(UpdateDataRepository.class, mongoDatabase.getCollection("account"));
    }

    @Override
    public Mono<Void> updateEntity1(final Account account) {
        final Document filter = new Document("_id", accountEntityToMongoDBConverter.getId(account));
        final Document update = new Document("$set", accountEntityToMongoDBConverter.toDB(account, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result).then();
    }

    @Override
    public Mono<Boolean> updateDocument1(final AccountDocument accountDocument, final long id) {
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Document update = new Document("$set", accountDocumentEntityToMongoDBConverter.toDB(accountDocument, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result)
                .map(r -> r.getModifiedCount() == 1);
    }

    @Override
    public Mono<Long> updateById1(final BigDecimal balance, final long id) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result)
                .map(r -> r.getModifiedCount());
    }

    @Override
    public Mono<UpdateResult> updateByRole1(final BigDecimal balance, final Role role) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{role: ?}
        final Document filter = new Document("role", role);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Mono.from(result);
    }

    @Override
    public Completable updateEntity2(final Account account) {
        final Document filter = new Document("_id", accountEntityToMongoDBConverter.getId(account));
        final Document update = new Document("$set", accountEntityToMongoDBConverter.toDB(account, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Completable.fromPublisher(result);
    }

    @Override
    public Single<Boolean> updateDocument2(final AccountDocument accountDocument, final long id) {
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Document update = new Document("$set", accountDocumentEntityToMongoDBConverter.toDB(accountDocument, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Single.fromPublisher(result)
                .map(r -> r.getModifiedCount() == 1);
    }

    @Override
    public Single<Long> updateById2(final BigDecimal balance, final long id) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Single.fromPublisher(result)
                .map(r -> r.getModifiedCount());
    }

    @Override
    public Single<UpdateResult> updateByRole2(final BigDecimal balance, final Role role) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{role: ?}
        final Document filter = new Document("role", role);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return Single.fromPublisher(result);
    }

    @Override
    public CompletableFuture<Void> updateEntity3(final Account account) {
        final Document filter = new Document("_id", accountEntityToMongoDBConverter.getId(account));
        final Document update = new Document("$set", accountEntityToMongoDBConverter.toDB(account, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletableFuture.class, Void.class)
        ).thenApply(r -> null);
    }

    @Override
    public CompletableFuture<Boolean> updateDocument3(final AccountDocument accountDocument, final long id) {
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Document update = new Document("$set", accountDocumentEntityToMongoDBConverter.toDB(accountDocument, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletableFuture.class, Boolean.class)
        ).thenApply(r -> r.getModifiedCount() == 1);
    }

    @Override
    public CompletableFuture<Long> updateById3(final BigDecimal balance, final long id) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletableFuture.class, Long.class)
        ).thenApply(r -> r.getModifiedCount());
    }

    @Override
    public CompletableFuture<UpdateResult> updateByRole3(final BigDecimal balance, final Role role) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{role: ?}
        final Document filter = new Document("role", role);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletableFuture.class, UpdateResult.class)
        );
    }

    @Override
    public CompletionStage<Void> updateEntity4(final Account account) {
        final Document filter = new Document("_id", accountEntityToMongoDBConverter.getId(account));
        final Document update = new Document("$set", accountEntityToMongoDBConverter.toDB(account, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletionStage.class, Void.class)
        ).thenApply(r -> null);
    }

    @Override
    public CompletionStage<Boolean> updateDocument4(final AccountDocument accountDocument, final long id) {
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Document update = new Document("$set", accountDocumentEntityToMongoDBConverter.toDB(accountDocument, false));
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletionStage.class, Boolean.class)
        ).thenApply(r -> r.getModifiedCount() == 1);
    }

    @Override
    public CompletionStage<Long> updateById4(final BigDecimal balance, final long id) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{_id: ?}
        final Document filter = new Document("_id", id);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletionStage.class, Long.class)
        ).thenApply(r -> r.getModifiedCount());
    }

    @Override
    public CompletionStage<UpdateResult> updateByRole4(final BigDecimal balance, final Role role) {
        // update = "{$set: {balance: ?}}
        final Document update = new Document()
                .append("$set", new Document()
                        .append("balance", balance)
                );
        // filter = "{role: ?}
        final Document filter = new Document("role", role);
        final Publisher<UpdateResult> result = collection
                .updateMany(
                        filter,
                        update,
                        new UpdateOptions().upsert(false)
                );
        return new PublisherToRequiredMonoFutureAdapter<>(
                result,
                useOptionalExceptionSupplier(CompletionStage.class, UpdateResult.class)
        );
    }
}
