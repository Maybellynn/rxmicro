<#include "../../common-lib.javaftl">
<#-- -------------------------------------------------------------------------------------------------------- -->
public final class ${JAVA_MODEL_CLASS.entityFromDBConverterImplSimpleClassName} extends ${JAVA_MODEL_CLASS.entityFromDBConverterParentSimpleClassName}<Document, ${JAVA_MODEL_CLASS.javaSimpleClassName}> {

    <#list JAVA_MODEL_CONVERTER_CHILDREN as CHILD>
    private final ${CHILD.entityFromDBConverterImplSimpleClassName} ${CHILD.fromDBConverterInstanceName} =
            new ${CHILD.entityFromDBConverterImplSimpleClassName}();

    </#list>
    @Override
    public ${JAVA_MODEL_CLASS.javaSimpleClassName} fromDB(final Document document) {
        final ${JAVA_MODEL_CLASS.javaSimpleClassName} model = new ${JAVA_MODEL_CLASS.javaSimpleClassName}();
        <#list JAVA_MODEL_CLASS.paramEntries as fieldEntry>
        <@getParam entry=fieldEntry/>
        </#list>
        return model;
    }
}
<#-- -------------------------------------------------------------------------------------------------------- -->
<#macro getParam entry>
<#assign param = entry.key >
    <#if entry.value.object>
        <#assign element = entry.value>
        <#if param.modelWriteAccessorType.name() == "REFLECTION">
        setFieldValue(model, "${param.fieldName}", convertToObjectIfNotNull(${element.fromDBConverterInstanceName}, toType(Document.class, document.get("${param.modelName}"), "${param.fieldName}")));
        <#elseif param.modelWriteAccessorType.name() == "DIRECT">
        model.${param.fieldName} = convertToObjectIfNotNull(${element.fromDBConverterInstanceName}, toType(Document.class, document.get("${param.modelName}"), "${param.fieldName}"));
        <#elseif param.modelWriteAccessorType.name() == "JAVA_BEAN">
        model.${param.setter}(convertToObjectIfNotNull(${element.fromDBConverterInstanceName}, toType(Document.class, document.get("${param.modelName}"), "${param.fieldName}")));
        </#if>
    <#elseif entry.value.iterable>
        <#assign element = entry.value.elementModelClass>
        <#assign containerType = entry.value.containerType>
        <#if entry.value.primitiveIterable>
        <#assign M = element.primitiveType.convertMethod >
        <#if param.modelWriteAccessorType.name() == "REFLECTION">
        setFieldValue(model, "${param.fieldName}", ${M}${containerType}(document.get("${param.modelName}"), "${param.fieldName}"));
        <#elseif param.modelWriteAccessorType.name() == "DIRECT">
        model.${param.fieldName} = ${M}${containerType}(document.get("${param.modelName}"), "${param.fieldName}");
        <#elseif param.modelWriteAccessorType.name() == "JAVA_BEAN">
        model.${param.setter}(${M}${containerType}(document.get("${param.modelName}"), "${param.fieldName}"));
        </#if>
        <#elseif entry.value.enumIterable>
        <#if param.modelWriteAccessorType.name() == "REFLECTION">
        setFieldValue(model, "${param.fieldName}", toEnum${containerType}(${param.columnItemType}.class, document.get("${param.modelName}"), "${param.fieldName}"));
        <#elseif param.modelWriteAccessorType.name() == "DIRECT">
        model.${param.fieldName} = toEnum${containerType}(${param.columnItemType}.class, document.get("${param.modelName}"), "${param.fieldName}");
        <#elseif param.modelWriteAccessorType.name() == "JAVA_BEAN">
        model.${param.setter}(toEnum${containerType}(${param.columnItemType}.class, document.get("${param.modelName}"), "${param.fieldName}"));
        </#if>
        <#elseif entry.value.objectIterable>
        <#if param.modelWriteAccessorType.name()=="REFLECTION">
        setFieldValue(model, "${param.fieldName}", convertToListIfNotNull(${element.fromDBConverterInstanceName}, toList(Document.class, document.get("${param.modelName}"), "${param.fieldName}")));
        <#elseif param.modelWriteAccessorType.name()=="DIRECT">
        model.${param.fieldName} = convertToListIfNotNull(${element.fromDBConverterInstanceName}, toList(Document.class, document.get("${param.modelName}"), "${param.fieldName}"));
        <#elseif param.modelWriteAccessorType.name()=="JAVA_BEAN">
        model.${param.setter}(convertToListIfNotNull(${element.fromDBConverterInstanceName}, toList(Document.class, document.get("${param.modelName}"), "${param.fieldName}")));
        </#if>
        </#if>
    <#elseif entry.value.enum>
        <#assign M = entry.value.primitiveType.convertMethod >
        <#if param.modelWriteAccessorType.name() == "REFLECTION">
        setFieldValue(model, "${param.fieldName}", ${M}(${param.columnType}.class, document.get("${param.modelName}"), "${param.fieldName}"));
        <#elseif param.modelWriteAccessorType.name() == "DIRECT">
        model.${param.fieldName} = ${M}(${param.columnType}.class, document.get("${param.modelName}"), "${param.fieldName}");
        <#elseif param.modelWriteAccessorType.name() == "JAVA_BEAN">
        model.${param.setter}(${M}(${param.columnType}.class, document.get("${param.modelName}"), "${param.fieldName}"));
        </#if>
    <#elseif entry.value.primitive>
        <#assign M = entry.value.primitiveType.convertMethod >
        <#if param.modelWriteAccessorType.name() == "REFLECTION">
        setFieldValue(model, "${param.fieldName}", ${M}(document.get("${param.modelName}"), "${param.fieldName}"));
        <#elseif param.modelWriteAccessorType.name() == "DIRECT">
        model.${param.fieldName} = ${M}(document.get("${param.modelName}"), "${param.fieldName}");
        <#elseif param.modelWriteAccessorType.name() == "JAVA_BEAN">
        model.${param.setter}(${M}(document.get("${param.modelName}"), "${param.fieldName}"));
        </#if>
    </#if>
</#macro>
<#-- -------------------------------------------------------------------------------------------------------- -->