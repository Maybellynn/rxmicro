<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2020. https://rxmicro.io
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- ~~~~~~~ Root page: https://pmd.github.io/latest/pmd_rules_java.html ~~~~~~ -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- ~~~~~ https://pmd.github.io/latest/pmd_userdocs_making_rulesets.html ~~~~~ -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- ~~~~~~~ https://pmd.github.io/latest/pmd_rules_java_codestyle.html ~~~~~~~ -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<ruleset name="Default Maven PMD Plugin Ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0
                            http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>RxMicro odestyle ruleset</description>

    <!-- Autogenerated constructor by java compiler can be useful for some cases: -->
    <!-- rule ref="category/java/codestyle.xml/AtLeastOneConstructor">
        <properties>
            <property name="ignoredAnnotations"
                      value="lombok.Data|lombok.Value|lombok.Builder|lombok.NoArgsConstructor|
                             lombok.RequiredArgsConstructor|lombok.AllArgsConstructor" />
        </properties>
    </rule -->
    <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
    <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode"/>
    <rule ref="category/java/codestyle.xml/BooleanGetMethodName">
        <properties>
            <property name="checkParameterizedMethods" value="false"/>
        </properties>
    </rule>
    <!-- Conflicts with checkstyle:AvoidNoArgumentSuperConstructorCall rule: -->
    <!-- rule ref="category/java/codestyle.xml/CallSuperInConstructor" /-->
    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
        <properties>
            <property name="classPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="abstractClassPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="interfacePattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="enumPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="annotationPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="utilityClassPattern"
                      value="[A-Z][a-zA-Z0-9]+(Runtime|Factory|Helper|Customizer|Environment|s)"/>
        </properties>
    </rule>
    <!-- This rule is useful, but unfortunately IDEA breaks source code during auto formatting: -->
    <!-- rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier"/ -->

    <!-- This rule does not do anything useful: -->
    <!-- rule ref="category/java/codestyle.xml/ConfusingTernary"/ -->
    <rule ref="category/java/codestyle.xml/ControlStatementBraces">
        <properties>
            <property name="checkIfElseStmt" value="true"/>
            <property name="checkSingleIfStmt" value="true"/>
            <property name="checkWhileStmt" value="true"/>
            <property name="checkForStmt" value="true"/>
            <property name="checkDoWhileStmt" value="true"/>
            <property name="checkCaseStmt" value="false"/>
            <property name="allowEmptyLoop" value="false"/>
        </properties>
    </rule>
    <!-- Empty methods can reduce total amount of code: -->
    <!-- rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract" /-->
    <rule ref="category/java/codestyle.xml/ExtendsObject"/>
    <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass">
        <properties>
            <property name="ignoreEnumDeclarations" value="false"/>
            <property name="ignoreAnonymousClassDeclarations" value="false"/>
            <property name="ignoreInterfaceDeclarations" value="false"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/FieldNamingConventions">
        <properties>
            <property name="publicConstantPattern" value="[A-Z][A-Z_0-9]*"/>
            <property name="constantPattern" value="[A-Z][A-Z_0-9]*"/>
            <property name="enumConstantPattern" value="[A-Z][A-Z_0-9]*"/>
            <property name="finalFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="staticFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="defaultFieldPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="exclusions" value="serialVersionUID|serialPersistentFields"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>
    <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions">
        <properties>
            <property name="methodParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="finalMethodParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="lambdaParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="explicitLambdaParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
        </properties>
    </rule>
    <!-- A single letter is not enough to create a readable generic variable name: -->
    <!-- rule ref="category/java/codestyle.xml/GenericsNaming"/ -->
    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>
    <rule ref="category/java/codestyle.xml/LinguisticNaming">
        <properties>
            <!-- Wait for resolved: https://github.com/pmd/pmd/issues/2462 -->
            <property name="ignoredAnnotations"
                      value="java.lang.Override|io.rxmicro.common.meta.BuilderMethod|io.rxmicro.common.meta.ReactiveMethodResult"/>
            <property name="checkBooleanMethod" value="true"/>
            <property name="checkGetters" value="true"/>
            <property name="checkSetters" value="true"/>
            <property name="checkPrefixedTransformMethods" value="true"/>
            <property name="checkTransformMethods" value="false"/>
            <property name="booleanMethodPrefixes" value="is|has|can|have|will|should"/>
            <property name="transformMethodNames" value="to|as"/>
            <property name="checkFields" value="true"/>
            <property name="checkVariables" value="true"/>
            <property name="booleanFieldPrefixes" value="is|has|can|have|will|should"/>
        </properties>
    </rule>
    <!-- EJB specific rules: -->
    <!-- rule ref="category/java/codestyle.xml/LocalHomeNamingConvention"/>
    <rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention"/ -->
    <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal">
        <properties>
            <property name="ignoreForEachDecl" value="false"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions">
        <properties>
            <property name="localVarPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="finalVarPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="catchParameterPattern" value="[a-z][a-zA-Z0-9]*"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/LongVariable">
        <properties>
            <property name="minimum" value="49"/>
        </properties>
    </rule>
    <!-- EJB specific rule: -->
    <!-- rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention"/ -->
    <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal"/>
    <rule ref="category/java/codestyle.xml/MethodNamingConventions">
        <properties>
            <property name="methodPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="staticPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="nativePattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="junit3TestPattern" value="test[A-Z0-9][a-zA-Z0-9]*"/>
            <property name="junit4TestPattern" value="Should_[a-zA-Z0-9_]*|[a-z][a-zA-Z0-9_]*"/>
            <property name="junit5TestPattern" value="Should_[a-zA-Z0-9_]*|[a-z][a-zA-Z0-9_]*"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/NoPackage"/>
    <!-- It seems that this rule can't be applied for any complex project:-->
    <!-- rule ref="category/java/codestyle.xml/OnlyOneReturn"/ -->
    <rule ref="category/java/codestyle.xml/PackageCase"/>
    <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>
    <!-- EJB specific rules: -->
    <!-- rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention"/ -->
    <!-- rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention"/ -->
    <rule ref="category/java/codestyle.xml/ShortClassName">
        <properties>
            <property name="minimum" value="4"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ShortMethodName">
        <properties>
            <property name="minimum" value="2"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ShortVariable">
        <properties>
            <property name="minimum" value="2"/>
        </properties>
    </rule>
    <!-- The RxMicro framework team loves to use static imports.
         All modern IDEs can highlight static methods, so it can't be a problem: -->
    <!-- rule ref="category/java/codestyle.xml/TooManyStaticImports"/ -->
    <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryCast"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryConstructor">
        <properties>
            <property name="ignoredAnnotations" value="javax.inject.Inject"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryImport"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn">
        <properties>
            <property name="statementOrderMatters" value="true"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
    <rule ref="category/java/codestyle.xml/UseDiamondOperator">
        <properties>
            <property name="java7Compatibility" value="false"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/UselessParentheses"/>
    <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>
    <rule ref="category/java/codestyle.xml/UseShortArrayInitializer"/>
    <rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals">
        <properties>
            <property name="acceptableDecimalLength" value="4"/>
        </properties>
    </rule>
</ruleset>
