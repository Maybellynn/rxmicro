<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2020. https://rxmicro.io
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- ~~~~~~~ Root page: https://pmd.github.io/latest/pmd_rules_java.html ~~~~~~ -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- ~~~~~ https://pmd.github.io/latest/pmd_userdocs_making_rulesets.html ~~~~~ -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- ~~~~~~~~~ https://pmd.github.io/latest/pmd_rules_java_design.html ~~~~~~~~ -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<ruleset name="Default Maven PMD Plugin Ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0
                            http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>RxMicro design ruleset</description>

    <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod"/>
    <rule ref="category/java/design.xml/AvoidCatchingGenericException"/>
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
        <properties>
            <property name="problemDepth" value="3"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/AvoidRethrowingException"/>
    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>
    <rule ref="category/java/design.xml/AvoidThrowingNullPointerException"/>
    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes"/>
    <rule ref="category/java/design.xml/AvoidUncheckedExceptionsInSignatures"/>
    <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
    <rule ref="category/java/design.xml/CognitiveComplexity">
        <properties>
            <property name="reportLevel" value="42"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/CollapsibleIfStatements"/>
    <rule ref="category/java/design.xml/CouplingBetweenObjects">
        <properties>
            <property name="threshold" value="40"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <properties>
            <property name="classReportLevel" value="80"/>
            <property name="methodReportLevel" value="25"/>
            <property name="cycloOptions" value=""/>
        </properties>
    </rule>
    <!-- The RxMicro framework team prefers to use Java Beans than DataClasses: -->
    <!-- rule ref="category/java/design.xml/DataClass"/ -->
    <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
    <rule ref="category/java/design.xml/ExceptionAsFlowControl"/>
    <rule ref="category/java/design.xml/ExcessiveClassLength">
        <properties>
            <property name="minimum" value="1000.0"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/ExcessiveImports">
        <properties>
            <property name="minimum" value="100.0"/>
        </properties>
    </rule>
    <!-- Validated by checkstyle: -->
    <!-- rule ref="category/java/design.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="100.0" />
        </properties>
    </rule -->

    <!-- Validated by checkstyle: -->
    <!-- rule ref="category/java/design.xml/ExcessiveParameterList">
        <properties>
            <property name="minimum" value="10.0" />
        </properties>
    </rule -->
    <rule ref="category/java/design.xml/ExcessivePublicCount">
        <properties>
            <property name="minimum" value="45.0"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>
    <rule ref="category/java/design.xml/GodClass"/>
    <rule ref="category/java/design.xml/ImmutableField">
        <properties>
            <property name="ignoredAnnotations"
                      value="lombok.Setter|lombok.Getter|lombok.Builder|lombok.Data|
                             lombok.RequiredArgsConstructor|lombok.AllArgsConstructor|lombok.Value|lombok.NoArgsConstructor"/>
        </properties>
    </rule>
    <!-- This rule is very complex to support: -->
    <!-- rule ref="category/java/design.xml/LawOfDemeter"/ -->
    <rule ref="category/java/design.xml/LogicInversion"/>
    <!-- This rule is redundant, because JPMS solves this problem:  -->
    <!-- rule ref="category/java/design.xml/LoosePackageCoupling"/ -->
    <rule ref="category/java/design.xml/MutableStaticState"/>
    <rule ref="category/java/design.xml/NcssCount">
        <properties>
            <property name="methodReportLevel" value="60"/>
            <property name="classReportLevel" value="1500"/>
            <property name="ncssOptions" value=""/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/NPathComplexity">
        <properties>
            <property name="reportLevel" value="200"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/SignatureDeclareThrowsException">
        <properties>
            <property name="IgnoreJUnitCompletely" value="true"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/SimplifiedTernary"/>
    <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>
    <rule ref="category/java/design.xml/SimplifyBooleanReturns"/>
    <rule ref="category/java/design.xml/SimplifyConditional"/>
    <!-- This rule does not do anything useful: -->
    <!-- rule ref="category/java/design.xml/SingularField">
        <properties>
            <property name="ignoredAnnotations"
                      value="lombok.Setter|lombok.Getter|lombok.Builder|lombok.Data|lombok.RequiredArgsConstructor|
                             lombok.AllArgsConstructor|lombok.Value|lombok.NoArgsConstructor|lombok.EqualsAndHashCode|
                             lombok.experimental.Delegate" />
            <property name="checkInnerClasses" value="true" />
            <property name="disallowNotAssignment" value="true" />
        </properties>
    </rule -->
    <rule ref="category/java/design.xml/SwitchDensity">
        <properties>
            <property name="minimum" value="10.0"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/TooManyFields">
        <properties>
            <property name="maxfields" value="20"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="32"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/UselessOverridingMethod">
        <properties>
            <property name="ignoreAnnotations" value="false"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/UseObjectForClearerAPI"/>
    <rule ref="category/java/design.xml/UseUtilityClass">
        <properties>
            <property name="ignoredAnnotations" value="lombok.experimental.UtilityClass"/>
        </properties>
    </rule>
</ruleset>
