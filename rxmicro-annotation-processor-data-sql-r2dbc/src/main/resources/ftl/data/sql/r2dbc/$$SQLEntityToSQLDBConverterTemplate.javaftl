<#include "../../../common-lib.javaftl">
<#-- -------------------------------------------------------------------------------------------------------- -->
public final class ${JAVA_MODEL_CLASS.entityToDBConverterImplSimpleClassName} extends ${JAVA_MODEL_CLASS.entityToDBConverterParentSimpleClassName}<${JAVA_MODEL_CLASS.javaSimpleClassName}, Row> {
    <#if INSERTABLE_PARAMS??>

    private static final Class<?>[] INSERT_PARAM_TYPES = {
            <#list INSERTABLE_PARAMS as entry>
            <#if entry.key.insertValuePlaceholder>
            ${entry.key.fieldSimpleType}.class<#if entry?has_next>,</#if>
            </#if>
            </#list>
    };
    </#if>
    <#if UPDATABLE_PARAMS?? && PRIMARY_KEY_PARAMS??>

    private static final Class<?>[] UPDATE_PARAM_TYPES = {
            <#list UPDATABLE_PARAMS as entry>
            ${entry.key.fieldSimpleType}.class<#if entry?has_next>,</#if>
            </#list>
    };
    </#if>
    <#if INSERTABLE_PARAMS??>

    public Class<?>[] getInsertParamTypes() {
        return INSERT_PARAM_TYPES;
    }

    public Object[] getInsertParams(final ${JAVA_MODEL_CLASS.javaSimpleClassName} entity) {
        return new Object[]{
            <#list INSERTABLE_PARAMS as entry>
            <#if entry.key.insertValuePlaceholder>
            <@getParamItem entry=entry addComma=entry?has_next/>
            </#if>
            </#list>
        };
    }
    </#if>
    <#if UPDATABLE_PARAMS?? && PRIMARY_KEY_PARAMS??>

    public Class<?>[] getUpdateParamTypes() {
        return UPDATE_PARAM_TYPES;
    }

    public Object[] getUpdateParams(final ${JAVA_MODEL_CLASS.javaSimpleClassName} entity) {
        return new Object[]{
            <#list UPDATABLE_PARAMS as entry>
            <@getParamItem entry=entry addComma=true/>
            </#list>
            <#if PRIMARY_KEY_PARAMS?has_content>
                // primary key(s):
            <#list PRIMARY_KEY_PARAMS as entry>
            <@getPrimaryKey entry=entry addComma=entry?has_next/>
            </#list>
            </#if>
        };
    }
    </#if>
    <#if IS_DELETABLE && PRIMARY_KEY_PARAM??>

    public Object getPrimaryKey(final ${JAVA_MODEL_CLASS.javaSimpleClassName} entity) {
        <#assign RESULT><@getPrimaryKey entry=PRIMARY_KEY_PARAM addComma=false/></#assign>
        return ${RESULT?trim};
    }
    <#elseif IS_DELETABLE && PRIMARY_KEY_PARAMS??>

    public Object[] getPrimaryKeys(final ${JAVA_MODEL_CLASS.javaSimpleClassName} entity) {
        return new Object[]{
            <#list PRIMARY_KEY_PARAMS as entry>
            <@getPrimaryKey entry=entry addComma=entry?has_next/>
            </#list>
        };
    }
    </#if>
    <#list SET_ENTITY_FIELDS_CONVERTER_METHODS as method>

    public ${JAVA_MODEL_CLASS.javaSimpleClassName       } ${method.key       }(final ${JAVA_MODEL_CLASS.javaSimpleClassName} model,
           ${space(JAVA_MODEL_CLASS.javaSimpleClassName)} ${space(method.key)} final Row dbRow,
           ${space(JAVA_MODEL_CLASS.javaSimpleClassName)} ${space(method.key)} final RowMetadata metadata) {
        <#-- ---------------------------------------------------------------------------------------------------- -->
        <#list method.value as fieldEntry>
        <@getParam index=fieldEntry?index entry=fieldEntry/>
        </#list>
        return model;
    }
    </#list>
}
<#-- -------------------------------------------------------------------------------------------------------- -->
<#macro getParamItem entry addComma>
<#assign param = entry.key>
    <#if entry.value.primitive || entry.value.enum>
        <#if param.modelWriteAccessorType.name() == "REFLECTION">
                <#if param.lengthPresent>${param.trimMethodName}(</#if>getFieldValue(entity, "${param.fieldName}")<#if param.lengthPresent>, ${param.length})</#if><#if addComma>,</#if>
        <#elseif param.modelWriteAccessorType.name() == "DIRECT">
                <#if param.lengthPresent>${param.trimMethodName}(</#if>entity.${param.fieldName}<#if param.lengthPresent>, ${param.length})</#if><#if addComma>,</#if>
        <#elseif param.modelWriteAccessorType.name() == "JAVA_BEAN">
                <#if param.lengthPresent>${param.trimMethodName}(</#if>entity.${param.getter}()<#if param.lengthPresent>, ${param.length})</#if><#if addComma>,</#if>
        </#if>
    </#if>
</#macro>
<#-- -------------------------------------------------------------------------------------------------------- -->
<#macro getPrimaryKey entry addComma>
<#assign param = entry.key>
    <#if entry.value.primitive || entry.value.enum>
        <#if param.modelWriteAccessorType.name() == "REFLECTION">
                require(getFieldValue(entity, "${param.fieldName}"), "Primary key must be not null!")<#if addComma>,</#if>
        <#elseif param.modelWriteAccessorType.name() == "DIRECT">
                require(entity.${param.fieldName}, "Primary key must be not null!")<#if addComma>,</#if>
        <#elseif param.modelWriteAccessorType.name() == "JAVA_BEAN">
                require(entity.${param.getter}(), "Primary key must be not null!")<#if addComma>,</#if>
        </#if>
    </#if>
</#macro>
<#-- -------------------------------------------------------------------------------------------------------- -->
<#macro getParam index entry>
    <#assign param = entry.key>
    <#if entry.value.primitive || entry.value.enum>
      <#if param.modelWriteAccessorType.name() == "REFLECTION">
        setFieldValue(model, "${param.fieldName}", dbRow.get(${index}, ${param.columnType}.class));
      <#elseif param.modelWriteAccessorType.name() == "DIRECT">
        model.${param.fieldName} = dbRow.get(${index}, ${param.columnType}.class);
      <#elseif param.modelWriteAccessorType.name() == "JAVA_BEAN">
         model.${param.setter}(dbRow.get(${index}, ${param.columnType}.class));
      </#if>
    </#if>
</#macro>
<#-- -------------------------------------------------------------------------------------------------------- -->
