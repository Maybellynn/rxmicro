package io.rxmicro.examples.unnamed.module.rest.client.generator;

import io.rxmicro.examples.unnamed.module.rest.client.generator.model.$$RequestConstraintValidator;
import io.rxmicro.examples.unnamed.module.rest.client.generator.model.$$RequestRequestModelExtractor;
import io.rxmicro.examples.unnamed.module.rest.client.generator.model.$$ResponseModelReader;
import io.rxmicro.examples.unnamed.module.rest.client.generator.model.Request;
import io.rxmicro.examples.unnamed.module.rest.client.generator.model.Response;
import io.rxmicro.http.client.ClientHttpResponse;
import io.rxmicro.http.client.HttpClient;
import io.rxmicro.http.client.HttpClientConfig;
import io.rxmicro.http.error.ValidationException;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.QueryBuilder;

import java.util.concurrent.CompletableFuture;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RESTClient extends AbstractRestClient implements RESTClient {

    private final $$ResponseModelReader responseModelReader =
            new $$ResponseModelReader();

    private final $$RequestRequestModelExtractor requestRequestModelExtractor =
            new $$RequestRequestModelExtractor();

    private final $$RequestConstraintValidator requestConstraintValidator =
            new $$RequestConstraintValidator();

    private final HttpClient client;

    private final HttpClientConfig config;

    public $$RESTClient(final HttpClient client,
                        final HttpClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletableFuture<Response> get(final Request request) {
        try {
            requestConstraintValidator.validate(request);
        } catch (final ValidationException e) {
            return CompletableFuture.failedFuture(e);
        }
        final String path = "/";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseModelReader.readSingle(resp));
    }
}
