package io.rxmicro.examples.validation.client.all.types;

import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Single;
import io.rxmicro.examples.validation.client.all.types.model.$$RequestConstraintValidator;
import io.rxmicro.examples.validation.client.all.types.model.$$RequestModelToJsonConverter;
import io.rxmicro.examples.validation.client.all.types.model.$$ResponseConstraintValidator;
import io.rxmicro.examples.validation.client.all.types.model.$$ResponseModelReader;
import io.rxmicro.examples.validation.client.all.types.model.Request;
import io.rxmicro.examples.validation.client.all.types.model.Response;
import io.rxmicro.http.client.ClientHttpResponse;
import io.rxmicro.http.client.HttpClient;
import io.rxmicro.http.client.HttpClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;

import static io.rxmicro.rest.client.detail.ErrorResponseChecker.throwExceptionIfNotSuccess;
import static io.rxmicro.validation.detail.ResponseValidators.validateIfResponseExists;
import static io.rxmicro.validation.detail.ResponseValidators.validateResponse;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$RESTClient1 extends AbstractRestClient implements RESTClient1 {

    private final $$RequestModelToJsonConverter requestModelToJsonConverter =
            new $$RequestModelToJsonConverter();

    private final $$VirtualREST1Request2ModelToJsonConverter virtualREST1Request2ModelToJsonConverter =
            new $$VirtualREST1Request2ModelToJsonConverter();

    private final $$VirtualREST1Request5ModelToJsonConverter virtualREST1Request5ModelToJsonConverter =
            new $$VirtualREST1Request5ModelToJsonConverter();

    private final $$VirtualREST1RequestModelToJsonConverter virtualREST1RequestModelToJsonConverter =
            new $$VirtualREST1RequestModelToJsonConverter();

    private final $$ResponseModelReader responseModelReader =
            new $$ResponseModelReader();

    private final $$VirtualREST1Request3ModelToJsonConverter virtualREST1Request3ModelToJsonConverter =
            new $$VirtualREST1Request3ModelToJsonConverter();

    private final $$VirtualREST1Request6ModelToJsonConverter virtualREST1Request6ModelToJsonConverter =
            new $$VirtualREST1Request6ModelToJsonConverter();

    private final $$VirtualREST1Request4ModelToJsonConverter virtualREST1Request4ModelToJsonConverter =
            new $$VirtualREST1Request4ModelToJsonConverter();

    private final $$VirtualREST1Request2ConstraintValidator virtualREST1Request2ConstraintValidator =
            new $$VirtualREST1Request2ConstraintValidator();

    private final $$VirtualREST1Request3ConstraintValidator virtualREST1Request3ConstraintValidator =
            new $$VirtualREST1Request3ConstraintValidator();

    private final $$VirtualREST1Request6ConstraintValidator virtualREST1Request6ConstraintValidator =
            new $$VirtualREST1Request6ConstraintValidator();

    private final $$VirtualREST1Request4ConstraintValidator virtualREST1Request4ConstraintValidator =
            new $$VirtualREST1Request4ConstraintValidator();

    private final $$VirtualREST1Request5ConstraintValidator virtualREST1Request5ConstraintValidator =
            new $$VirtualREST1Request5ConstraintValidator();

    private final $$VirtualREST1RequestConstraintValidator virtualREST1RequestConstraintValidator =
            new $$VirtualREST1RequestConstraintValidator();

    private final $$RequestConstraintValidator requestConstraintValidator =
            new $$RequestConstraintValidator();

    private final $$ResponseConstraintValidator responseConstraintValidator =
            new $$ResponseConstraintValidator();

    private final HttpClient client;

    private final HttpClientConfig config;

    public $$RESTClient1(final HttpClient client,
                         final HttpClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletableFuture<Void> put1(final String email) {
        final $$VirtualREST1Request virtualRequest = new $$VirtualREST1Request(email);
        virtualREST1RequestConstraintValidator.validate(virtualRequest);
        final String path = "/put1";
        final Object body = virtualREST1RequestModelToJsonConverter.toJson(virtualRequest);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletableFuture<Void> put2(final Request request) {
        requestConstraintValidator.validate(request);
        final String path = "/put2";
        final Object body = requestModelToJsonConverter.toJson(request);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletableFuture<Void> put2() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", "/put3", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletableFuture<Response> put4(final String email) {
        final $$VirtualREST1Request2 virtualRequest = new $$VirtualREST1Request2(email);
        virtualREST1Request2ConstraintValidator.validate(virtualRequest);
        final String path = "/put4";
        final Object body = virtualREST1Request2ModelToJsonConverter.toJson(virtualRequest);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public CompletableFuture<Response> put5(final Request request) {
        requestConstraintValidator.validate(request);
        final String path = "/put5";
        final Object body = requestModelToJsonConverter.toJson(request);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public CompletableFuture<Response> put6() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", "/put6", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public Mono<Void> put7(final String email) {
        final $$VirtualREST1Request3 virtualRequest = new $$VirtualREST1Request3(email);
        virtualREST1Request3ConstraintValidator.validate(virtualRequest);
        final String path = "/put7";
        final Object body = virtualREST1Request3ModelToJsonConverter.toJson(virtualRequest);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .then();
    }

    @Override
    public Mono<Void> put8(final Request request) {
        requestConstraintValidator.validate(request);
        final String path = "/put8";
        final Object body = requestModelToJsonConverter.toJson(request);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .then();
    }

    @Override
    public Mono<Void> put9() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", "/put9", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .then();
    }

    @Override
    public Mono<Response> put10(final String email) {
        final $$VirtualREST1Request4 virtualRequest = new $$VirtualREST1Request4(email);
        virtualREST1Request4ConstraintValidator.validate(virtualRequest);
        final String path = "/put10";
        final Object body = virtualREST1Request4ModelToJsonConverter.toJson(virtualRequest);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .map(resp -> responseModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Mono<Response> put11(final Request request) {
        requestConstraintValidator.validate(request);
        final String path = "/put11";
        final Object body = requestModelToJsonConverter.toJson(request);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .map(resp -> responseModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Mono<Response> put12() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", "/put12", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .map(resp -> responseModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Completable put13(final String email) {
        final $$VirtualREST1Request5 virtualRequest = new $$VirtualREST1Request5(email);
        virtualREST1Request5ConstraintValidator.validate(virtualRequest);
        final String path = "/put13";
        final Object body = virtualREST1Request5ModelToJsonConverter.toJson(virtualRequest);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return Completable.fromCompletionStage(response);
    }

    @Override
    public Completable put14(final Request request) {
        requestConstraintValidator.validate(request);
        final String path = "/put14";
        final Object body = requestModelToJsonConverter.toJson(request);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return Completable.fromCompletionStage(response);
    }

    @Override
    public Completable put15() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", "/put15", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Completable.fromCompletionStage(response);
    }

    @Override
    public Single<Response> put16(final String email) {
        final $$VirtualREST1Request6 virtualRequest = new $$VirtualREST1Request6(email);
        virtualREST1Request6ConstraintValidator.validate(virtualRequest);
        final String path = "/put16";
        final Object body = virtualREST1Request6ModelToJsonConverter.toJson(virtualRequest);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return Single.fromCompletionStage(response)
                .map(resp -> responseModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Single<Response> put17(final Request request) {
        requestConstraintValidator.validate(request);
        final String path = "/put17";
        final Object body = requestModelToJsonConverter.toJson(request);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return Single.fromCompletionStage(response)
                .map(resp -> responseModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Single<Response> put18() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("PUT", "/put18", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Single.fromCompletionStage(response)
                .map(resp -> responseModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }
}
