package io.rxmicro.examples.rest.client.model.types;

import io.rxmicro.examples.rest.client.model.types.model.response.body.$$BodyOnlyResponseModelReader;
import io.rxmicro.examples.rest.client.model.types.model.response.body.$$BodyWithHeadersResponseModelReader;
import io.rxmicro.examples.rest.client.model.types.model.response.body.$$BodyWithInternalsAndHeadersResponseModelReader;
import io.rxmicro.examples.rest.client.model.types.model.response.body.$$BodyWithInternalsResponseModelReader;
import io.rxmicro.examples.rest.client.model.types.model.response.body.BodyOnlyResponse;
import io.rxmicro.examples.rest.client.model.types.model.response.body.BodyWithHeadersResponse;
import io.rxmicro.examples.rest.client.model.types.model.response.body.BodyWithInternalsAndHeadersResponse;
import io.rxmicro.examples.rest.client.model.types.model.response.body.BodyWithInternalsResponse;
import io.rxmicro.examples.rest.client.model.types.model.response.without_body.$$HeadersOnlyResponseModelReader;
import io.rxmicro.examples.rest.client.model.types.model.response.without_body.$$InternalsAndHeadersResponseModelReader;
import io.rxmicro.examples.rest.client.model.types.model.response.without_body.$$InternalsOnlyResponseModelReader;
import io.rxmicro.examples.rest.client.model.types.model.response.without_body.HeadersOnlyResponse;
import io.rxmicro.examples.rest.client.model.types.model.response.without_body.InternalsAndHeadersResponse;
import io.rxmicro.examples.rest.client.model.types.model.response.without_body.InternalsOnlyResponse;
import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.HttpClient;
import io.rxmicro.rest.client.detail.HttpResponse;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$GetterRestClient extends AbstractRestClient implements GetterRestClient {

    private final $$HeadersOnlyResponseModelReader headersOnlyResponseModelReader =
            new $$HeadersOnlyResponseModelReader();

    private final $$BodyWithInternalsResponseModelReader bodyWithInternalsResponseModelReader =
            new $$BodyWithInternalsResponseModelReader();

    private final $$BodyWithInternalsAndHeadersResponseModelReader bodyWithInternalsAndHeadersResponseModelReader =
            new $$BodyWithInternalsAndHeadersResponseModelReader();

    private final $$BodyOnlyResponseModelReader bodyOnlyResponseModelReader =
            new $$BodyOnlyResponseModelReader();

    private final $$InternalsOnlyResponseModelReader internalsOnlyResponseModelReader =
            new $$InternalsOnlyResponseModelReader();

    private final $$BodyWithHeadersResponseModelReader bodyWithHeadersResponseModelReader =
            new $$BodyWithHeadersResponseModelReader();

    private final $$InternalsAndHeadersResponseModelReader internalsAndHeadersResponseModelReader =
            new $$InternalsAndHeadersResponseModelReader();

    private final HttpClient client;

    private final RestClientConfig config;

    public $$GetterRestClient(final HttpClient client,
                              final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletionStage<BodyOnlyResponse> produce01() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/produce01", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> bodyOnlyResponseModelReader.readSingle(resp));
    }

    @Override
    public CompletionStage<BodyWithHeadersResponse> produce02() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/produce02", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> bodyWithHeadersResponseModelReader.readSingle(resp));
    }

    @Override
    public CompletionStage<BodyWithInternalsResponse> produce03() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/produce03", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> bodyWithInternalsResponseModelReader.readSingle(resp));
    }

    @Override
    public CompletionStage<BodyWithInternalsAndHeadersResponse> produce04() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/produce04", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> bodyWithInternalsAndHeadersResponseModelReader.readSingle(resp));
    }

    @Override
    public CompletionStage<HeadersOnlyResponse> produce11() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/produce11", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> headersOnlyResponseModelReader.readSingle(resp));
    }

    @Override
    public CompletionStage<InternalsOnlyResponse> produce12() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/produce12", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> internalsOnlyResponseModelReader.readSingle(resp));
    }

    @Override
    public CompletionStage<InternalsAndHeadersResponse> produce13() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/produce13", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> internalsAndHeadersResponseModelReader.readSingle(resp));
    }
}
