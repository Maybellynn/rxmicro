package io.rxmicro.examples.rest.client.headers;

import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.HeaderBuilder;
import io.rxmicro.rest.client.detail.HttpClient;
import io.rxmicro.rest.client.detail.HttpResponse;

import java.util.concurrent.CompletableFuture;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$StaticHeadersRestClient extends AbstractRestClient implements StaticHeadersRestClient {

    private final HttpClient client;

    private final RestClientConfig config;

    public $$StaticHeadersRestClient(final HttpClient client,
                                     final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletableFuture<Void> get1() {
        final HeaderBuilder headerBuilder = new HeaderBuilder();
        headerBuilder.add("Mode", "Demo");
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/get1", headerBuilder.build())
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletableFuture<Void> get2() {
        final HeaderBuilder headerBuilder = new HeaderBuilder();
        headerBuilder.add("Mode", "Demo");
        headerBuilder.add("Debug", "true");
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/get2", headerBuilder.build())
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }
}
