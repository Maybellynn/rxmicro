package io.rxmicro.examples.rest.client.model.field.access.params;

import io.rxmicro.examples.rest.client.model.field.access.Status;
import io.rxmicro.examples.rest.client.model.field.access.params.direct.nested.Nested;
import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.HttpClient;
import io.rxmicro.rest.client.detail.HttpResponse;
import io.rxmicro.rest.client.detail.QueryBuilder;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualParamsRestClient extends AbstractRestClient implements VirtualParamsRestClient {

    private final $$VirtualVirtualParamsRequest2ModelToJsonConverter virtualVirtualParamsRequest2ModelToJsonConverter =
            new $$VirtualVirtualParamsRequest2ModelToJsonConverter();

    private final $$VirtualVirtualParamsRequestRequestModelExtractor virtualVirtualParamsRequestRequestModelExtractor =
            new $$VirtualVirtualParamsRequestRequestModelExtractor();

    private final HttpClient client;

    private final RestClientConfig config;

    public $$VirtualParamsRestClient(final HttpClient client,
                                     final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletionStage<Void> get(final Boolean booleanParameter, final Byte byteParameter, final Short shortParameter, final Integer intParameter, final Long longParameter, final BigInteger bigIntParameter, final Float floatParameter, final Double doubleParameter, final BigDecimal decimalParameter, final Character charParameter, final String stringParameter, final Instant instantParameter, final Status enumParameter, final List<Boolean> booleanParameterList, final List<Byte> byteParameterList, final List<Short> shortParameterList, final List<Integer> intParameterList, final List<Long> longParameterList, final List<BigInteger> bigIntParameterList, final List<Float> floatParameterList, final List<Double> doubleParameterList, final List<BigDecimal> decimalParameterList, final List<Character> charParameterList, final List<String> stringParameterList, final List<Instant> instantParameterList, final List<Status> enumParameterList, final Set<Boolean> booleanParameterSet, final Set<Byte> byteParameterSet, final Set<Short> shortParameterSet, final Set<Integer> intParameterSet, final Set<Long> longParameterSet, final Set<BigInteger> bigIntParameterSet, final Set<Float> floatParameterSet, final Set<Double> doubleParameterSet, final Set<BigDecimal> decimalParameterSet, final Set<Character> charParameterSet, final Set<String> stringParameterSet, final Set<Instant> instantParameterSet, final Set<Status> enumParameterSet, final List<Status> repeatingStatuses, final Set<Status> repeatingStatusSet) {
        final $$VirtualVirtualParamsRequest virtualRequest = new $$VirtualVirtualParamsRequest(booleanParameter, byteParameter, shortParameter, intParameter, longParameter, bigIntParameter, floatParameter, doubleParameter, decimalParameter, charParameter, stringParameter, instantParameter, enumParameter, booleanParameterList, byteParameterList, shortParameterList, intParameterList, longParameterList, bigIntParameterList, floatParameterList, doubleParameterList, decimalParameterList, charParameterList, stringParameterList, instantParameterList, enumParameterList, booleanParameterSet, byteParameterSet, shortParameterSet, intParameterSet, longParameterSet, bigIntParameterSet, floatParameterSet, doubleParameterSet, decimalParameterSet, charParameterSet, stringParameterSet, instantParameterSet, enumParameterSet, repeatingStatuses, repeatingStatusSet);
        final String path = "/params/virtual";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualVirtualParamsRequestRequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletionStage<Void> put(final Boolean booleanParameter, final Byte byteParameter, final Short shortParameter, final Integer intParameter, final Long longParameter, final BigInteger bigIntParameter, final Float floatParameter, final Double doubleParameter, final BigDecimal decimalParameter, final Character charParameter, final String stringParameter, final Instant instantParameter, final Status enumParameter, final List<Boolean> booleanParameterList, final List<Byte> byteParameterList, final List<Short> shortParameterList, final List<Integer> intParameterList, final List<Long> longParameterList, final List<BigInteger> bigIntParameterList, final List<Float> floatParameterList, final List<Double> doubleParameterList, final List<BigDecimal> decimalParameterList, final List<Character> charParameterList, final List<String> stringParameterList, final List<Instant> instantParameterList, final List<Status> enumParameterList, final Set<Boolean> booleanParameterSet, final Set<Byte> byteParameterSet, final Set<Short> shortParameterSet, final Set<Integer> intParameterSet, final Set<Long> longParameterSet, final Set<BigInteger> bigIntParameterSet, final Set<Float> floatParameterSet, final Set<Double> doubleParameterSet, final Set<BigDecimal> decimalParameterSet, final Set<Character> charParameterSet, final Set<String> stringParameterSet, final Set<Instant> instantParameterSet, final Set<Status> enumParameterSet, final Map<String, Boolean> booleanParameterMap, final Map<String, Byte> byteParameterMap, final Map<String, Short> shortParameterMap, final Map<String, Integer> integerParameterMap, final Map<String, Long> longParameterMap, final Map<String, BigInteger> bigIntegerParameterMap, final Map<String, Float> floatParameterMap, final Map<String, Double> doubleParameterMap, final Map<String, BigDecimal> bigDecimalParameterMap, final Map<String, Character> characterParameterMap, final Map<String, String> stringParameterMap, final Map<String, Instant> instantParameterMap, final Map<String, Status> enumParameterMap, final Nested nested, final List<Nested> nestedList, final Set<Nested> nestedSet, final Map<String, Nested> nestedParameterMap) {
        final $$VirtualVirtualParamsRequest2 virtualRequest = new $$VirtualVirtualParamsRequest2(booleanParameter, byteParameter, shortParameter, intParameter, longParameter, bigIntParameter, floatParameter, doubleParameter, decimalParameter, charParameter, stringParameter, instantParameter, enumParameter, booleanParameterList, byteParameterList, shortParameterList, intParameterList, longParameterList, bigIntParameterList, floatParameterList, doubleParameterList, decimalParameterList, charParameterList, stringParameterList, instantParameterList, enumParameterList, booleanParameterSet, byteParameterSet, shortParameterSet, intParameterSet, longParameterSet, bigIntParameterSet, floatParameterSet, doubleParameterSet, decimalParameterSet, charParameterSet, stringParameterSet, instantParameterSet, enumParameterSet, booleanParameterMap, byteParameterMap, shortParameterMap, integerParameterMap, longParameterMap, bigIntegerParameterMap, floatParameterMap, doubleParameterMap, bigDecimalParameterMap, characterParameterMap, stringParameterMap, instantParameterMap, enumParameterMap, nested, nestedList, nestedSet, nestedParameterMap);
        final String path = "/params/virtual";
        final Object body = virtualVirtualParamsRequest2ModelToJsonConverter.toJson(virtualRequest);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }
}
