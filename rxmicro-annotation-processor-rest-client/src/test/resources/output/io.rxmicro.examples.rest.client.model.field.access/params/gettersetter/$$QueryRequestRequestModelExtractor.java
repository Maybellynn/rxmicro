package io.rxmicro.examples.rest.client.model.field.access.params.gettersetter;

import io.rxmicro.examples.rest.client.model.field.access.Status;
import io.rxmicro.rest.client.detail.QueryBuilder;
import io.rxmicro.rest.client.detail.RequestModelExtractor;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$QueryRequestRequestModelExtractor extends RequestModelExtractor<QueryRequest> {

    @Override
    public void extract(final QueryRequest model,
                        final QueryBuilder queryBuilder) {
        queryBuilder.add("booleanParameter", model.getBooleanParameter());
        queryBuilder.add("byteParameter", model.getByteParameter());
        queryBuilder.add("shortParameter", model.getShortParameter());
        queryBuilder.add("intParameter", model.getIntParameter());
        queryBuilder.add("longParameter", model.getLongParameter());
        queryBuilder.add("bigIntParameter", model.getBigIntParameter());
        queryBuilder.add("floatParameter", model.getFloatParameter());
        queryBuilder.add("doubleParameter", model.getDoubleParameter());
        queryBuilder.add("decimalParameter", model.getDecimalParameter());
        queryBuilder.add("charParameter", model.getCharParameter());
        queryBuilder.add("stringParameter", model.getStringParameter());
        queryBuilder.add("instantParameter", model.getInstantParameter());
        queryBuilder.add("enumParameter", model.getEnumParameter());
        queryBuilder.add("booleanParameterList", model.getBooleanParameterList());
        queryBuilder.add("byteParameterList", model.getByteParameterList());
        queryBuilder.add("shortParameterList", model.getShortParameterList());
        queryBuilder.add("intParameterList", model.getIntParameterList());
        queryBuilder.add("longParameterList", model.getLongParameterList());
        queryBuilder.add("bigIntParameterList", model.getBigIntParameterList());
        queryBuilder.add("floatParameterList", model.getFloatParameterList());
        queryBuilder.add("doubleParameterList", model.getDoubleParameterList());
        queryBuilder.add("decimalParameterList", model.getDecimalParameterList());
        queryBuilder.add("charParameterList", model.getCharParameterList());
        queryBuilder.add("stringParameterList", model.getStringParameterList());
        queryBuilder.add("instantParameterList", model.getInstantParameterList());
        queryBuilder.add("enumParameterList", model.getEnumParameterList());
        queryBuilder.add("booleanParameterSet", model.getBooleanParameterSet());
        queryBuilder.add("byteParameterSet", model.getByteParameterSet());
        queryBuilder.add("shortParameterSet", model.getShortParameterSet());
        queryBuilder.add("intParameterSet", model.getIntParameterSet());
        queryBuilder.add("longParameterSet", model.getLongParameterSet());
        queryBuilder.add("bigIntParameterSet", model.getBigIntParameterSet());
        queryBuilder.add("floatParameterSet", model.getFloatParameterSet());
        queryBuilder.add("doubleParameterSet", model.getDoubleParameterSet());
        queryBuilder.add("decimalParameterSet", model.getDecimalParameterSet());
        queryBuilder.add("charParameterSet", model.getCharParameterSet());
        queryBuilder.add("stringParameterSet", model.getStringParameterSet());
        queryBuilder.add("instantParameterSet", model.getInstantParameterSet());
        queryBuilder.add("enumParameterSet", model.getEnumParameterSet());
        for (final Status item : model.getRepeatingEnumParameterList()) {
            queryBuilder.add("repeatingEnumParameterList", item);
        }
        for (final Status item : model.getRepeatingEnumParameterSet()) {
            queryBuilder.add("repeatingEnumParameterSet", item);
        }
    }
}
