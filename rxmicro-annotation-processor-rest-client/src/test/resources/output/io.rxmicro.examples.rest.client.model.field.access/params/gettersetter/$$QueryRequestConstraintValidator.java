package io.rxmicro.examples.rest.client.model.field.access.params.gettersetter;

import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;
import io.rxmicro.validation.validator.RequiredSetConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$QueryRequestConstraintValidator implements ConstraintValidator<QueryRequest> {

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final RequiredSetConstraintValidator requiredSetConstraintValidator =
            getStatelessValidator(RequiredSetConstraintValidator.class);

    @Override
    public void validateNonNull(final QueryRequest model,
                                final ModelType httpModelType,
                                final String name) {
        requiredConstraintValidator.validate(model.getBooleanParameter(), HttpModelType.PARAMETER, "booleanParameter");

        requiredConstraintValidator.validate(model.getByteParameter(), HttpModelType.PARAMETER, "byteParameter");

        requiredConstraintValidator.validate(model.getShortParameter(), HttpModelType.PARAMETER, "shortParameter");

        requiredConstraintValidator.validate(model.getIntParameter(), HttpModelType.PARAMETER, "intParameter");

        requiredConstraintValidator.validate(model.getLongParameter(), HttpModelType.PARAMETER, "longParameter");

        requiredConstraintValidator.validate(model.getBigIntParameter(), HttpModelType.PARAMETER, "bigIntParameter");

        requiredConstraintValidator.validate(model.getFloatParameter(), HttpModelType.PARAMETER, "floatParameter");

        requiredConstraintValidator.validate(model.getDoubleParameter(), HttpModelType.PARAMETER, "doubleParameter");

        requiredConstraintValidator.validate(model.getDecimalParameter(), HttpModelType.PARAMETER, "decimalParameter");

        requiredConstraintValidator.validate(model.getCharParameter(), HttpModelType.PARAMETER, "charParameter");

        requiredAndNotEmptyStringConstraintValidator.validate(model.getStringParameter(), HttpModelType.PARAMETER, "stringParameter");

        requiredConstraintValidator.validate(model.getInstantParameter(), HttpModelType.PARAMETER, "instantParameter");

        requiredConstraintValidator.validate(model.getEnumParameter(), HttpModelType.PARAMETER, "enumParameter");

        requiredListConstraintValidator.validate(model.getBooleanParameterList(), HttpModelType.PARAMETER, "booleanParameterList");
        requiredConstraintValidator.validateIterable(model.getBooleanParameterList(), HttpModelType.PARAMETER, "booleanParameterList");

        requiredListConstraintValidator.validate(model.getByteParameterList(), HttpModelType.PARAMETER, "byteParameterList");
        requiredConstraintValidator.validateIterable(model.getByteParameterList(), HttpModelType.PARAMETER, "byteParameterList");

        requiredListConstraintValidator.validate(model.getShortParameterList(), HttpModelType.PARAMETER, "shortParameterList");
        requiredConstraintValidator.validateIterable(model.getShortParameterList(), HttpModelType.PARAMETER, "shortParameterList");

        requiredListConstraintValidator.validate(model.getIntParameterList(), HttpModelType.PARAMETER, "intParameterList");
        requiredConstraintValidator.validateIterable(model.getIntParameterList(), HttpModelType.PARAMETER, "intParameterList");

        requiredListConstraintValidator.validate(model.getLongParameterList(), HttpModelType.PARAMETER, "longParameterList");
        requiredConstraintValidator.validateIterable(model.getLongParameterList(), HttpModelType.PARAMETER, "longParameterList");

        requiredListConstraintValidator.validate(model.getBigIntParameterList(), HttpModelType.PARAMETER, "bigIntParameterList");
        requiredConstraintValidator.validateIterable(model.getBigIntParameterList(), HttpModelType.PARAMETER, "bigIntParameterList");

        requiredListConstraintValidator.validate(model.getFloatParameterList(), HttpModelType.PARAMETER, "floatParameterList");
        requiredConstraintValidator.validateIterable(model.getFloatParameterList(), HttpModelType.PARAMETER, "floatParameterList");

        requiredListConstraintValidator.validate(model.getDoubleParameterList(), HttpModelType.PARAMETER, "doubleParameterList");
        requiredConstraintValidator.validateIterable(model.getDoubleParameterList(), HttpModelType.PARAMETER, "doubleParameterList");

        requiredListConstraintValidator.validate(model.getDecimalParameterList(), HttpModelType.PARAMETER, "decimalParameterList");
        requiredConstraintValidator.validateIterable(model.getDecimalParameterList(), HttpModelType.PARAMETER, "decimalParameterList");

        requiredListConstraintValidator.validate(model.getCharParameterList(), HttpModelType.PARAMETER, "charParameterList");
        requiredConstraintValidator.validateIterable(model.getCharParameterList(), HttpModelType.PARAMETER, "charParameterList");

        requiredListConstraintValidator.validate(model.getStringParameterList(), HttpModelType.PARAMETER, "stringParameterList");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.getStringParameterList(), HttpModelType.PARAMETER, "stringParameterList");

        requiredListConstraintValidator.validate(model.getInstantParameterList(), HttpModelType.PARAMETER, "instantParameterList");
        requiredConstraintValidator.validateIterable(model.getInstantParameterList(), HttpModelType.PARAMETER, "instantParameterList");

        requiredListConstraintValidator.validate(model.getEnumParameterList(), HttpModelType.PARAMETER, "enumParameterList");
        requiredConstraintValidator.validateIterable(model.getEnumParameterList(), HttpModelType.PARAMETER, "enumParameterList");

        requiredSetConstraintValidator.validate(model.getBooleanParameterSet(), HttpModelType.PARAMETER, "booleanParameterSet");
        requiredConstraintValidator.validateIterable(model.getBooleanParameterSet(), HttpModelType.PARAMETER, "booleanParameterSet");

        requiredSetConstraintValidator.validate(model.getByteParameterSet(), HttpModelType.PARAMETER, "byteParameterSet");
        requiredConstraintValidator.validateIterable(model.getByteParameterSet(), HttpModelType.PARAMETER, "byteParameterSet");

        requiredSetConstraintValidator.validate(model.getShortParameterSet(), HttpModelType.PARAMETER, "shortParameterSet");
        requiredConstraintValidator.validateIterable(model.getShortParameterSet(), HttpModelType.PARAMETER, "shortParameterSet");

        requiredSetConstraintValidator.validate(model.getIntParameterSet(), HttpModelType.PARAMETER, "intParameterSet");
        requiredConstraintValidator.validateIterable(model.getIntParameterSet(), HttpModelType.PARAMETER, "intParameterSet");

        requiredSetConstraintValidator.validate(model.getLongParameterSet(), HttpModelType.PARAMETER, "longParameterSet");
        requiredConstraintValidator.validateIterable(model.getLongParameterSet(), HttpModelType.PARAMETER, "longParameterSet");

        requiredSetConstraintValidator.validate(model.getBigIntParameterSet(), HttpModelType.PARAMETER, "bigIntParameterSet");
        requiredConstraintValidator.validateIterable(model.getBigIntParameterSet(), HttpModelType.PARAMETER, "bigIntParameterSet");

        requiredSetConstraintValidator.validate(model.getFloatParameterSet(), HttpModelType.PARAMETER, "floatParameterSet");
        requiredConstraintValidator.validateIterable(model.getFloatParameterSet(), HttpModelType.PARAMETER, "floatParameterSet");

        requiredSetConstraintValidator.validate(model.getDoubleParameterSet(), HttpModelType.PARAMETER, "doubleParameterSet");
        requiredConstraintValidator.validateIterable(model.getDoubleParameterSet(), HttpModelType.PARAMETER, "doubleParameterSet");

        requiredSetConstraintValidator.validate(model.getDecimalParameterSet(), HttpModelType.PARAMETER, "decimalParameterSet");
        requiredConstraintValidator.validateIterable(model.getDecimalParameterSet(), HttpModelType.PARAMETER, "decimalParameterSet");

        requiredSetConstraintValidator.validate(model.getCharParameterSet(), HttpModelType.PARAMETER, "charParameterSet");
        requiredConstraintValidator.validateIterable(model.getCharParameterSet(), HttpModelType.PARAMETER, "charParameterSet");

        requiredSetConstraintValidator.validate(model.getStringParameterSet(), HttpModelType.PARAMETER, "stringParameterSet");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.getStringParameterSet(), HttpModelType.PARAMETER, "stringParameterSet");

        requiredSetConstraintValidator.validate(model.getInstantParameterSet(), HttpModelType.PARAMETER, "instantParameterSet");
        requiredConstraintValidator.validateIterable(model.getInstantParameterSet(), HttpModelType.PARAMETER, "instantParameterSet");

        requiredSetConstraintValidator.validate(model.getEnumParameterSet(), HttpModelType.PARAMETER, "enumParameterSet");
        requiredConstraintValidator.validateIterable(model.getEnumParameterSet(), HttpModelType.PARAMETER, "enumParameterSet");

        requiredListConstraintValidator.validate(model.getRepeatingEnumParameterList(), HttpModelType.PARAMETER, "repeatingEnumParameterList");
        requiredConstraintValidator.validateIterable(model.getRepeatingEnumParameterList(), HttpModelType.PARAMETER, "repeatingEnumParameterList");

        requiredSetConstraintValidator.validate(model.getRepeatingEnumParameterSet(), HttpModelType.PARAMETER, "repeatingEnumParameterSet");
        requiredConstraintValidator.validateIterable(model.getRepeatingEnumParameterSet(), HttpModelType.PARAMETER, "repeatingEnumParameterSet");
    }
}
