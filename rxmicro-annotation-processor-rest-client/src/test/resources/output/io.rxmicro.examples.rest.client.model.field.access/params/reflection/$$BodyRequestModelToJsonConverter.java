package io.rxmicro.examples.rest.client.model.field.access.params.reflection;

import io.rxmicro.examples.rest.client.model.field.access.Status;
import io.rxmicro.examples.rest.client.model.field.access.params.reflection.nested.$$NestedModelToJsonConverter;
import io.rxmicro.examples.rest.client.model.field.access.params.reflection.nested.Nested;
import io.rxmicro.exchange.json.detail.ModelToJsonConverter;
import io.rxmicro.json.JsonObjectBuilder;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static rxmicro.$$Reflections.getFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$BodyRequestModelToJsonConverter extends ModelToJsonConverter<BodyRequest> {

    private final $$NestedModelToJsonConverter nestedModelToJsonConverter =
            new $$NestedModelToJsonConverter();

    @Override
    public Map<String, Object> toJsonObject(final BodyRequest model) {
        final JsonObjectBuilder builder = new JsonObjectBuilder();
        putValuesToBuilder(model, builder);
        return builder.build();
    }

    protected void putValuesToBuilder(final BodyRequest model,
                                      final JsonObjectBuilder builder) {
        builder.put("booleanParameter", (Boolean) getFieldValue(model, "booleanParameter"));
        builder.put("byteParameter", (Byte) getFieldValue(model, "byteParameter"));
        builder.put("shortParameter", (Short) getFieldValue(model, "shortParameter"));
        builder.put("intParameter", (Integer) getFieldValue(model, "intParameter"));
        builder.put("longParameter", (Long) getFieldValue(model, "longParameter"));
        builder.put("bigIntParameter", (BigInteger) getFieldValue(model, "bigIntParameter"));
        builder.put("floatParameter", (Float) getFieldValue(model, "floatParameter"));
        builder.put("doubleParameter", (Double) getFieldValue(model, "doubleParameter"));
        builder.put("decimalParameter", (BigDecimal) getFieldValue(model, "decimalParameter"));
        builder.put("charParameter", (Character) getFieldValue(model, "charParameter"));
        builder.put("stringParameter", (String) getFieldValue(model, "stringParameter"));
        builder.put("instantParameter", (Instant) getFieldValue(model, "instantParameter"));
        builder.put("enumParameter", (Status) getFieldValue(model, "enumParameter"));
        builder.put("booleanParameterList", (List<Boolean>) getFieldValue(model, "booleanParameterList"));
        builder.put("byteParameterList", (List<Byte>) getFieldValue(model, "byteParameterList"));
        builder.put("shortParameterList", (List<Short>) getFieldValue(model, "shortParameterList"));
        builder.put("intParameterList", (List<Integer>) getFieldValue(model, "intParameterList"));
        builder.put("longParameterList", (List<Long>) getFieldValue(model, "longParameterList"));
        builder.put("bigIntParameterList", (List<BigInteger>) getFieldValue(model, "bigIntParameterList"));
        builder.put("floatParameterList", (List<Float>) getFieldValue(model, "floatParameterList"));
        builder.put("doubleParameterList", (List<Double>) getFieldValue(model, "doubleParameterList"));
        builder.put("decimalParameterList", (List<BigDecimal>) getFieldValue(model, "decimalParameterList"));
        builder.put("charParameterList", (List<Character>) getFieldValue(model, "charParameterList"));
        builder.put("stringParameterList", (List<String>) getFieldValue(model, "stringParameterList"));
        builder.put("instantParameterList", (List<Instant>) getFieldValue(model, "instantParameterList"));
        builder.put("enumParameterList", (List<Status>) getFieldValue(model, "enumParameterList"));
        builder.put("booleanParameterSet", (Set<Boolean>) getFieldValue(model, "booleanParameterSet"));
        builder.put("byteParameterSet", (Set<Byte>) getFieldValue(model, "byteParameterSet"));
        builder.put("shortParameterSet", (Set<Short>) getFieldValue(model, "shortParameterSet"));
        builder.put("intParameterSet", (Set<Integer>) getFieldValue(model, "intParameterSet"));
        builder.put("longParameterSet", (Set<Long>) getFieldValue(model, "longParameterSet"));
        builder.put("bigIntParameterSet", (Set<BigInteger>) getFieldValue(model, "bigIntParameterSet"));
        builder.put("floatParameterSet", (Set<Float>) getFieldValue(model, "floatParameterSet"));
        builder.put("doubleParameterSet", (Set<Double>) getFieldValue(model, "doubleParameterSet"));
        builder.put("decimalParameterSet", (Set<BigDecimal>) getFieldValue(model, "decimalParameterSet"));
        builder.put("charParameterSet", (Set<Character>) getFieldValue(model, "charParameterSet"));
        builder.put("stringParameterSet", (Set<String>) getFieldValue(model, "stringParameterSet"));
        builder.put("instantParameterSet", (Set<Instant>) getFieldValue(model, "instantParameterSet"));
        builder.put("enumParameterSet", (Set<Status>) getFieldValue(model, "enumParameterSet"));
        builder.put("booleanParameterMap", (Map<String, Boolean>) getFieldValue(model, "booleanParameterMap"));
        builder.put("byteParameterMap", (Map<String, Byte>) getFieldValue(model, "byteParameterMap"));
        builder.put("shortParameterMap", (Map<String, Short>) getFieldValue(model, "shortParameterMap"));
        builder.put("integerParameterMap", (Map<String, Integer>) getFieldValue(model, "integerParameterMap"));
        builder.put("longParameterMap", (Map<String, Long>) getFieldValue(model, "longParameterMap"));
        builder.put("bigIntegerParameterMap", (Map<String, BigInteger>) getFieldValue(model, "bigIntegerParameterMap"));
        builder.put("floatParameterMap", (Map<String, Float>) getFieldValue(model, "floatParameterMap"));
        builder.put("doubleParameterMap", (Map<String, Double>) getFieldValue(model, "doubleParameterMap"));
        builder.put("bigDecimalParameterMap", (Map<String, BigDecimal>) getFieldValue(model, "bigDecimalParameterMap"));
        builder.put("characterParameterMap", (Map<String, Character>) getFieldValue(model, "characterParameterMap"));
        builder.put("stringParameterMap", (Map<String, String>) getFieldValue(model, "stringParameterMap"));
        builder.put("instantParameterMap", (Map<String, Instant>) getFieldValue(model, "instantParameterMap"));
        builder.put("enumParameterMap", (Map<String, Status>) getFieldValue(model, "enumParameterMap"));
        builder.put("nested", convertFromObjectIfNotNull(nestedModelToJsonConverter, (Nested) getFieldValue(model, "nested")));
        builder.put("nestedList", convertFromListIfNotNull(nestedModelToJsonConverter, (List<Nested>) getFieldValue(model, "nestedList")));
        builder.put("nestedSet", convertFromSetIfNotNull(nestedModelToJsonConverter, (Set<Nested>) getFieldValue(model, "nestedSet")));
        builder.put("nestedParameterMap", convertFromMapIfNotNull(nestedModelToJsonConverter, (Map<String, Nested>) getFieldValue(model, "nestedParameterMap")));
    }
}
