package io.rxmicro.examples.rest.client.model.field.access.params.reflection;

import io.rxmicro.examples.rest.client.model.field.access.Status;
import io.rxmicro.rest.client.detail.QueryBuilder;
import io.rxmicro.rest.client.detail.RequestModelExtractor;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.List;
import java.util.Set;

import static rxmicro.$$Reflections.getFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$QueryRequestRequestModelExtractor extends RequestModelExtractor<QueryRequest> {

    @Override
    public void extract(final QueryRequest model,
                        final QueryBuilder queryBuilder) {
        queryBuilder.add("booleanParameter", (Boolean) getFieldValue(model, "booleanParameter"));
        queryBuilder.add("byteParameter", (Byte) getFieldValue(model, "byteParameter"));
        queryBuilder.add("shortParameter", (Short) getFieldValue(model, "shortParameter"));
        queryBuilder.add("intParameter", (Integer) getFieldValue(model, "intParameter"));
        queryBuilder.add("longParameter", (Long) getFieldValue(model, "longParameter"));
        queryBuilder.add("bigIntParameter", (BigInteger) getFieldValue(model, "bigIntParameter"));
        queryBuilder.add("floatParameter", (Float) getFieldValue(model, "floatParameter"));
        queryBuilder.add("doubleParameter", (Double) getFieldValue(model, "doubleParameter"));
        queryBuilder.add("decimalParameter", (BigDecimal) getFieldValue(model, "decimalParameter"));
        queryBuilder.add("charParameter", (Character) getFieldValue(model, "charParameter"));
        queryBuilder.add("stringParameter", (String) getFieldValue(model, "stringParameter"));
        queryBuilder.add("instantParameter", (Instant) getFieldValue(model, "instantParameter"));
        queryBuilder.add("enumParameter", (Status) getFieldValue(model, "enumParameter"));
        queryBuilder.add("booleanParameterList", (List<Boolean>) getFieldValue(model, "booleanParameterList"));
        queryBuilder.add("byteParameterList", (List<Byte>) getFieldValue(model, "byteParameterList"));
        queryBuilder.add("shortParameterList", (List<Short>) getFieldValue(model, "shortParameterList"));
        queryBuilder.add("intParameterList", (List<Integer>) getFieldValue(model, "intParameterList"));
        queryBuilder.add("longParameterList", (List<Long>) getFieldValue(model, "longParameterList"));
        queryBuilder.add("bigIntParameterList", (List<BigInteger>) getFieldValue(model, "bigIntParameterList"));
        queryBuilder.add("floatParameterList", (List<Float>) getFieldValue(model, "floatParameterList"));
        queryBuilder.add("doubleParameterList", (List<Double>) getFieldValue(model, "doubleParameterList"));
        queryBuilder.add("decimalParameterList", (List<BigDecimal>) getFieldValue(model, "decimalParameterList"));
        queryBuilder.add("charParameterList", (List<Character>) getFieldValue(model, "charParameterList"));
        queryBuilder.add("stringParameterList", (List<String>) getFieldValue(model, "stringParameterList"));
        queryBuilder.add("instantParameterList", (List<Instant>) getFieldValue(model, "instantParameterList"));
        queryBuilder.add("enumParameterList", (List<Status>) getFieldValue(model, "enumParameterList"));
        queryBuilder.add("booleanParameterSet", (Set<Boolean>) getFieldValue(model, "booleanParameterSet"));
        queryBuilder.add("byteParameterSet", (Set<Byte>) getFieldValue(model, "byteParameterSet"));
        queryBuilder.add("shortParameterSet", (Set<Short>) getFieldValue(model, "shortParameterSet"));
        queryBuilder.add("intParameterSet", (Set<Integer>) getFieldValue(model, "intParameterSet"));
        queryBuilder.add("longParameterSet", (Set<Long>) getFieldValue(model, "longParameterSet"));
        queryBuilder.add("bigIntParameterSet", (Set<BigInteger>) getFieldValue(model, "bigIntParameterSet"));
        queryBuilder.add("floatParameterSet", (Set<Float>) getFieldValue(model, "floatParameterSet"));
        queryBuilder.add("doubleParameterSet", (Set<Double>) getFieldValue(model, "doubleParameterSet"));
        queryBuilder.add("decimalParameterSet", (Set<BigDecimal>) getFieldValue(model, "decimalParameterSet"));
        queryBuilder.add("charParameterSet", (Set<Character>) getFieldValue(model, "charParameterSet"));
        queryBuilder.add("stringParameterSet", (Set<String>) getFieldValue(model, "stringParameterSet"));
        queryBuilder.add("instantParameterSet", (Set<Instant>) getFieldValue(model, "instantParameterSet"));
        queryBuilder.add("enumParameterSet", (Set<Status>) getFieldValue(model, "enumParameterSet"));
        for (final Status item : (List<Status>) getFieldValue(model, "repeatingEnumParameterList")) {
            queryBuilder.add("repeatingEnumParameterList", item);
        }
        for (final Status item : (Set<Status>) getFieldValue(model, "repeatingEnumParameterSet")) {
            queryBuilder.add("repeatingEnumParameterSet", item);
        }
    }
}
