package io.rxmicro.examples.rest.client.model.field.access.params;

import io.rxmicro.examples.rest.client.model.field.access.Status;
import io.rxmicro.rest.client.detail.QueryBuilder;
import io.rxmicro.rest.client.detail.RequestModelExtractor;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualVirtualParamsRequestRequestModelExtractor extends RequestModelExtractor<$$VirtualVirtualParamsRequest> {

    @Override
    public void extract(final $$VirtualVirtualParamsRequest model,
                        final QueryBuilder queryBuilder) {
        queryBuilder.add("booleanParameter", model.booleanParameter);
        queryBuilder.add("byteParameter", model.byteParameter);
        queryBuilder.add("shortParameter", model.shortParameter);
        queryBuilder.add("intParameter", model.intParameter);
        queryBuilder.add("longParameter", model.longParameter);
        queryBuilder.add("bigIntParameter", model.bigIntParameter);
        queryBuilder.add("floatParameter", model.floatParameter);
        queryBuilder.add("doubleParameter", model.doubleParameter);
        queryBuilder.add("decimalParameter", model.decimalParameter);
        queryBuilder.add("charParameter", model.charParameter);
        queryBuilder.add("stringParameter", model.stringParameter);
        queryBuilder.add("instantParameter", model.instantParameter);
        queryBuilder.add("enumParameter", model.enumParameter);
        queryBuilder.add("booleanParameterList", model.booleanParameterList);
        queryBuilder.add("byteParameterList", model.byteParameterList);
        queryBuilder.add("shortParameterList", model.shortParameterList);
        queryBuilder.add("intParameterList", model.intParameterList);
        queryBuilder.add("longParameterList", model.longParameterList);
        queryBuilder.add("bigIntParameterList", model.bigIntParameterList);
        queryBuilder.add("floatParameterList", model.floatParameterList);
        queryBuilder.add("doubleParameterList", model.doubleParameterList);
        queryBuilder.add("decimalParameterList", model.decimalParameterList);
        queryBuilder.add("charParameterList", model.charParameterList);
        queryBuilder.add("stringParameterList", model.stringParameterList);
        queryBuilder.add("instantParameterList", model.instantParameterList);
        queryBuilder.add("enumParameterList", model.enumParameterList);
        queryBuilder.add("booleanParameterSet", model.booleanParameterSet);
        queryBuilder.add("byteParameterSet", model.byteParameterSet);
        queryBuilder.add("shortParameterSet", model.shortParameterSet);
        queryBuilder.add("intParameterSet", model.intParameterSet);
        queryBuilder.add("longParameterSet", model.longParameterSet);
        queryBuilder.add("bigIntParameterSet", model.bigIntParameterSet);
        queryBuilder.add("floatParameterSet", model.floatParameterSet);
        queryBuilder.add("doubleParameterSet", model.doubleParameterSet);
        queryBuilder.add("decimalParameterSet", model.decimalParameterSet);
        queryBuilder.add("charParameterSet", model.charParameterSet);
        queryBuilder.add("stringParameterSet", model.stringParameterSet);
        queryBuilder.add("instantParameterSet", model.instantParameterSet);
        queryBuilder.add("enumParameterSet", model.enumParameterSet);
        for (final Status item : model.repeatingStatuses) {
            queryBuilder.add("repeatingStatuses", item);
        }
        for (final Status item : model.repeatingStatusSet) {
            queryBuilder.add("repeatingStatusSet", item);
        }
    }
}
