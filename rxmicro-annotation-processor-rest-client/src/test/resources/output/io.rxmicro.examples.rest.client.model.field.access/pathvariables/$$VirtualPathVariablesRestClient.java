package io.rxmicro.examples.rest.client.model.field.access.pathvariables;

import io.rxmicro.examples.rest.client.model.field.access.Status;
import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.HttpClient;
import io.rxmicro.rest.client.detail.HttpResponse;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;
import static io.rxmicro.validation.detail.RequestValidators.validateRequest;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualPathVariablesRestClient extends AbstractRestClient implements VirtualPathVariablesRestClient {

    private final $$VirtualVirtualPathVariablesRequestPathBuilder virtualVirtualPathVariablesRequestPathBuilder =
            new $$VirtualVirtualPathVariablesRequestPathBuilder();

    private final $$VirtualVirtualPathVariablesRequestConstraintValidator virtualVirtualPathVariablesRequestConstraintValidator =
            new $$VirtualVirtualPathVariablesRequestConstraintValidator();

    private final HttpClient client;

    private final RestClientConfig config;

    public $$VirtualPathVariablesRestClient(final HttpClient client,
                                            final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletionStage<Void> put(final Boolean booleanPathVariable, final Byte bytePathVariable, final Short shortPathVariable, final Integer intPathVariable, final Long longPathVariable, final BigInteger bigIntegerPathVariable, final Float floatPathVariable, final Double doublePathVariable, final BigDecimal decimalPathVariable, final Character charPathVariable, final String stringPathVariable, final Instant instantPathVariable, final Status enumPathVariable) {
        final $$VirtualVirtualPathVariablesRequest virtualRequest = new $$VirtualVirtualPathVariablesRequest(booleanPathVariable, bytePathVariable, shortPathVariable, intPathVariable, longPathVariable, bigIntegerPathVariable, floatPathVariable, doublePathVariable, decimalPathVariable, charPathVariable, stringPathVariable, instantPathVariable, enumPathVariable);
        validateRequest(config.isEnableAdditionalValidations(), virtualVirtualPathVariablesRequestConstraintValidator, virtualRequest);
        final String path = virtualVirtualPathVariablesRequestPathBuilder.build("/path-variables/virtual/${a}/${b}/${c}/${d}/${e}/${f}/${g}/${j}/${h}/${i}/${j}/${k}/${l}/${m}", "/path-variables/virtual/?/?/?/?/?/?/?/?/?/?/?/?/?/?", virtualRequest);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("PUT", path, EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }
}
