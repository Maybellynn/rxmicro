package io.rxmicro.examples.rest.client.model.field.access.headers;

import io.rxmicro.examples.rest.client.model.field.access.headers.gettersetter.$$RequestRequestModelExtractor;
import io.rxmicro.examples.rest.client.model.field.access.headers.gettersetter.$$ResponseClientModelReader;
import io.rxmicro.examples.rest.client.model.field.access.headers.gettersetter.Request;
import io.rxmicro.examples.rest.client.model.field.access.headers.gettersetter.Response;
import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.HeaderBuilder;
import io.rxmicro.rest.client.detail.HttpClient;
import io.rxmicro.rest.client.detail.HttpResponse;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$GetterSetterHeadersRestClient extends AbstractRestClient implements GetterSetterHeadersRestClient {

    private final $$RequestRequestModelExtractor requestRequestModelExtractor =
            new $$RequestRequestModelExtractor();

    private final $$ResponseClientModelReader responseClientModelReader =
            new $$ResponseClientModelReader();

    private final HttpClient client;

    private final RestClientConfig config;

    public $$GetterSetterHeadersRestClient(final HttpClient client,
                                           final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletionStage<Response> put(final Request request) {
        final String path = "/headers/gettersetter";
        final HeaderBuilder headerBuilder = new HeaderBuilder();
        requestRequestModelExtractor.extract(request, headerBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("PUT", path, headerBuilder.build())
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseClientModelReader.readSingle(resp));
    }
}
