package io.rxmicro.examples.rest.client.model.field.access.headers.gettersetter;

import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredAndNotEmptyStringConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;
import io.rxmicro.validation.validator.RequiredSetConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ResponseConstraintValidator implements ConstraintValidator<Response> {

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredAndNotEmptyStringConstraintValidator requiredAndNotEmptyStringConstraintValidator =
            getStatelessValidator(RequiredAndNotEmptyStringConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    private final RequiredSetConstraintValidator requiredSetConstraintValidator =
            getStatelessValidator(RequiredSetConstraintValidator.class);

    @Override
    public void validateNonNull(final Response model,
                                final ModelType httpModelType,
                                final String name) {
        requiredConstraintValidator.validate(model.getBooleanHeader(), HttpModelType.HEADER, "booleanHeader");

        requiredConstraintValidator.validate(model.getByteHeader(), HttpModelType.HEADER, "byteHeader");

        requiredConstraintValidator.validate(model.getShortHeader(), HttpModelType.HEADER, "shortHeader");

        requiredConstraintValidator.validate(model.getIntHeader(), HttpModelType.HEADER, "intHeader");

        requiredConstraintValidator.validate(model.getLongHeader(), HttpModelType.HEADER, "longHeader");

        requiredConstraintValidator.validate(model.getBigIntHeader(), HttpModelType.HEADER, "bigIntHeader");

        requiredConstraintValidator.validate(model.getFloatHeader(), HttpModelType.HEADER, "floatHeader");

        requiredConstraintValidator.validate(model.getDoubleHeader(), HttpModelType.HEADER, "doubleHeader");

        requiredConstraintValidator.validate(model.getDecimalHeader(), HttpModelType.HEADER, "decimalHeader");

        requiredConstraintValidator.validate(model.getCharHeader(), HttpModelType.HEADER, "charHeader");

        requiredAndNotEmptyStringConstraintValidator.validate(model.getStringHeader(), HttpModelType.HEADER, "stringHeader");

        requiredConstraintValidator.validate(model.getInstantHeader(), HttpModelType.HEADER, "instantHeader");

        requiredConstraintValidator.validate(model.getEnumHeader(), HttpModelType.HEADER, "enumHeader");

        requiredListConstraintValidator.validate(model.getBooleanHeaderList(), HttpModelType.HEADER, "booleanHeaderList");
        requiredConstraintValidator.validateIterable(model.getBooleanHeaderList(), HttpModelType.HEADER, "booleanHeaderList");

        requiredListConstraintValidator.validate(model.getByteHeaderList(), HttpModelType.HEADER, "byteHeaderList");
        requiredConstraintValidator.validateIterable(model.getByteHeaderList(), HttpModelType.HEADER, "byteHeaderList");

        requiredListConstraintValidator.validate(model.getShortHeaderList(), HttpModelType.HEADER, "shortHeaderList");
        requiredConstraintValidator.validateIterable(model.getShortHeaderList(), HttpModelType.HEADER, "shortHeaderList");

        requiredListConstraintValidator.validate(model.getIntHeaderList(), HttpModelType.HEADER, "intHeaderList");
        requiredConstraintValidator.validateIterable(model.getIntHeaderList(), HttpModelType.HEADER, "intHeaderList");

        requiredListConstraintValidator.validate(model.getLongHeaderList(), HttpModelType.HEADER, "longHeaderList");
        requiredConstraintValidator.validateIterable(model.getLongHeaderList(), HttpModelType.HEADER, "longHeaderList");

        requiredListConstraintValidator.validate(model.getBigIntHeaderList(), HttpModelType.HEADER, "bigIntHeaderList");
        requiredConstraintValidator.validateIterable(model.getBigIntHeaderList(), HttpModelType.HEADER, "bigIntHeaderList");

        requiredListConstraintValidator.validate(model.getFloatHeaderList(), HttpModelType.HEADER, "floatHeaderList");
        requiredConstraintValidator.validateIterable(model.getFloatHeaderList(), HttpModelType.HEADER, "floatHeaderList");

        requiredListConstraintValidator.validate(model.getDoubleHeaderList(), HttpModelType.HEADER, "doubleHeaderList");
        requiredConstraintValidator.validateIterable(model.getDoubleHeaderList(), HttpModelType.HEADER, "doubleHeaderList");

        requiredListConstraintValidator.validate(model.getDecimalHeaderList(), HttpModelType.HEADER, "decimalHeaderList");
        requiredConstraintValidator.validateIterable(model.getDecimalHeaderList(), HttpModelType.HEADER, "decimalHeaderList");

        requiredListConstraintValidator.validate(model.getCharHeaderList(), HttpModelType.HEADER, "charHeaderList");
        requiredConstraintValidator.validateIterable(model.getCharHeaderList(), HttpModelType.HEADER, "charHeaderList");

        requiredListConstraintValidator.validate(model.getStringHeaderList(), HttpModelType.HEADER, "stringHeaderList");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.getStringHeaderList(), HttpModelType.HEADER, "stringHeaderList");

        requiredListConstraintValidator.validate(model.getInstantHeaderList(), HttpModelType.HEADER, "instantHeaderList");
        requiredConstraintValidator.validateIterable(model.getInstantHeaderList(), HttpModelType.HEADER, "instantHeaderList");

        requiredListConstraintValidator.validate(model.getEnumHeaderList(), HttpModelType.HEADER, "enumHeaderList");
        requiredConstraintValidator.validateIterable(model.getEnumHeaderList(), HttpModelType.HEADER, "enumHeaderList");

        requiredSetConstraintValidator.validate(model.getBooleanHeaderSet(), HttpModelType.HEADER, "booleanHeaderSet");
        requiredConstraintValidator.validateIterable(model.getBooleanHeaderSet(), HttpModelType.HEADER, "booleanHeaderSet");

        requiredSetConstraintValidator.validate(model.getByteHeaderSet(), HttpModelType.HEADER, "byteHeaderSet");
        requiredConstraintValidator.validateIterable(model.getByteHeaderSet(), HttpModelType.HEADER, "byteHeaderSet");

        requiredSetConstraintValidator.validate(model.getShortHeaderSet(), HttpModelType.HEADER, "shortHeaderSet");
        requiredConstraintValidator.validateIterable(model.getShortHeaderSet(), HttpModelType.HEADER, "shortHeaderSet");

        requiredSetConstraintValidator.validate(model.getIntHeaderSet(), HttpModelType.HEADER, "intHeaderSet");
        requiredConstraintValidator.validateIterable(model.getIntHeaderSet(), HttpModelType.HEADER, "intHeaderSet");

        requiredSetConstraintValidator.validate(model.getLongHeaderSet(), HttpModelType.HEADER, "longHeaderSet");
        requiredConstraintValidator.validateIterable(model.getLongHeaderSet(), HttpModelType.HEADER, "longHeaderSet");

        requiredSetConstraintValidator.validate(model.getBigIntHeaderSet(), HttpModelType.HEADER, "bigIntHeaderSet");
        requiredConstraintValidator.validateIterable(model.getBigIntHeaderSet(), HttpModelType.HEADER, "bigIntHeaderSet");

        requiredSetConstraintValidator.validate(model.getFloatHeaderSet(), HttpModelType.HEADER, "floatHeaderSet");
        requiredConstraintValidator.validateIterable(model.getFloatHeaderSet(), HttpModelType.HEADER, "floatHeaderSet");

        requiredSetConstraintValidator.validate(model.getDoubleHeaderSet(), HttpModelType.HEADER, "doubleHeaderSet");
        requiredConstraintValidator.validateIterable(model.getDoubleHeaderSet(), HttpModelType.HEADER, "doubleHeaderSet");

        requiredSetConstraintValidator.validate(model.getDecimalHeaderSet(), HttpModelType.HEADER, "decimalHeaderSet");
        requiredConstraintValidator.validateIterable(model.getDecimalHeaderSet(), HttpModelType.HEADER, "decimalHeaderSet");

        requiredSetConstraintValidator.validate(model.getCharHeaderSet(), HttpModelType.HEADER, "charHeaderSet");
        requiredConstraintValidator.validateIterable(model.getCharHeaderSet(), HttpModelType.HEADER, "charHeaderSet");

        requiredSetConstraintValidator.validate(model.getStringHeaderSet(), HttpModelType.HEADER, "stringHeaderSet");
        requiredAndNotEmptyStringConstraintValidator.validateIterable(model.getStringHeaderSet(), HttpModelType.HEADER, "stringHeaderSet");

        requiredSetConstraintValidator.validate(model.getInstantHeaderSet(), HttpModelType.HEADER, "instantHeaderSet");
        requiredConstraintValidator.validateIterable(model.getInstantHeaderSet(), HttpModelType.HEADER, "instantHeaderSet");

        requiredSetConstraintValidator.validate(model.getEnumHeaderSet(), HttpModelType.HEADER, "enumHeaderSet");
        requiredConstraintValidator.validateIterable(model.getEnumHeaderSet(), HttpModelType.HEADER, "enumHeaderSet");
    }
}
