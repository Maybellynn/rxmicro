package io.rxmicro.examples.rest.client.model.field.access.headers;

import io.rxmicro.examples.rest.client.model.field.access.Status;
import io.rxmicro.rest.client.detail.HeaderBuilder;
import io.rxmicro.rest.client.detail.RequestModelExtractor;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$VirtualVirtualHeadersRequestRequestModelExtractor extends RequestModelExtractor<$$VirtualVirtualHeadersRequest> {

    @Override
    public void extract(final $$VirtualVirtualHeadersRequest model,
                        final HeaderBuilder headerBuilder) {
        headerBuilder.add("Boolean-Header", model.booleanHeader);
        headerBuilder.add("Byte-Header", model.byteHeader);
        headerBuilder.add("Short-Header", model.shortHeader);
        headerBuilder.add("Int-Header", model.intHeader);
        headerBuilder.add("Long-Header", model.longHeader);
        headerBuilder.add("Big-Int-Header", model.bigIntHeader);
        headerBuilder.add("Float-Header", model.floatHeader);
        headerBuilder.add("Double-Header", model.doubleHeader);
        headerBuilder.add("Decimal-Header", model.decimalHeader);
        headerBuilder.add("Char-Header", model.charHeader);
        headerBuilder.add("String-Header", model.stringHeader);
        headerBuilder.add("Instant-Header", model.instantHeader);
        headerBuilder.add("Enum-Header", model.enumHeader);
        headerBuilder.add("Boolean-Header-List", model.booleanHeaderList);
        headerBuilder.add("Byte-Header-List", model.byteHeaderList);
        headerBuilder.add("Short-Header-List", model.shortHeaderList);
        headerBuilder.add("Int-Header-List", model.intHeaderList);
        headerBuilder.add("Long-Header-List", model.longHeaderList);
        headerBuilder.add("Big-Int-Header-List", model.bigIntHeaderList);
        headerBuilder.add("Float-Header-List", model.floatHeaderList);
        headerBuilder.add("Double-Header-List", model.doubleHeaderList);
        headerBuilder.add("Decimal-Header-List", model.decimalHeaderList);
        headerBuilder.add("Char-Header-List", model.charHeaderList);
        headerBuilder.add("String-Header-List", model.stringHeaderList);
        headerBuilder.add("Instant-Header-List", model.instantHeaderList);
        headerBuilder.add("Enum-Header-List", model.enumHeaderList);
        headerBuilder.add("Boolean-Header-Set", model.booleanHeaderSet);
        headerBuilder.add("Byte-Header-Set", model.byteHeaderSet);
        headerBuilder.add("Short-Header-Set", model.shortHeaderSet);
        headerBuilder.add("Int-Header-Set", model.intHeaderSet);
        headerBuilder.add("Long-Header-Set", model.longHeaderSet);
        headerBuilder.add("Big-Int-Header-Set", model.bigIntHeaderSet);
        headerBuilder.add("Float-Header-Set", model.floatHeaderSet);
        headerBuilder.add("Double-Header-Set", model.doubleHeaderSet);
        headerBuilder.add("Decimal-Header-Set", model.decimalHeaderSet);
        headerBuilder.add("Char-Header-Set", model.charHeaderSet);
        headerBuilder.add("String-Header-Set", model.stringHeaderSet);
        headerBuilder.add("Instant-Header-Set", model.instantHeaderSet);
        headerBuilder.add("Enum-Header-Set", model.enumHeaderSet);
        headerBuilder.add("Request-Id", model.requestIdHeader);
        for (final Status item : model.repeatingEnumHeaderList) {
            headerBuilder.add("Repeating-Enum-Header-List", item);
        }
        for (final Status item : model.repeatingEnumHeaderSet) {
            headerBuilder.add("Repeating-Enum-Header-Set", item);
        }
    }
}
