package io.rxmicro.examples.rest.client.model.fields.headers.reflection;

import io.rxmicro.examples.rest.client.model.fields.Status;
import io.rxmicro.rest.client.detail.HeaderBuilder;
import io.rxmicro.rest.client.detail.RequestModelExtractor;

import java.util.List;

import static rxmicro.$$Reflections.getFieldValue;

/**
 * Generated by rxmicro annotation processor
 *
 * @link https://rxmicro.io
 */
public final class $$RequestRequestModelExtractor extends RequestModelExtractor<Request> {

    @Override
    public void extract(final Request model,
                        final HeaderBuilder headerBuilder) {
        headerBuilder.add("booleanParameter", getFieldValue(model, "booleanParameter"));
        headerBuilder.add("byteParameter", getFieldValue(model, "byteParameter"));
        headerBuilder.add("shortParameter", getFieldValue(model, "shortParameter"));
        headerBuilder.add("intParameter", getFieldValue(model, "intParameter"));
        headerBuilder.add("longParameter", getFieldValue(model, "longParameter"));
        headerBuilder.add("bigIntParameter", getFieldValue(model, "bigIntParameter"));
        headerBuilder.add("floatParameter", getFieldValue(model, "floatParameter"));
        headerBuilder.add("doubleParameter", getFieldValue(model, "doubleParameter"));
        headerBuilder.add("decimalParameter", getFieldValue(model, "decimalParameter"));
        headerBuilder.add("charParameter", getFieldValue(model, "charParameter"));
        headerBuilder.add("stringParameter", getFieldValue(model, "stringParameter"));
        headerBuilder.add("instantParameter", getFieldValue(model, "instantParameter"));
        headerBuilder.add("status", getFieldValue(model, "status"));
        headerBuilder.add("booleanParameters", getFieldValue(model, "booleanParameters"));
        headerBuilder.add("byteParameters", getFieldValue(model, "byteParameters"));
        headerBuilder.add("shortParameters", getFieldValue(model, "shortParameters"));
        headerBuilder.add("intParameters", getFieldValue(model, "intParameters"));
        headerBuilder.add("longParameters", getFieldValue(model, "longParameters"));
        headerBuilder.add("bigIntParameters", getFieldValue(model, "bigIntParameters"));
        headerBuilder.add("floatParameters", getFieldValue(model, "floatParameters"));
        headerBuilder.add("doubleParameters", getFieldValue(model, "doubleParameters"));
        headerBuilder.add("decimalParameters", getFieldValue(model, "decimalParameters"));
        headerBuilder.add("charParameters", getFieldValue(model, "charParameters"));
        headerBuilder.add("stringParameters", getFieldValue(model, "stringParameters"));
        headerBuilder.add("instantParameters", getFieldValue(model, "instantParameters"));
        headerBuilder.add("statuses", getFieldValue(model, "statuses"));
        for (final Status item : (List<Status>) getFieldValue(model, "repeatingStatues")) {
            headerBuilder.add("repeatingStatues", item);
        }
    }
}
