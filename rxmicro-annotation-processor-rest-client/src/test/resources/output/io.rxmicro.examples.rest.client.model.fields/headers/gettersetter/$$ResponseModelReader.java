package io.rxmicro.examples.rest.client.model.fields.headers.gettersetter;

import io.rxmicro.examples.rest.client.model.fields.Status;
import io.rxmicro.http.HttpHeaders;
import io.rxmicro.http.client.ClientHttpResponse;
import io.rxmicro.rest.client.detail.ModelReader;
import io.rxmicro.rest.model.HttpModelType;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ResponseModelReader extends ModelReader<Response> {

    @Override
    public Response readSingle(final ClientHttpResponse response) {
        final Response model = new Response();
        read(response, model);
        return model;
    }

    protected void read(final ClientHttpResponse response,
                        final Response model) {
        final HttpHeaders httpHeaders = response.getHeaders();
        model.setBooleanParameter(toBoolean(httpHeaders.getValue("booleanParameter"), HttpModelType.HEADER, "booleanParameter"));
        model.setByteParameter(toByte(httpHeaders.getValue("byteParameter"), HttpModelType.HEADER, "byteParameter"));
        model.setShortParameter(toShort(httpHeaders.getValue("shortParameter"), HttpModelType.HEADER, "shortParameter"));
        model.setIntParameter(toInteger(httpHeaders.getValue("intParameter"), HttpModelType.HEADER, "intParameter"));
        model.setLongParameter(toLong(httpHeaders.getValue("longParameter"), HttpModelType.HEADER, "longParameter"));
        model.setBigIntParameter(toBigInteger(httpHeaders.getValue("bigIntParameter"), HttpModelType.HEADER, "bigIntParameter"));
        model.setFloatParameter(toFloat(httpHeaders.getValue("floatParameter"), HttpModelType.HEADER, "floatParameter"));
        model.setDoubleParameter(toDouble(httpHeaders.getValue("doubleParameter"), HttpModelType.HEADER, "doubleParameter"));
        model.setDecimalParameter(toBigDecimal(httpHeaders.getValue("decimalParameter"), HttpModelType.HEADER, "decimalParameter"));
        model.setCharParameter(toCharacter(httpHeaders.getValue("charParameter"), HttpModelType.HEADER, "charParameter"));
        model.setStringParameter(toString(httpHeaders.getValue("stringParameter"), HttpModelType.HEADER, "stringParameter"));
        model.setInstantParameter(toInstant(httpHeaders.getValue("instantParameter"), HttpModelType.HEADER, "instantParameter"));
        model.setStatus(toEnum(Status.class, httpHeaders.getValue("status"), HttpModelType.HEADER, "status"));
        model.setBooleanParameters(toBooleanList(httpHeaders.getValues("booleanParameters"), HttpModelType.HEADER, "booleanParameters"));
        model.setByteParameters(toByteList(httpHeaders.getValues("byteParameters"), HttpModelType.HEADER, "byteParameters"));
        model.setShortParameters(toShortList(httpHeaders.getValues("shortParameters"), HttpModelType.HEADER, "shortParameters"));
        model.setIntParameters(toIntegerList(httpHeaders.getValues("intParameters"), HttpModelType.HEADER, "intParameters"));
        model.setLongParameters(toLongList(httpHeaders.getValues("longParameters"), HttpModelType.HEADER, "longParameters"));
        model.setBigIntParameters(toBigIntegerList(httpHeaders.getValues("bigIntParameters"), HttpModelType.HEADER, "bigIntParameters"));
        model.setFloatParameters(toFloatList(httpHeaders.getValues("floatParameters"), HttpModelType.HEADER, "floatParameters"));
        model.setDoubleParameters(toDoubleList(httpHeaders.getValues("doubleParameters"), HttpModelType.HEADER, "doubleParameters"));
        model.setDecimalParameters(toBigDecimalList(httpHeaders.getValues("decimalParameters"), HttpModelType.HEADER, "decimalParameters"));
        model.setCharParameters(toCharacterList(httpHeaders.getValues("charParameters"), HttpModelType.HEADER, "charParameters"));
        model.setStringParameters(toStringList(httpHeaders.getValues("stringParameters"), HttpModelType.HEADER, "stringParameters"));
        model.setInstantParameters(toInstantList(httpHeaders.getValues("instantParameters"), HttpModelType.HEADER, "instantParameters"));
        model.setStatuses(toEnumList(Status.class, httpHeaders.getValues("statuses"), HttpModelType.HEADER, "statuses"));
        model.setBooleanParameterSet(toBooleanSet(httpHeaders.getValues("booleanParameterSet"), HttpModelType.HEADER, "booleanParameterSet"));
        model.setByteParameterSet(toByteSet(httpHeaders.getValues("byteParameterSet"), HttpModelType.HEADER, "byteParameterSet"));
        model.setShortParameterSet(toShortSet(httpHeaders.getValues("shortParameterSet"), HttpModelType.HEADER, "shortParameterSet"));
        model.setIntParameterSet(toIntegerSet(httpHeaders.getValues("intParameterSet"), HttpModelType.HEADER, "intParameterSet"));
        model.setLongParameterSet(toLongSet(httpHeaders.getValues("longParameterSet"), HttpModelType.HEADER, "longParameterSet"));
        model.setBigIntParameterSet(toBigIntegerSet(httpHeaders.getValues("bigIntParameterSet"), HttpModelType.HEADER, "bigIntParameterSet"));
        model.setFloatParameterSet(toFloatSet(httpHeaders.getValues("floatParameterSet"), HttpModelType.HEADER, "floatParameterSet"));
        model.setDoubleParameterSet(toDoubleSet(httpHeaders.getValues("doubleParameterSet"), HttpModelType.HEADER, "doubleParameterSet"));
        model.setDecimalParameterSet(toBigDecimalSet(httpHeaders.getValues("decimalParameterSet"), HttpModelType.HEADER, "decimalParameterSet"));
        model.setCharParameterSet(toCharacterSet(httpHeaders.getValues("charParameterSet"), HttpModelType.HEADER, "charParameterSet"));
        model.setStringParameterSet(toStringSet(httpHeaders.getValues("stringParameterSet"), HttpModelType.HEADER, "stringParameterSet"));
        model.setInstantParameterSet(toInstantSet(httpHeaders.getValues("instantParameterSet"), HttpModelType.HEADER, "instantParameterSet"));
        model.setStatusSet(toEnumSet(Status.class, httpHeaders.getValues("statusSet"), HttpModelType.HEADER, "statusSet"));
    }
}
