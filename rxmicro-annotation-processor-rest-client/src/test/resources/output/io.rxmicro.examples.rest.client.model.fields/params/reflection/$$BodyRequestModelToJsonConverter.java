package io.rxmicro.examples.rest.client.model.fields.params.reflection;

import io.rxmicro.examples.rest.client.model.fields.params.reflection.nested.$$NestedModelToJsonConverter;
import io.rxmicro.examples.rest.client.model.fields.params.reflection.nested.Nested;
import io.rxmicro.exchange.json.detail.ModelToJsonConverter;
import io.rxmicro.json.JsonObjectBuilder;

import java.util.List;
import java.util.Map;

import static rxmicro.$$Reflections.getFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$BodyRequestModelToJsonConverter extends ModelToJsonConverter<BodyRequest> {

    private final $$NestedModelToJsonConverter nestedModelToJsonConverter =
            new $$NestedModelToJsonConverter();

    @Override
    public Map<String, Object> toJsonObject(final BodyRequest model) {
        return new JsonObjectBuilder()
                .put("booleanParameter", getFieldValue(model, "booleanParameter"))
                .put("byteParameter", getFieldValue(model, "byteParameter"))
                .put("shortParameter", getFieldValue(model, "shortParameter"))
                .put("intParameter", getFieldValue(model, "intParameter"))
                .put("longParameter", getFieldValue(model, "longParameter"))
                .put("bigIntParameter", getFieldValue(model, "bigIntParameter"))
                .put("floatParameter", getFieldValue(model, "floatParameter"))
                .put("doubleParameter", getFieldValue(model, "doubleParameter"))
                .put("decimalParameter", getFieldValue(model, "decimalParameter"))
                .put("charParameter", getFieldValue(model, "charParameter"))
                .put("stringParameter", getFieldValue(model, "stringParameter"))
                .put("instantParameter", getFieldValue(model, "instantParameter"))
                .put("status", getFieldValue(model, "status"))
                .put("booleanParameters", getFieldValue(model, "booleanParameters"))
                .put("byteParameters", getFieldValue(model, "byteParameters"))
                .put("shortParameters", getFieldValue(model, "shortParameters"))
                .put("intParameters", getFieldValue(model, "intParameters"))
                .put("longParameters", getFieldValue(model, "longParameters"))
                .put("bigIntParameters", getFieldValue(model, "bigIntParameters"))
                .put("floatParameters", getFieldValue(model, "floatParameters"))
                .put("doubleParameters", getFieldValue(model, "doubleParameters"))
                .put("decimalParameters", getFieldValue(model, "decimalParameters"))
                .put("charParameters", getFieldValue(model, "charParameters"))
                .put("stringParameters", getFieldValue(model, "stringParameters"))
                .put("instantParameters", getFieldValue(model, "instantParameters"))
                .put("statuses", getFieldValue(model, "statuses"))
                .put("nested", convertIfNotNull(nestedModelToJsonConverter, (Nested) getFieldValue(model, "nested")))
                .put("nestedList", convertIfNotNull(nestedModelToJsonConverter, (List<Nested>) getFieldValue(model, "nestedList")))
                .build();
    }
}
