package io.rxmicro.examples.rest.client.model.fields.params.reflection;

import io.rxmicro.examples.rest.client.model.fields.Status;
import io.rxmicro.examples.rest.client.model.fields.params.reflection.nested.$$NestedModelToJsonConverter;
import io.rxmicro.examples.rest.client.model.fields.params.reflection.nested.Nested;
import io.rxmicro.exchange.json.detail.ModelToJsonConverter;
import io.rxmicro.json.JsonObjectBuilder;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static rxmicro.$$Reflections.getFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$BodyRequestModelToJsonConverter extends ModelToJsonConverter<BodyRequest> {

    private final $$NestedModelToJsonConverter nestedModelToJsonConverter =
            new $$NestedModelToJsonConverter();

    @Override
    public Map<String, Object> toJsonObject(final BodyRequest model) {
        final JsonObjectBuilder builder = new JsonObjectBuilder();
        putValues(model, builder);
        return builder.build();
    }

    protected void putValues(final BodyRequest model,
                             final JsonObjectBuilder builder) {
        builder.put("booleanParameter", (Boolean) getFieldValue(model, "booleanParameter"));
        builder.put("byteParameter", (Byte) getFieldValue(model, "byteParameter"));
        builder.put("shortParameter", (Short) getFieldValue(model, "shortParameter"));
        builder.put("intParameter", (Integer) getFieldValue(model, "intParameter"));
        builder.put("longParameter", (Long) getFieldValue(model, "longParameter"));
        builder.put("bigIntParameter", (BigInteger) getFieldValue(model, "bigIntParameter"));
        builder.put("floatParameter", (Float) getFieldValue(model, "floatParameter"));
        builder.put("doubleParameter", (Double) getFieldValue(model, "doubleParameter"));
        builder.put("decimalParameter", (BigDecimal) getFieldValue(model, "decimalParameter"));
        builder.put("charParameter", (Character) getFieldValue(model, "charParameter"));
        builder.put("stringParameter", (String) getFieldValue(model, "stringParameter"));
        builder.put("instantParameter", (Instant) getFieldValue(model, "instantParameter"));
        builder.put("status", (Status) getFieldValue(model, "status"));
        builder.put("booleanParameters", (List<Boolean>) getFieldValue(model, "booleanParameters"));
        builder.put("byteParameters", (List<Byte>) getFieldValue(model, "byteParameters"));
        builder.put("shortParameters", (List<Short>) getFieldValue(model, "shortParameters"));
        builder.put("intParameters", (List<Integer>) getFieldValue(model, "intParameters"));
        builder.put("longParameters", (List<Long>) getFieldValue(model, "longParameters"));
        builder.put("bigIntParameters", (List<BigInteger>) getFieldValue(model, "bigIntParameters"));
        builder.put("floatParameters", (List<Float>) getFieldValue(model, "floatParameters"));
        builder.put("doubleParameters", (List<Double>) getFieldValue(model, "doubleParameters"));
        builder.put("decimalParameters", (List<BigDecimal>) getFieldValue(model, "decimalParameters"));
        builder.put("charParameters", (List<Character>) getFieldValue(model, "charParameters"));
        builder.put("stringParameters", (List<String>) getFieldValue(model, "stringParameters"));
        builder.put("instantParameters", (List<Instant>) getFieldValue(model, "instantParameters"));
        builder.put("statuses", (List<Status>) getFieldValue(model, "statuses"));
        builder.put("booleanParameterSet", (Set<Boolean>) getFieldValue(model, "booleanParameterSet"));
        builder.put("byteParameterSet", (Set<Byte>) getFieldValue(model, "byteParameterSet"));
        builder.put("shortParameterSet", (Set<Short>) getFieldValue(model, "shortParameterSet"));
        builder.put("intParameterSet", (Set<Integer>) getFieldValue(model, "intParameterSet"));
        builder.put("longParameterSet", (Set<Long>) getFieldValue(model, "longParameterSet"));
        builder.put("bigIntParameterSet", (Set<BigInteger>) getFieldValue(model, "bigIntParameterSet"));
        builder.put("floatParameterSet", (Set<Float>) getFieldValue(model, "floatParameterSet"));
        builder.put("doubleParameterSet", (Set<Double>) getFieldValue(model, "doubleParameterSet"));
        builder.put("decimalParameterSet", (Set<BigDecimal>) getFieldValue(model, "decimalParameterSet"));
        builder.put("charParameterSet", (Set<Character>) getFieldValue(model, "charParameterSet"));
        builder.put("stringParameterSet", (Set<String>) getFieldValue(model, "stringParameterSet"));
        builder.put("instantParameterSet", (Set<Instant>) getFieldValue(model, "instantParameterSet"));
        builder.put("statusSet", (Set<Status>) getFieldValue(model, "statusSet"));
        builder.put("nested", convertFromObjectIfNotNull(nestedModelToJsonConverter, (Nested) getFieldValue(model, "nested")));
        builder.put("nestedList", convertFromListIfNotNull(nestedModelToJsonConverter, (List<Nested>) getFieldValue(model, "nestedList")));
        builder.put("nestedSet", convertFromSetIfNotNull(nestedModelToJsonConverter, (Set<Nested>) getFieldValue(model, "nestedSet")));
        builder.put("booleanData", (Map<String, Boolean>) getFieldValue(model, "booleanData"));
        builder.put("byteData", (Map<String, Byte>) getFieldValue(model, "byteData"));
        builder.put("shortData", (Map<String, Short>) getFieldValue(model, "shortData"));
        builder.put("integerData", (Map<String, Integer>) getFieldValue(model, "integerData"));
        builder.put("longData", (Map<String, Long>) getFieldValue(model, "longData"));
        builder.put("bigIntegerData", (Map<String, BigInteger>) getFieldValue(model, "bigIntegerData"));
        builder.put("floatData", (Map<String, Float>) getFieldValue(model, "floatData"));
        builder.put("doubleData", (Map<String, Double>) getFieldValue(model, "doubleData"));
        builder.put("bigDecimalData", (Map<String, BigDecimal>) getFieldValue(model, "bigDecimalData"));
        builder.put("characterData", (Map<String, Character>) getFieldValue(model, "characterData"));
        builder.put("stringData", (Map<String, String>) getFieldValue(model, "stringData"));
        builder.put("enumData", (Map<String, Status>) getFieldValue(model, "enumData"));
        builder.put("instantData", (Map<String, Instant>) getFieldValue(model, "instantData"));
        builder.put("nestedMap", convertFromMapIfNotNull(nestedModelToJsonConverter, (Map<String, Nested>) getFieldValue(model, "nestedMap")));
    }
}
