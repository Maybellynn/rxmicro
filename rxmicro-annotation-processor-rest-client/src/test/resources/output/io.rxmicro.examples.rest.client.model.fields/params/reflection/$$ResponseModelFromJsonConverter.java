package io.rxmicro.examples.rest.client.model.fields.params.reflection;

import io.rxmicro.examples.rest.client.model.fields.Status;
import io.rxmicro.examples.rest.client.model.fields.params.reflection.nested.$$NestedModelFromJsonConverter;
import io.rxmicro.exchange.json.detail.ModelFromJsonConverter;

import java.util.Map;

import static rxmicro.$$Reflections.setFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ResponseModelFromJsonConverter extends ModelFromJsonConverter<Response> {

    private final $$NestedModelFromJsonConverter nestedModelFromJsonConverter =
            new $$NestedModelFromJsonConverter();

    @Override
    public Response fromJsonObject(final Map<String, Object> params) {
        final Response model = new Response();
        setFieldValue(model, "booleanParameter", toBoolean(params.get("booleanParameter"), "booleanParameter"));
        setFieldValue(model, "byteParameter", toByte(params.get("byteParameter"), "byteParameter"));
        setFieldValue(model, "shortParameter", toShort(params.get("shortParameter"), "shortParameter"));
        setFieldValue(model, "intParameter", toInteger(params.get("intParameter"), "intParameter"));
        setFieldValue(model, "longParameter", toLong(params.get("longParameter"), "longParameter"));
        setFieldValue(model, "bigIntParameter", toBigInteger(params.get("bigIntParameter"), "bigIntParameter"));
        setFieldValue(model, "floatParameter", toFloat(params.get("floatParameter"), "floatParameter"));
        setFieldValue(model, "doubleParameter", toDouble(params.get("doubleParameter"), "doubleParameter"));
        setFieldValue(model, "decimalParameter", toBigDecimal(params.get("decimalParameter"), "decimalParameter"));
        setFieldValue(model, "charParameter", toCharacter(params.get("charParameter"), "charParameter"));
        setFieldValue(model, "stringParameter", toString(params.get("stringParameter"), "stringParameter"));
        setFieldValue(model, "instantParameter", toInstant(params.get("instantParameter"), "instantParameter"));
        setFieldValue(model, "status", toEnum(Status.class, params.get("status"), "status"));
        setFieldValue(model, "booleanParameters", toBooleanList(params.get("booleanParameters"), "booleanParameters"));
        setFieldValue(model, "byteParameters", toByteList(params.get("byteParameters"), "byteParameters"));
        setFieldValue(model, "shortParameters", toShortList(params.get("shortParameters"), "shortParameters"));
        setFieldValue(model, "intParameters", toIntegerList(params.get("intParameters"), "intParameters"));
        setFieldValue(model, "longParameters", toLongList(params.get("longParameters"), "longParameters"));
        setFieldValue(model, "bigIntParameters", toBigIntegerList(params.get("bigIntParameters"), "bigIntParameters"));
        setFieldValue(model, "floatParameters", toFloatList(params.get("floatParameters"), "floatParameters"));
        setFieldValue(model, "doubleParameters", toDoubleList(params.get("doubleParameters"), "doubleParameters"));
        setFieldValue(model, "decimalParameters", toBigDecimalList(params.get("decimalParameters"), "decimalParameters"));
        setFieldValue(model, "charParameters", toCharacterList(params.get("charParameters"), "charParameters"));
        setFieldValue(model, "stringParameters", toStringList(params.get("stringParameters"), "stringParameters"));
        setFieldValue(model, "instantParameters", toInstantList(params.get("instantParameters"), "instantParameters"));
        setFieldValue(model, "statuses", toEnumList(Status.class, params.get("statuses"), "statuses"));
        setFieldValue(model, "booleanParameterSet", toBooleanSet(params.get("booleanParameterSet"), "booleanParameterSet"));
        setFieldValue(model, "byteParameterSet", toByteSet(params.get("byteParameterSet"), "byteParameterSet"));
        setFieldValue(model, "shortParameterSet", toShortSet(params.get("shortParameterSet"), "shortParameterSet"));
        setFieldValue(model, "intParameterSet", toIntegerSet(params.get("intParameterSet"), "intParameterSet"));
        setFieldValue(model, "longParameterSet", toLongSet(params.get("longParameterSet"), "longParameterSet"));
        setFieldValue(model, "bigIntParameterSet", toBigIntegerSet(params.get("bigIntParameterSet"), "bigIntParameterSet"));
        setFieldValue(model, "floatParameterSet", toFloatSet(params.get("floatParameterSet"), "floatParameterSet"));
        setFieldValue(model, "doubleParameterSet", toDoubleSet(params.get("doubleParameterSet"), "doubleParameterSet"));
        setFieldValue(model, "decimalParameterSet", toBigDecimalSet(params.get("decimalParameterSet"), "decimalParameterSet"));
        setFieldValue(model, "charParameterSet", toCharacterSet(params.get("charParameterSet"), "charParameterSet"));
        setFieldValue(model, "stringParameterSet", toStringSet(params.get("stringParameterSet"), "stringParameterSet"));
        setFieldValue(model, "instantParameterSet", toInstantSet(params.get("instantParameterSet"), "instantParameterSet"));
        setFieldValue(model, "statusSet", toEnumSet(Status.class, params.get("statusSet"), "statusSet"));
        setFieldValue(model, "nested", convertToObjectIfNotNull(nestedModelFromJsonConverter, params.get("nested"), "nested"));
        setFieldValue(model, "nestedList", convertToListIfNotNull(nestedModelFromJsonConverter, params.get("nestedList"), "nestedList"));
        setFieldValue(model, "nestedSet", convertToSetIfNotNull(nestedModelFromJsonConverter, params.get("nestedSet"), "nestedSet"));
        setFieldValue(model, "booleanData", toBooleanMap(params.get("booleanData"), "booleanData"));
        setFieldValue(model, "byteData", toByteMap(params.get("byteData"), "byteData"));
        setFieldValue(model, "shortData", toShortMap(params.get("shortData"), "shortData"));
        setFieldValue(model, "integerData", toIntegerMap(params.get("integerData"), "integerData"));
        setFieldValue(model, "longData", toLongMap(params.get("longData"), "longData"));
        setFieldValue(model, "bigIntegerData", toBigIntegerMap(params.get("bigIntegerData"), "bigIntegerData"));
        setFieldValue(model, "floatData", toFloatMap(params.get("floatData"), "floatData"));
        setFieldValue(model, "doubleData", toDoubleMap(params.get("doubleData"), "doubleData"));
        setFieldValue(model, "bigDecimalData", toBigDecimalMap(params.get("bigDecimalData"), "bigDecimalData"));
        setFieldValue(model, "characterData", toCharacterMap(params.get("characterData"), "characterData"));
        setFieldValue(model, "stringData", toStringMap(params.get("stringData"), "stringData"));
        setFieldValue(model, "enumData", toEnumMap(Status.class, params.get("enumData"), "enumData"));
        setFieldValue(model, "instantData", toInstantMap(params.get("instantData"), "instantData"));
        setFieldValue(model, "nestedMap", convertToMapIfNotNull(nestedModelFromJsonConverter, params.get("nestedMap"), "nestedMap"));
        return model;
    }
}
