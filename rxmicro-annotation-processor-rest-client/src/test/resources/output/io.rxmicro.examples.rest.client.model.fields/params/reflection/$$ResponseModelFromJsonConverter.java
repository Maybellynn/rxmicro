package io.rxmicro.examples.rest.client.model.fields.params.reflection;

import io.rxmicro.examples.rest.client.model.fields.Status;
import io.rxmicro.examples.rest.client.model.fields.params.reflection.nested.$$NestedModelFromJsonConverter;
import io.rxmicro.exchange.json.detail.ModelFromJsonConverter;

import java.util.List;
import java.util.Map;

import static rxmicro.$$Reflections.setFieldValue;

/**
 * Generated by rxmicro annotation processor
 */
public final class $$ResponseModelFromJsonConverter extends ModelFromJsonConverter<Response> {

    private final $$NestedModelFromJsonConverter nestedModelFromJsonConverter =
            new $$NestedModelFromJsonConverter();

    @Override
    public Response fromJsonObject(final Map<String, Object> params) {
        final Response model = new Response();
        setFieldValue(model, "booleanParameter", toBoolean(params.get("booleanParameter"), "booleanParameter"));
        setFieldValue(model, "byteParameter", toByte(params.get("byteParameter"), "byteParameter"));
        setFieldValue(model, "shortParameter", toShort(params.get("shortParameter"), "shortParameter"));
        setFieldValue(model, "intParameter", toInteger(params.get("intParameter"), "intParameter"));
        setFieldValue(model, "longParameter", toLong(params.get("longParameter"), "longParameter"));
        setFieldValue(model, "bigIntParameter", toBigInteger(params.get("bigIntParameter"), "bigIntParameter"));
        setFieldValue(model, "floatParameter", toFloat(params.get("floatParameter"), "floatParameter"));
        setFieldValue(model, "doubleParameter", toDouble(params.get("doubleParameter"), "doubleParameter"));
        setFieldValue(model, "decimalParameter", toBigDecimal(params.get("decimalParameter"), "decimalParameter"));
        setFieldValue(model, "charParameter", toCharacter(params.get("charParameter"), "charParameter"));
        setFieldValue(model, "stringParameter", toString(params.get("stringParameter"), "stringParameter"));
        setFieldValue(model, "instantParameter", toInstant(params.get("instantParameter"), "instantParameter"));
        setFieldValue(model, "status", toEnum(Status.class, params.get("status"), "status"));
        setFieldValue(model, "booleanParameters", toBooleanArray(params.get("booleanParameters"), "booleanParameters"));
        setFieldValue(model, "byteParameters", toByteArray(params.get("byteParameters"), "byteParameters"));
        setFieldValue(model, "shortParameters", toShortArray(params.get("shortParameters"), "shortParameters"));
        setFieldValue(model, "intParameters", toIntegerArray(params.get("intParameters"), "intParameters"));
        setFieldValue(model, "longParameters", toLongArray(params.get("longParameters"), "longParameters"));
        setFieldValue(model, "bigIntParameters", toBigIntegerArray(params.get("bigIntParameters"), "bigIntParameters"));
        setFieldValue(model, "floatParameters", toFloatArray(params.get("floatParameters"), "floatParameters"));
        setFieldValue(model, "doubleParameters", toDoubleArray(params.get("doubleParameters"), "doubleParameters"));
        setFieldValue(model, "decimalParameters", toBigDecimalArray(params.get("decimalParameters"), "decimalParameters"));
        setFieldValue(model, "charParameters", toCharacterArray(params.get("charParameters"), "charParameters"));
        setFieldValue(model, "stringParameters", toStringArray(params.get("stringParameters"), "stringParameters"));
        setFieldValue(model, "instantParameters", toInstantArray(params.get("instantParameters"), "instantParameters"));
        setFieldValue(model, "statuses", toEnumArray(Status.class, params.get("statuses"), "statuses"));
        setFieldValue(model, "nested", convertIfNotNull(nestedModelFromJsonConverter, (Map<String, Object>) params.get("nested")));
        setFieldValue(model, "nestedList", convertIfNotNull(nestedModelFromJsonConverter, (List<Object>) params.get("nestedList"), "nestedList"));
        return model;
    }
}
