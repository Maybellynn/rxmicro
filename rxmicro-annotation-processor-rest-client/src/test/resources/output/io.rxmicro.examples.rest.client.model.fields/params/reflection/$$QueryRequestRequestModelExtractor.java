package io.rxmicro.examples.rest.client.model.fields.params.reflection;

import io.rxmicro.examples.rest.client.model.fields.Status;
import io.rxmicro.rest.client.detail.QueryBuilder;
import io.rxmicro.rest.client.detail.RequestModelExtractor;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.List;
import java.util.Set;

import static rxmicro.$$Reflections.getFieldValue;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$QueryRequestRequestModelExtractor extends RequestModelExtractor<QueryRequest> {

    @Override
    public void extract(final QueryRequest model,
                        final QueryBuilder queryBuilder) {
        queryBuilder.add("booleanParameter", (Boolean) getFieldValue(model, "booleanParameter"));
        queryBuilder.add("byteParameter", (Byte) getFieldValue(model, "byteParameter"));
        queryBuilder.add("shortParameter", (Short) getFieldValue(model, "shortParameter"));
        queryBuilder.add("intParameter", (Integer) getFieldValue(model, "intParameter"));
        queryBuilder.add("longParameter", (Long) getFieldValue(model, "longParameter"));
        queryBuilder.add("bigIntParameter", (BigInteger) getFieldValue(model, "bigIntParameter"));
        queryBuilder.add("floatParameter", (Float) getFieldValue(model, "floatParameter"));
        queryBuilder.add("doubleParameter", (Double) getFieldValue(model, "doubleParameter"));
        queryBuilder.add("decimalParameter", (BigDecimal) getFieldValue(model, "decimalParameter"));
        queryBuilder.add("charParameter", (Character) getFieldValue(model, "charParameter"));
        queryBuilder.add("stringParameter", (String) getFieldValue(model, "stringParameter"));
        queryBuilder.add("instantParameter", (Instant) getFieldValue(model, "instantParameter"));
        queryBuilder.add("status", (Status) getFieldValue(model, "status"));
        queryBuilder.add("booleanParameters", (List<Boolean>) getFieldValue(model, "booleanParameters"));
        queryBuilder.add("byteParameters", (List<Byte>) getFieldValue(model, "byteParameters"));
        queryBuilder.add("shortParameters", (List<Short>) getFieldValue(model, "shortParameters"));
        queryBuilder.add("intParameters", (List<Integer>) getFieldValue(model, "intParameters"));
        queryBuilder.add("longParameters", (List<Long>) getFieldValue(model, "longParameters"));
        queryBuilder.add("bigIntParameters", (List<BigInteger>) getFieldValue(model, "bigIntParameters"));
        queryBuilder.add("floatParameters", (List<Float>) getFieldValue(model, "floatParameters"));
        queryBuilder.add("doubleParameters", (List<Double>) getFieldValue(model, "doubleParameters"));
        queryBuilder.add("decimalParameters", (List<BigDecimal>) getFieldValue(model, "decimalParameters"));
        queryBuilder.add("charParameters", (List<Character>) getFieldValue(model, "charParameters"));
        queryBuilder.add("stringParameters", (List<String>) getFieldValue(model, "stringParameters"));
        queryBuilder.add("instantParameters", (List<Instant>) getFieldValue(model, "instantParameters"));
        queryBuilder.add("statuses", (List<Status>) getFieldValue(model, "statuses"));
        queryBuilder.add("booleanParameterSet", (Set<Boolean>) getFieldValue(model, "booleanParameterSet"));
        queryBuilder.add("byteParameterSet", (Set<Byte>) getFieldValue(model, "byteParameterSet"));
        queryBuilder.add("shortParameterSet", (Set<Short>) getFieldValue(model, "shortParameterSet"));
        queryBuilder.add("intParameterSet", (Set<Integer>) getFieldValue(model, "intParameterSet"));
        queryBuilder.add("longParameterSet", (Set<Long>) getFieldValue(model, "longParameterSet"));
        queryBuilder.add("bigIntParameterSet", (Set<BigInteger>) getFieldValue(model, "bigIntParameterSet"));
        queryBuilder.add("floatParameterSet", (Set<Float>) getFieldValue(model, "floatParameterSet"));
        queryBuilder.add("doubleParameterSet", (Set<Double>) getFieldValue(model, "doubleParameterSet"));
        queryBuilder.add("decimalParameterSet", (Set<BigDecimal>) getFieldValue(model, "decimalParameterSet"));
        queryBuilder.add("charParameterSet", (Set<Character>) getFieldValue(model, "charParameterSet"));
        queryBuilder.add("stringParameterSet", (Set<String>) getFieldValue(model, "stringParameterSet"));
        queryBuilder.add("instantParameterSet", (Set<Instant>) getFieldValue(model, "instantParameterSet"));
        queryBuilder.add("statusSet", (Set<Status>) getFieldValue(model, "statusSet"));
        for (final Status item : (List<Status>) getFieldValue(model, "repeatingStatuses")) {
            queryBuilder.add("repeatingStatuses", item);
        }
        for (final Status item : (Set<Status>) getFieldValue(model, "repeatingStatusSet")) {
            queryBuilder.add("repeatingStatusSet", item);
        }
    }
}
