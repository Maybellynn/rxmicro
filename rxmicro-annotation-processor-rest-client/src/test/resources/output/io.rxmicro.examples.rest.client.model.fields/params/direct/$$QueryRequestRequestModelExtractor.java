package io.rxmicro.examples.rest.client.model.fields.params.direct;

import io.rxmicro.examples.rest.client.model.fields.Status;
import io.rxmicro.rest.client.detail.QueryBuilder;
import io.rxmicro.rest.client.detail.RequestModelExtractor;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$QueryRequestRequestModelExtractor extends RequestModelExtractor<QueryRequest> {

    @Override
    public void extract(final QueryRequest model,
                        final QueryBuilder queryBuilder) {
        queryBuilder.add("booleanParameter", model.booleanParameter);
        queryBuilder.add("byteParameter", model.byteParameter);
        queryBuilder.add("shortParameter", model.shortParameter);
        queryBuilder.add("intParameter", model.intParameter);
        queryBuilder.add("longParameter", model.longParameter);
        queryBuilder.add("bigIntParameter", model.bigIntParameter);
        queryBuilder.add("floatParameter", model.floatParameter);
        queryBuilder.add("doubleParameter", model.doubleParameter);
        queryBuilder.add("decimalParameter", model.decimalParameter);
        queryBuilder.add("charParameter", model.charParameter);
        queryBuilder.add("stringParameter", model.stringParameter);
        queryBuilder.add("instantParameter", model.instantParameter);
        queryBuilder.add("status", model.status);
        queryBuilder.add("booleanParameters", model.booleanParameters);
        queryBuilder.add("byteParameters", model.byteParameters);
        queryBuilder.add("shortParameters", model.shortParameters);
        queryBuilder.add("intParameters", model.intParameters);
        queryBuilder.add("longParameters", model.longParameters);
        queryBuilder.add("bigIntParameters", model.bigIntParameters);
        queryBuilder.add("floatParameters", model.floatParameters);
        queryBuilder.add("doubleParameters", model.doubleParameters);
        queryBuilder.add("decimalParameters", model.decimalParameters);
        queryBuilder.add("charParameters", model.charParameters);
        queryBuilder.add("stringParameters", model.stringParameters);
        queryBuilder.add("instantParameters", model.instantParameters);
        queryBuilder.add("statuses", model.statuses);
        queryBuilder.add("booleanParameterSet", model.booleanParameterSet);
        queryBuilder.add("byteParameterSet", model.byteParameterSet);
        queryBuilder.add("shortParameterSet", model.shortParameterSet);
        queryBuilder.add("intParameterSet", model.intParameterSet);
        queryBuilder.add("longParameterSet", model.longParameterSet);
        queryBuilder.add("bigIntParameterSet", model.bigIntParameterSet);
        queryBuilder.add("floatParameterSet", model.floatParameterSet);
        queryBuilder.add("doubleParameterSet", model.doubleParameterSet);
        queryBuilder.add("decimalParameterSet", model.decimalParameterSet);
        queryBuilder.add("charParameterSet", model.charParameterSet);
        queryBuilder.add("stringParameterSet", model.stringParameterSet);
        queryBuilder.add("instantParameterSet", model.instantParameterSet);
        queryBuilder.add("statusSet", model.statusSet);
        for (final Status item : model.repeatingStatuses) {
            queryBuilder.add("repeatingStatuses", item);
        }
        for (final Status item : model.repeatingStatusSet) {
            queryBuilder.add("repeatingStatusSet", item);
        }
    }
}
