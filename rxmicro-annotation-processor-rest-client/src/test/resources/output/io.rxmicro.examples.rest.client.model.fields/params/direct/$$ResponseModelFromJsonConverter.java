package io.rxmicro.examples.rest.client.model.fields.params.direct;

import io.rxmicro.examples.rest.client.model.fields.Status;
import io.rxmicro.examples.rest.client.model.fields.params.direct.nested.$$NestedModelFromJsonConverter;
import io.rxmicro.exchange.json.detail.ModelFromJsonConverter;

import java.util.List;
import java.util.Map;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ResponseModelFromJsonConverter extends ModelFromJsonConverter<Response> {

    private final $$NestedModelFromJsonConverter nestedModelFromJsonConverter =
            new $$NestedModelFromJsonConverter();

    @Override
    public Response fromJsonObject(final Map<String, Object> params) {
        final Response model = new Response();
        model.booleanParameter = toBoolean(params.get("booleanParameter"), "booleanParameter");
        model.byteParameter = toByte(params.get("byteParameter"), "byteParameter");
        model.shortParameter = toShort(params.get("shortParameter"), "shortParameter");
        model.intParameter = toInteger(params.get("intParameter"), "intParameter");
        model.longParameter = toLong(params.get("longParameter"), "longParameter");
        model.bigIntParameter = toBigInteger(params.get("bigIntParameter"), "bigIntParameter");
        model.floatParameter = toFloat(params.get("floatParameter"), "floatParameter");
        model.doubleParameter = toDouble(params.get("doubleParameter"), "doubleParameter");
        model.decimalParameter = toBigDecimal(params.get("decimalParameter"), "decimalParameter");
        model.charParameter = toCharacter(params.get("charParameter"), "charParameter");
        model.stringParameter = toString(params.get("stringParameter"), "stringParameter");
        model.instantParameter = toInstant(params.get("instantParameter"), "instantParameter");
        model.status = toEnum(Status.class, params.get("status"), "status");
        model.booleanParameters = toBooleanList(params.get("booleanParameters"), "booleanParameters");
        model.byteParameters = toByteList(params.get("byteParameters"), "byteParameters");
        model.shortParameters = toShortList(params.get("shortParameters"), "shortParameters");
        model.intParameters = toIntegerList(params.get("intParameters"), "intParameters");
        model.longParameters = toLongList(params.get("longParameters"), "longParameters");
        model.bigIntParameters = toBigIntegerList(params.get("bigIntParameters"), "bigIntParameters");
        model.floatParameters = toFloatList(params.get("floatParameters"), "floatParameters");
        model.doubleParameters = toDoubleList(params.get("doubleParameters"), "doubleParameters");
        model.decimalParameters = toBigDecimalList(params.get("decimalParameters"), "decimalParameters");
        model.charParameters = toCharacterList(params.get("charParameters"), "charParameters");
        model.stringParameters = toStringList(params.get("stringParameters"), "stringParameters");
        model.instantParameters = toInstantList(params.get("instantParameters"), "instantParameters");
        model.statuses = toEnumList(Status.class, params.get("statuses"), "statuses");
        model.booleanParameterSet = toBooleanSet(params.get("booleanParameterSet"), "booleanParameterSet");
        model.byteParameterSet = toByteSet(params.get("byteParameterSet"), "byteParameterSet");
        model.shortParameterSet = toShortSet(params.get("shortParameterSet"), "shortParameterSet");
        model.intParameterSet = toIntegerSet(params.get("intParameterSet"), "intParameterSet");
        model.longParameterSet = toLongSet(params.get("longParameterSet"), "longParameterSet");
        model.bigIntParameterSet = toBigIntegerSet(params.get("bigIntParameterSet"), "bigIntParameterSet");
        model.floatParameterSet = toFloatSet(params.get("floatParameterSet"), "floatParameterSet");
        model.doubleParameterSet = toDoubleSet(params.get("doubleParameterSet"), "doubleParameterSet");
        model.decimalParameterSet = toBigDecimalSet(params.get("decimalParameterSet"), "decimalParameterSet");
        model.charParameterSet = toCharacterSet(params.get("charParameterSet"), "charParameterSet");
        model.stringParameterSet = toStringSet(params.get("stringParameterSet"), "stringParameterSet");
        model.instantParameterSet = toInstantSet(params.get("instantParameterSet"), "instantParameterSet");
        model.statusSet = toEnumSet(Status.class, params.get("statusSet"), "statusSet");
        model.nested = convertToObjectIfNotNull(nestedModelFromJsonConverter, (Map<String, Object>) params.get("nested"));
        model.nestedList = convertToListIfNotNull(nestedModelFromJsonConverter, (List<Object>) params.get("nestedList"), "nestedList");
        model.nestedSet = convertToSetIfNotNull(nestedModelFromJsonConverter, (List<Object>) params.get("nestedSet"), "nestedSet");
        return model;
    }
}
