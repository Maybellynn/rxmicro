package io.rxmicro.examples.validation.client.basic;

import io.rxmicro.examples.validation.client.basic.model.$$ResponseConstraintValidator;
import io.rxmicro.examples.validation.client.basic.model.$$ResponseModelReader;
import io.rxmicro.examples.validation.client.basic.model.Response;
import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.HttpClient;
import io.rxmicro.rest.client.detail.HttpResponse;

import java.util.concurrent.CompletableFuture;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;
import static io.rxmicro.validation.detail.ResponseValidators.validateIfResponseExists;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RESTClient extends AbstractRestClient implements RESTClient {

    private final $$ResponseModelReader responseModelReader =
            new $$ResponseModelReader();

    private final $$ResponseConstraintValidator responseConstraintValidator =
            new $$ResponseConstraintValidator();

    private final HttpClient client;

    private final RestClientConfig config;

    public $$RESTClient(final HttpClient client,
                        final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletableFuture<Response> get() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }
}
