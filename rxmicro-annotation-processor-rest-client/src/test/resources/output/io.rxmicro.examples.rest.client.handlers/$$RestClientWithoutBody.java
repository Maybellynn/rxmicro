package io.rxmicro.examples.rest.client.handlers;

import io.reactivex.rxjava3.core.Completable;
import io.rxmicro.examples.rest.client.handlers.model.$$RequestRequestModelExtractor;
import io.rxmicro.examples.rest.client.handlers.model.Request;
import io.rxmicro.http.client.ClientHttpResponse;
import io.rxmicro.http.client.HttpClient;
import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.QueryBuilder;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RestClientWithoutBody extends AbstractRestClient implements RestClientWithoutBody {

    private final $$VirtualWithoutBodyRequest2RequestModelExtractor virtualWithoutBodyRequest2RequestModelExtractor =
            new $$VirtualWithoutBodyRequest2RequestModelExtractor();

    private final $$RequestRequestModelExtractor requestRequestModelExtractor =
            new $$RequestRequestModelExtractor();

    private final $$VirtualWithoutBodyRequest4RequestModelExtractor virtualWithoutBodyRequest4RequestModelExtractor =
            new $$VirtualWithoutBodyRequest4RequestModelExtractor();

    private final $$VirtualWithoutBodyRequest3RequestModelExtractor virtualWithoutBodyRequest3RequestModelExtractor =
            new $$VirtualWithoutBodyRequest3RequestModelExtractor();

    private final $$VirtualWithoutBodyRequestRequestModelExtractor virtualWithoutBodyRequestRequestModelExtractor =
            new $$VirtualWithoutBodyRequestRequestModelExtractor();

    private final HttpClient client;

    private final RestClientConfig config;

    public $$RestClientWithoutBody(final HttpClient client,
                                   final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletableFuture<Void> completedFuture1() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", "/jse/completedFuture1", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletableFuture<Void> completedFuture2(final Request request) {
        final String path = "/jse/completedFuture2";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletableFuture<Void> completedFuture3(final String requestParameter) {
        final $$VirtualWithoutBodyRequest virtualRequest = new $$VirtualWithoutBodyRequest(requestParameter);
        final String path = "/jse/completedFuture3";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualWithoutBodyRequestRequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletionStage<Void> completionStage1() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", "/jse/completionStage1", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletionStage<Void> completionStage2(final Request request) {
        final String path = "/jse/completionStage2";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public CompletionStage<Void> completionStage3(final String requestParameter) {
        final $$VirtualWithoutBodyRequest2 virtualRequest = new $$VirtualWithoutBodyRequest2(requestParameter);
        final String path = "/jse/completionStage3";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualWithoutBodyRequest2RequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> null);
    }

    @Override
    public Mono<Void> mono1() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", "/spring-reactor/mono1", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .then();
    }

    @Override
    public Mono<Void> mono2(final Request request) {
        final String path = "/spring-reactor/mono2";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .then();
    }

    @Override
    public Mono<Void> mono3(final String requestParameter) {
        final $$VirtualWithoutBodyRequest3 virtualRequest = new $$VirtualWithoutBodyRequest3(requestParameter);
        final String path = "/spring-reactor/mono3";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualWithoutBodyRequest3RequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .then();
    }

    @Override
    public Completable completable1() {
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", "/rxjava3/completable1", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Completable.fromCompletionStage(response);
    }

    @Override
    public Completable completable2(final Request request) {
        final String path = "/rxjava3/completable2";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Completable.fromCompletionStage(response);
    }

    @Override
    public Completable completable3(final String requestParameter) {
        final $$VirtualWithoutBodyRequest4 virtualRequest = new $$VirtualWithoutBodyRequest4(requestParameter);
        final String path = "/rxjava3/completable3";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualWithoutBodyRequest4RequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Completable.fromCompletionStage(response);
    }
}
