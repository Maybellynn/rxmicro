package io.rxmicro.examples.rest.client.handlers;

import io.reactivex.rxjava3.core.Single;
import io.rxmicro.examples.rest.client.handlers.model.$$RequestConstraintValidator;
import io.rxmicro.examples.rest.client.handlers.model.$$RequestRequestModelExtractor;
import io.rxmicro.examples.rest.client.handlers.model.$$ResponseClientModelReader;
import io.rxmicro.examples.rest.client.handlers.model.$$ResponseConstraintValidator;
import io.rxmicro.examples.rest.client.handlers.model.Request;
import io.rxmicro.examples.rest.client.handlers.model.Response;
import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;
import io.rxmicro.rest.client.detail.HttpClient;
import io.rxmicro.rest.client.detail.HttpResponse;
import io.rxmicro.rest.client.detail.QueryBuilder;
import reactor.core.publisher.Mono;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;
import static io.rxmicro.validation.detail.RequestValidators.validateRequest;
import static io.rxmicro.validation.detail.ResponseValidators.validateIfResponseExists;
import static io.rxmicro.validation.detail.ResponseValidators.validateResponse;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$RestClientWithBody extends AbstractRestClient implements RestClientWithBody {

    private final $$VirtualWithBodyRequest2RequestModelExtractor virtualWithBodyRequest2RequestModelExtractor =
            new $$VirtualWithBodyRequest2RequestModelExtractor();

    private final $$RequestRequestModelExtractor requestRequestModelExtractor =
            new $$RequestRequestModelExtractor();

    private final $$VirtualWithBodyRequestRequestModelExtractor virtualWithBodyRequestRequestModelExtractor =
            new $$VirtualWithBodyRequestRequestModelExtractor();

    private final $$VirtualWithBodyRequest3RequestModelExtractor virtualWithBodyRequest3RequestModelExtractor =
            new $$VirtualWithBodyRequest3RequestModelExtractor();

    private final $$ResponseClientModelReader responseClientModelReader =
            new $$ResponseClientModelReader();

    private final $$VirtualWithBodyRequest4RequestModelExtractor virtualWithBodyRequest4RequestModelExtractor =
            new $$VirtualWithBodyRequest4RequestModelExtractor();

    private final $$VirtualWithBodyRequest2ConstraintValidator virtualWithBodyRequest2ConstraintValidator =
            new $$VirtualWithBodyRequest2ConstraintValidator();

    private final $$VirtualWithBodyRequestConstraintValidator virtualWithBodyRequestConstraintValidator =
            new $$VirtualWithBodyRequestConstraintValidator();

    private final $$RequestConstraintValidator requestConstraintValidator =
            new $$RequestConstraintValidator();

    private final $$ResponseConstraintValidator responseConstraintValidator =
            new $$ResponseConstraintValidator();

    private final $$VirtualWithBodyRequest4ConstraintValidator virtualWithBodyRequest4ConstraintValidator =
            new $$VirtualWithBodyRequest4ConstraintValidator();

    private final $$VirtualWithBodyRequest3ConstraintValidator virtualWithBodyRequest3ConstraintValidator =
            new $$VirtualWithBodyRequest3ConstraintValidator();

    private final HttpClient client;

    private final RestClientConfig config;

    public $$RestClientWithBody(final HttpClient client,
                                final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletableFuture<Response> completedFuture1() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/jse/completedFuture1", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseClientModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public CompletableFuture<Response> completedFuture2(final Request request) {
        validateRequest(config.isEnableAdditionalValidations(), requestConstraintValidator, request);
        final String path = "/jse/completedFuture2";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseClientModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public CompletableFuture<Response> completedFuture3(final String requestParameter) {
        final $$VirtualWithBodyRequest virtualRequest = new $$VirtualWithBodyRequest(requestParameter);
        validateRequest(config.isEnableAdditionalValidations(), virtualWithBodyRequestConstraintValidator, virtualRequest);
        final String path = "/jse/completedFuture3";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualWithBodyRequestRequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseClientModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public CompletionStage<Response> completionStage1() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/jse/completionStage1", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseClientModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public CompletionStage<Response> completionStage2(final Request request) {
        validateRequest(config.isEnableAdditionalValidations(), requestConstraintValidator, request);
        final String path = "/jse/completionStage2";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseClientModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public CompletionStage<Response> completionStage3(final String requestParameter) {
        final $$VirtualWithBodyRequest2 virtualRequest = new $$VirtualWithBodyRequest2(requestParameter);
        validateRequest(config.isEnableAdditionalValidations(), virtualWithBodyRequest2ConstraintValidator, virtualRequest);
        final String path = "/jse/completionStage3";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualWithBodyRequest2RequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> responseClientModelReader.readSingle(resp))
                .whenComplete((resp, th) -> validateIfResponseExists(responseConstraintValidator, resp));
    }

    @Override
    public Mono<Response> mono1() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/spring-reactor/mono1", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .map(resp -> responseClientModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Mono<Response> mono2(final Request request) {
        validateRequest(config.isEnableAdditionalValidations(), requestConstraintValidator, request);
        final String path = "/spring-reactor/mono2";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .map(resp -> responseClientModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Mono<Response> mono3(final String requestParameter) {
        final $$VirtualWithBodyRequest3 virtualRequest = new $$VirtualWithBodyRequest3(requestParameter);
        validateRequest(config.isEnableAdditionalValidations(), virtualWithBodyRequest3ConstraintValidator, virtualRequest);
        final String path = "/spring-reactor/mono3";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualWithBodyRequest3RequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Mono.fromFuture(response)
                .map(resp -> responseClientModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Single<Response> single1() {
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", "/rxjava3/single1", EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Single.fromCompletionStage(response)
                .map(resp -> responseClientModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Single<Response> single2(final Request request) {
        validateRequest(config.isEnableAdditionalValidations(), requestConstraintValidator, request);
        final String path = "/rxjava3/single2";
        final QueryBuilder queryBuilder = new QueryBuilder();
        requestRequestModelExtractor.extract(request, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Single.fromCompletionStage(response)
                .map(resp -> responseClientModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }

    @Override
    public Single<Response> single3(final String requestParameter) {
        final $$VirtualWithBodyRequest4 virtualRequest = new $$VirtualWithBodyRequest4(requestParameter);
        validateRequest(config.isEnableAdditionalValidations(), virtualWithBodyRequest4ConstraintValidator, virtualRequest);
        final String path = "/rxjava3/single3";
        final QueryBuilder queryBuilder = new QueryBuilder();
        virtualWithBodyRequest4RequestModelExtractor.extract(virtualRequest, queryBuilder);
        final CompletableFuture<HttpResponse> response = client
                .sendAsync("GET", joinPath(path, queryBuilder.build()), EMPTY_HEADERS)
                .handle(throwExceptionIfNotSuccess());
        return Single.fromCompletionStage(response)
                .map(resp -> responseClientModelReader.readSingle(resp))
                .doOnSuccess(resp -> validateResponse(responseConstraintValidator, resp));
    }
}
