package io.rxmicro.examples.rest.client.params;

import io.rxmicro.examples.rest.client.params.model.$$ComplexRequestModelToJsonConverter;
import io.rxmicro.examples.rest.client.params.model.$$ComplexResponseModelReader;
import io.rxmicro.examples.rest.client.params.model.ComplexRequest;
import io.rxmicro.examples.rest.client.params.model.ComplexResponse;
import io.rxmicro.http.client.ClientHttpResponse;
import io.rxmicro.http.client.HttpClient;
import io.rxmicro.rest.client.RestClientConfig;
import io.rxmicro.rest.client.detail.AbstractRestClient;

import java.util.concurrent.CompletableFuture;

import static io.rxmicro.rest.client.detail.ErrorResponseCheckerHelper.throwExceptionIfNotSuccess;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ComplexModelRestClient extends AbstractRestClient implements ComplexModelRestClient {

    private final $$ComplexRequestModelToJsonConverter complexRequestModelToJsonConverter =
            new $$ComplexRequestModelToJsonConverter();

    private final $$ComplexResponseModelReader complexResponseModelReader =
            new $$ComplexResponseModelReader();

    private final HttpClient client;

    private final RestClientConfig config;

    public $$ComplexModelRestClient(final HttpClient client,
                                    final RestClientConfig config) {
        this.client = client;
        this.config = config;
    }

    @Override
    public CompletableFuture<ComplexResponse> post(final ComplexRequest request) {
        final String path = "/";
        final Object body = complexRequestModelToJsonConverter.toJson(request);
        final CompletableFuture<ClientHttpResponse> response = client
                .sendAsync("POST", path, EMPTY_HEADERS, body)
                .handle(throwExceptionIfNotSuccess());
        return response
                .thenApply(resp -> complexResponseModelReader.readSingle(resp));
    }
}
