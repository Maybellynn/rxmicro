package io.rxmicro.examples.rest.client.params.model;

import io.rxmicro.examples.rest.client.params.model.nested.$$NestedModelConstraintValidator;
import io.rxmicro.model.ModelType;
import io.rxmicro.rest.model.HttpModelType;
import io.rxmicro.validation.ConstraintValidator;
import io.rxmicro.validation.validator.RequiredConstraintValidator;
import io.rxmicro.validation.validator.RequiredListConstraintValidator;

import static io.rxmicro.validation.detail.StatelessValidators.getStatelessValidator;

/**
 * Generated by {@code RxMicro Annotation Processor}
 */
public final class $$ComplexResponseConstraintValidator implements ConstraintValidator<ComplexResponse> {

    private final $$NestedModelConstraintValidator nestedModelConstraintValidator =
            new $$NestedModelConstraintValidator();

    private final RequiredConstraintValidator requiredConstraintValidator =
            getStatelessValidator(RequiredConstraintValidator.class);

    private final RequiredListConstraintValidator requiredListConstraintValidator =
            getStatelessValidator(RequiredListConstraintValidator.class);

    @Override
    public void validateNonNull(final ComplexResponse model,
                                final ModelType httpModelType,
                                final String name) {
        requiredConstraintValidator.validate(model.integerParameter, HttpModelType.PARAMETER, "integer_parameter");

        requiredConstraintValidator.validate(model.enumParameter, HttpModelType.PARAMETER, "enum_parameter");

        requiredListConstraintValidator.validate(model.enumsParameter, HttpModelType.PARAMETER, "enums_parameter");
        requiredConstraintValidator.validateIterable(model.enumsParameter, HttpModelType.PARAMETER, "enums_parameter");

        requiredConstraintValidator.validate(model.nestedModelParameter, HttpModelType.PARAMETER, "nested_model_parameter");
        nestedModelConstraintValidator.validate(model.nestedModelParameter, HttpModelType.PARAMETER, "nested_model_parameter");

        requiredListConstraintValidator.validate(model.nestedModelsParameter, HttpModelType.PARAMETER, "nested_models_parameter");
        requiredConstraintValidator.validateIterable(model.nestedModelsParameter, HttpModelType.PARAMETER, "nested_models_parameter");
        nestedModelConstraintValidator.validateIterable(model.nestedModelsParameter, HttpModelType.PARAMETER, "nested_models_parameter");
    }
}
